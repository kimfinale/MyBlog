[
  {
    "objectID": "posts/sub-exponential-growth/index.html",
    "href": "posts/sub-exponential-growth/index.html",
    "title": "Sub-exponential growth",
    "section": "",
    "text": "대부분의 SIR 모형은 감염병 확산의 메커니즘을 아래와 같은 식으로 표현한다.\n\\[\\frac{\\mathrm{d}I}{\\mathrm{d}t} = \\beta S\\frac{I}{N}.\\]\n말로 설명하자면 다음과 같다. 감수성자가 단위 시간 당 평균적으로 \\(\\beta\\) 의 유효 접촉, 다시 말해 감염자와 만나면 감염이 일어나게 되는 접촉을 하게 된다. 무작위로 접촉을 하는 경우 감염자를 만날 확률은 \\(\\frac{I}{N}\\) 와 같다. \\(N\\)은 총 인구 수를 의미한다. 이러한 감염병 확산 메커니즘을 frequency-dependent 하다고 말한다.\n이와 같은 메커니즘의 결과 중 하나는 감염병의 확산 초기에 감염자의 수가 exponential growth (EG)를 보인다는 것이다. 하지만 Chowell et al. 이 지적한 것처럼 실제 감염병 유행 자료를 살펴 보면 감염자수의 증가 속도는 SIR 모형이 예측하는 것 보다는 느린 속도 sub-exponential growth (SEG) 가 흔히 나타난다. 기존의 연구들에서는 크게 두 가지의 메커니즘을 들어 SEG 를 설명한다. 첫째는 어떤 이유로든 감염병이 확산되고 있는 인구집단에서 inhomogeneous mixing이 일어나는 경우이다. 왜 inhomogeneous mixing이 SEG를 나타내는지 그리고 정량적으로 어떤 관계가 있는지는 다음에 살펴보자. 이번 포스트에서는 사람들이 골고루 섞이지 않음으로 인해 감염병의 발생이 특정 지역 및 집단에 국한 되어 전체적으로는 확산 속도가 느려진다는 정도로 이해해도 되겠다. 이렇게 inhomogeneous mixing 이 나타나는 경우는 집단 내에서 특히 접촉이 많은 소규모 집단이 있다거나 (네트워크 개념을 사용하자면 clustering) 혹은 공간적으로 더 위험한 지역과 덜 위험한 지역이 있다고 가정할 수도 있겠다. Inhomogeneous mixing이외 에도 감염병 확산에 대응하여 사람들이 위험 행동을 줄여나가면 확산 속도가 점차 감소하여 SEG가 나타날 수 있다.\nSEG를 표현하는 간단한 방법 중 하나는 아래 식에서 처럼 \\(\\alpha\\)와 같은 지수를 사용하는 것이다 .\n\\[\\frac{\\mathrm{d}I}{\\mathrm{d}t} = \\beta S\\frac{I^\\alpha}{N}.\\]\n이번 포스팅에서는 SEG을 SEIR 모형을 이용하여 구현하고 모수 추정 후 EG 모형과 비교해보고자 한다.\n우선 아래와 같이 SEIR 모형을 구현한다.\n\nseir_ode &lt;- function(t, y, params) {\n  # state variables \n  S &lt;- y[\"S\"]; \n  E &lt;- y[\"E\"]; \n  I &lt;- y[\"I\"]; \n  R &lt;- y[\"R\"];\n  CI &lt;- y[\"CI\"]\n  \n  epsilon &lt;- params[[\"epsilon\"]] # 1/epsilon = latent period\n  gamma &lt;- params[[\"gamma\"]] # 1/gamma = duration of infectiousness\n  beta &lt;- params[[\"beta\"]] # R0 = beta/gamma\n  alpha &lt;- params[[\"alpha\"]]\n  N &lt;- S + E + I + R # total population size\n  muSE &lt;- beta * S * (I^(alpha)) / N # rate from S to E\n  muEI &lt;- epsilon * E # rate from E to I, i.e., 1/epsilon = latent period\n  muIR &lt;- gamma * I # rate from I to R\n  \n  dS &lt;- - muSE # rate of change for S\n  dE &lt;- muSE - muEI # rate of change for E\n  dI &lt;- muEI - muIR # rate of change for I\n  dR &lt;- muIR # rate of change for R\n  dCI &lt;- muSE # rate of change for R\n  \n  return(list(c(dS, dE, dI, dR, dCI))) # return as a list to use deSolve package\n}\n\n초기 조건을 정의하자. 이 값들은 스크립트에서 global 변수로 사용할 것이다.\n\n# initial conditions as global variables\nI0 &lt;- 10 # initially infected people\ny0 &lt;- c(S=10000 - I0, E=0, I=I0, R=0, CI=0) # initial values for state variables\ntend &lt;- 100 # simulation end time 50 days\ntimes &lt;- seq(0, tend, by=1) # daily output for 150 days\n\n기본 모수를 정의하는 함수와 단위 시간 당 발생자 수를 조사하는 함수를 정의하자. 이 것들은 나중에 모수 추정과정에서 사용될 것이다.\n\n# baseline parameters\npinit &lt;- function(beta=0.3, alpha=1) {\n  params &lt;- list() # parameter input for the SIR model\n  params$epsilon &lt;- 0.5\n  params$gamma &lt;- 0.2\n  params$beta &lt;- beta\n  params$alpha &lt;- alpha\n  \n  return(params)\n}\n\nlibrary(dplyr)\nlibrary(deSolve)\n# incidence over a given time interval, delta_t\nincidence &lt;- function(p, delta_t=7) {\n  parm = pinit()\n  parm$beta &lt;- p[[\"beta\"]]\n  if(length(p) &gt; 1) {\n     parm$alpha &lt;- p[[\"alpha\"]]\n  }\n  ode(y=y0, times=times, func=seir_ode, parms=parm) %&gt;%\n  as.data.frame() -&gt; out\n  di = c(0, diff(out$CI))\n\n  return(di[seq(1, length(di), by=delta_t)])\n}\n\n아래와 같이 모수 추정에 사용할 거짓 자료를 만들어 보자. 전에 사용하 듯이 관찰값은 모형 예측값을 모수로 가지는 푸아송 변수로 가정하자. 기본 값으로 한 주간에 감염자수를 자료로 사용한다. 그림에서 원들은 거짓 관찰값을 점선은 모형 예측값을 나타낸다. 검정색과 빨강색은 각각 EG와 SEG를 나타낸다.\n\n# create fake data\nset.seed(42) # for reproducibility\n\ninc1 = incidence(p=pinit()) # baseline parameters, i.e., alpha=1\ndat1 &lt;- rpois(length(inc1), lambda=inc1)\nplot(dat1, xlab=\"Week\", ylab=\"Number of cases\", main=\"Exponential growth\")\nlines(inc1, col=2)\n\n\n\ninc2 = incidence(p=pinit(beta=0.5, alpha=0.8)) \ndat2 &lt;- rpois(length(inc2), lambda=inc2)\nplot(dat2, xlab=\"Week\", ylab=\"Number of cases\", main=\"Sub-exponential growth\")\nlines(inc2, col=2)\n\n\n\n\n거짓 자료를 이용하여 모수 추정을 하여 보자. 모수 추정 함수를 정의 하기 전에 아래와 같이 간단한 함수들을 정의하자. \\(\\mathrm{expit}\\)은 0과 1사이의 값만 정의되는 모수 (i.e., \\(\\alpha\\)) 를 사용하기 위해서 정의 하였고 이를 다시 원래값으로 되 돌리는 데 사용할 \\(\\mathrm{logit}\\)을 정의하였다. \\(\\mathrm{AIC}\\) (Akaike information criterion)는 모형의 우수함 (quality)의 상대 비교를 위해 사용한다. AIC 는 사용된 모형이 실제 자료를 만들어낸 모형과 다름으로 인해 잃어버리게 되는 정보의 양을 나타내는 상대적인 값이다. \\(\\mathrm{AIC}\\) 값이 작을 수록 정보를 덜 잃어버렸다는 뜻으로 더 우수한 모형을 나타낸다고 할 수 있다. \\(\\mathrm{AIC_c}\\) 는 모수 추정 시 사용된 자료의 수가 적은 경우에 더 적합한 방법이다.\n\\[ \\mathrm{logit}(p) := \\mathrm{ln} (\\frac{p}{1-p})\\] \\[\\mathrm{expit}(x) :=  \\frac{1}{1+\\mathrm{exp}(-x)}\\] \\[\\mathrm{AIC} := 2k - 2\\mathrm{ln}(\\hat{L})\\] \\[ \\mathrm{AIC_c} := \\mathrm{AIC} + \\frac{2 k^2+2 k}{n-k-1}\\]\n\nexpit &lt;- function(x) {\n  1/(1+exp(-x))  \n}\nlogit &lt;- function(x) {\n  log(x/(1-x))  \n}\naic = function(k, L){\n  2*k - 2*log(L)\n}\naicc = function(k, L, n){\n  2*k - 2*log(L) + (2*k^2+2*k)/(n-k-1)\n}\n\n모형 에측값과 관찰값과의 유사성을 측정하기 위해 likelihood 함수를 사용하자. 함수를 최소화 하는 optim의 기본 기능을 사용할 것이기 때문에 negative log likelihood를 정의한다. SEG 모형의 경우 \\(\\beta, \\alpha\\) 두 개의 함수를 추정하자.\n\nnegloglik &lt;- function (p, y) {\n  if (length(p) == 1) x &lt;- incidence(p=pinit(beta=exp(p[1])))\n  if (length(p) == 2) x &lt;- incidence(p=pinit(beta=exp(p[1]), alpha=expit(p[2])))\n  nll &lt;-  - sum(dpois(y, lambda=x, log=T), na.rm=T)\n  return(nll)\n}\n\n\nfit1 = optim(par=log(0.3), fn=negloglik, y=dat1, method=\"Brent\", lower=log(1e-6), upper=log(0.9))\nplot(dat1, xlab=\"Week\", ylab=\"Number of cases\")\nlines(incidence(p=pinit(beta=exp(fit1$par))), col=2, lty=2)\nlegend(1, 100, legend=c(\"Data\", \"Fit\"),\n       col=c(\"black\", \"red\"), lty=c(NA,2), pch=c(1,NA), cex=0.8)\n\n\n\n\n이번에는 이번 포스팅의 주제인 SEG 모형으로 만든 거짓자료를 EG 그리고 SEG 모형 두 가지로 최적화하여 보자.\n\nfit2 = optim(par=log(0.3), fn=negloglik, y=dat2, method=\"Brent\", lower=log(1e-6), upper=log(0.9))\nfit3 = optim(par=c(log(0.3), logit(0.2)), fn=negloglik, y=dat2, method=\"Nelder-Mead\")\n\n# check log likelihood\n-fit2$value\n\n[1] -54.8522\n\n-fit3$value\n\n[1] -33.3477\n\nplot(dat2, xlab=\"Week\", ylab=\"Number of cases\")\nlines(incidence(p=pinit(beta=exp(fit2$par[1]))), col=2, lty=2)\nlines(incidence(p=pinit(beta=exp(fit3$par[1]), alpha=expit(fit3$par[2]))), col=3, lty=2)\nlegend(1, 17, legend=c(\"Data\", \"Exponental fit\", \"Sub-exponential fit\"),\n       col=c(\"black\", \"red\", \"green\"), lty=c(NA,2.2), pch=c(1,NA,NA), cex=0.8)\n\n\n\n\n플롯을 살펴보았을때 SEG 모형을 이용한 피팅이 더 잘 맞아들어가는 것 같은데 \\(\\mathrm{AIC}\\)를 이용해서 모형을 비교해보자. \\(\\mathrm{AIC}\\) 와 \\(\\mathrm{AIC_c}\\) 둘 다 SEG 모형이 자료를 더 잘 설명하는 모형임을 보여준다.\n\n# Akaike information criterion to compare models\naic(k=1, L=exp(-fit1$value)) # 83.75242\n\n[1] 94.48891\n\naic(k=2, L=exp(-fit2$value)) # 69.54993\n\n[1] 113.7044\n\naicc(k=1, L=exp(-fit1$value), n=length(dat2)) #84.06011\n\n[1] 94.7966\n\naicc(k=2, L=exp(-fit2$value), n=length(dat2)) #70.54993\n\n[1] 114.7044"
  },
  {
    "objectID": "posts/reproduction-number/index.html",
    "href": "posts/reproduction-number/index.html",
    "title": "감염재생산지수 계산하기",
    "section": "",
    "text": "코로나19에 효과적으로 대응하고자 방역 당국과 연구자들이 코로나19의 전파 양상을 분석한 결과가 뉴스에 종종 보도 되었는데 그 내용 중에 빠지지 않는 것이 감염재생산지수이다. 영어로는 reproduction number (\\(\\mathcal{R}\\)) 로 불리는 데 한 명의 감염자로부터 야기된 후속 감염자의 수를 말한다. \\(\\mathcal{R}\\)이 1을 넘으면 감염자의 규모가 시간이 지남에 따라 커질 것이고 1보다 작으면 규모가 감소할 것이다. 누가 누구를 감염시켰는지 모두 알고 있다면 감염자들의 수를 세서 \\(\\mathcal{R}\\) 구할 수 있을 것이다. 하지만 한국 코로나 19 상황처럼 확진자가 많아서 모든 환자의 감염 경로를 알지 못하고 일별 확진자 자료를 가지고 있다면 어떻게 \\(\\mathcal{R}\\)을 계산할까? 이 글에서는 이에 관해 살펴보고자 한다.\n\n\n\\(\\mathcal{R}\\)의 정의\n위에서 언급한 것처럼 \\(\\mathcal{R}\\)은 한 명의 감염자에서 야기되는 후속 감염자의 수를 의미한다. 감염을 야기한 사람을 먼저 왔다는 의미로 ‘선행 감염자’ (infector) 그리고 새로이 감염된 사람들을 후에 감염되었다는 의미로 ‘후속 감염자’ (infectee) 라 칭하겠다. 그렇다면 아래와 같은 식을 쓸 수 있을 것 같다. \\[\\mathcal{R} = \\frac{새끼의 수}{어미의 수} =\\frac{후속 감염자 수}{선행 감염자 수} = \\frac{\\textrm{number of infectee}}{\\textrm{number of infector}}\\]\n\n\n\\(\\mathcal{R}\\) 계산 방법\n일별 확진자 자료를 이용하여 (\\(\\mathcal{R}\\))을 구하는 방법을 알아보기 전에 감염 경로를 모두 아는 경우를 살펴보자. 예를 들어 아래 그림과 같이 감염병이 전파되고 있다고 생각해보자. 그림에서 점들은 사람을 나타내고 화살표는 감염이 일어난 방향을 나타낸다. 그리고 0, 1, 2는 세대를 나타내는데 0세대는 외부에서 유입된 최초 감염자를 나타낸다. 측 최초 감염자가 3명을 감염시켰고 후속 감염자들도 각각 3명을 감염시켰다.\n\n2세대 이후의 상황은 모른다 가정하고 2세대까지만 계산에 넣으면 다음과 같이 계산할 수 있을 것이다. \\(\\mathcal{R}=12/4=3\\). 감염이 계속 일어나 총 \\(n\\)명의 인구 집단이 모두 감염되었다면 \\(\\mathcal{R}\\)은 얼마일까? 선행 감염자의 수는 최초의 유입된 감염자를 포함해서 \\(n+1\\) 그리고 후속 감염자의 수는 \\(n\\)이 될 것이다. 즉 \\(\\mathcal{R} = \\frac{n}{n+1}\\). 그리고 \\(n\\)이 큰 경우라면 \\(\\mathcal{R}\\)은 1로 수렴할 것이다.\n본론으로 들어가서 감염 경로는 모른채 일별 확진자수만을 가지고 \\(\\mathcal{R}\\)을 어떻게 계산할까? 아래 그림을 살펴보자. 이 그림은 중국에서 처음 발견된 확진자 수를 나타내는 유행 곡선 (epidemic curve) 이다. 붉은막대는 발열자를 나타내는데 논의의 편의를 위해서 감염자 수라 가정해보자. 녹색 네모로 표시한 2월 17일에 감염된 사람들은 녹색 화살표로 나타낸 것처럼 2월 17 일 이전에 감염된 사람들에 의하여 감염되었을 것이다. 정확히 누구에게 혹은 몇 일에 감염된 사람으로부터 감염되었는지는 알 수 없지만 말이다. 그리고 한 가지 더 알 수 있는 것은 화살표의 두께로 표현한 것처럼 선행 감염자가 언제 감염되었는지에 따라 2월 17일에 후속 감염을 일으킬 수 있는 확률이 다를 수 있다는 사실이다. 달리 표현하면 감염 후 시간이 지남에 따라 후속 감염을 일으킬 수 있는 확률이 변하게 된다는 것을 의미한다.\n\n감염 후 시간에 따라 후속 감염을 일으킬 수 있는 확률이 변할 수 있다는 것은 코로나19에 걸리게 되면 나타나는 일련의 인체 내에서의 변화 및 사람의 생활 습성등을 고려하면 어느 정도 이해할 수 있다. 바이러스에 감염되어 후속 감염자를 만들어 내기 위해서는 바이러스가 인체 내에서 증식해야 하므로 시간이 필요하다. 소위 잠재기 (latent period)가 필요하다. 이후 바이러스가 계속 증식하고 증가하고 감염 확률이 증가할 것이다. 이후 잠복기 (incubation period)를 거쳐 증상이 나타나고 회복기에 접어들면 감염 확률이 줄어들 것이다. 이런한 일련의 인체 반응에 더해 사람의 행동도 감염 확률에 영향을 미칠 것이다. 즉 몸에 바이러스가 아무리 많아도 아파서 타인을 만나지 않는다면 전파는 일어나지 않을 것이다.\n감염 후 시간에 따라 후속 감염을 일으킬 확률은 세대기 (generation interval, generation time, or transmission interval)의 분포를 이용하면 표현이 가능하다. 세대기는 한 감염자가 후속 감염을 일으킬 때 까지 걸리는 시간이다. 코로나19의 세대기는 대체로 아래와 같은 분포를 가진다고 가정해 보자. 즉 감염됨 사람이 후속 감염을 일으키려면 감염 후 하루가 지나야 하고 6일 째가 되면 후속 감염을 일으키지 않는다고 가정해보자.\n\n이걸 역으로 생각해보면 오늘 감염된 사람이 발견된 경우 이 사람을 감염시킨 선행 감염자는 2일-5일 전에 감염되었을 것이다. 이러한 세대기의 분포를 이용하면 \\(\\mathcal{R}\\) 계산식에서 문제가 되었던 부분 즉 분모에 해당하는 선행 감염자 수를 계산해 볼 수 있다. 일별 감염자가 100명씩 열흘간 발생했다고 가정해보자. 감염자 수가 일정하게 유지되고 있으니 계산할 것도 없이 \\(\\mathcal{R}\\)은 1일 것이다. 그래도 위의 논리를 이용하여 계산 하여 보자. 오늘 감염된 사람 100명이 후속 감염자가 되고 2일-5일 전에 감염된 사람이 선행 감염자가 된다. 주의할 점은 2일-5일 사이에 감염된 사람 중 위의 확률에 따라 일부만이 선행 감염자가 된다. \\[\\mathcal{R} = \\frac{후속 감염자 수}{선행 감염자 수} = \\frac{100}{100 \\times 0.25 + 100 \\times 0.35 + 100 \\times 0.25 + 100 \\times 0.15 } = 1\\]"
  },
  {
    "objectID": "posts/pop-monte-carlo/index.html",
    "href": "posts/pop-monte-carlo/index.html",
    "title": "Population Monte Carlo 파퓰레이션 몬테카를로",
    "section": "",
    "text": "최근에 파티클필터링 (particle filtering; PF) 방법을 이용하여 \\(\\mathcal{R}_t\\) 추정하는 과정에 대한 논문을 썼다. 그런데, 항상 의문이었던 것은 PF를 조금만 변형하면 감염병 모형의 감염속도 \\(\\beta=\\mathcal{R}_0 \\gamma\\) 와 같은 time-invariant 파라미터를 추정할 수도 있지 않을까 하는 것이었다. Population Monte Carlo (PMC)가 바로 그 방법이었다.\n이번 포스트에서는 SIR 모형의 모수 \\(\\beta\\)를 PMC 방법으로 추정하여 보았다. 추정하는 PMC 알고리즘을 아래에 구현하였다. 전에 구현했던 particle filtering 와 유사하다. 즉 중요도 샘플링 (importance sampling)을 연속으로 구현하는 데 연속으로 샘플링 하기 위해 Markov Chain Monte Carlo 에서 사용하듯이 proposal 을 이용하여 다음 단계의 샘플을 만들고 중요도 샘플링을 이용하여 추정을 하는 것이다.\n\nlibrary(truncnorm) # draw or evaluate according to a truncated normal dist  \npmc &lt;- function (params = NULL,\n                 x0 = NULL, # initial values\n                 y = NULL, # observation\n                 npart = 1000, # number of particles \n                 niter = 10, # iterations\n                 tend = 100, # to control the number of daily y to be fitted\n                 dt = 0.1, # dt for the ODE integration\n                 prior_mean = 0.5,\n                 prior_sd = 2,\n                 prior_lb = 0,\n                 prior_ub = 2) {\n  \n  # makes it easy to use truncated normal distribution\n  nstate &lt;- length(x0) # number of state variables (i.e., S, I, R, CI)\n  \n  # initial betas are sampled according to the prior distribution\n  beta0 &lt;- rtruncnorm(npart, a=prior_lb, b=prior_ub, mean=prior_mean, sd=prior_sd)\n  beta &lt;- matrix(NA, ncol=npart, nrow=niter) # to store the samples for beta\n  beta[1,] &lt;- beta0 # the initial values for the first row\n  # proposal for the next iteration, which is then resampled according to the  weight\n  sd = sd(beta[1,]) # scale for the proposal is adapted according to the current sample \n  beta[2,] = rtruncnorm(npart, a=prior_lb, b=prior_ub, mean=beta[1,], sd=sd)\n  \n  lik &lt;- matrix(NA, ncol = npart, nrow = niter) # likelihood \n  proposal_prob &lt;- matrix(NA, ncol = npart, nrow = niter)\n  wt &lt;- matrix(NA, ncol = npart, nrow = niter) # weight \n  W &lt;- matrix(NA, ncol = npart, nrow = niter) # normalized weights\n  A &lt;- matrix(NA, ncol = npart, nrow = niter) # Resample according to the normalized weight\n  # initial value  \n  proposal_prob[1,] &lt;- 1\n  wt[1,] &lt;- 1 / npart  # initial weights\n  W[1,] &lt;- wt[1,]\n \n  for (i in 2:niter) {\n    # cat(\"i =\", i, \"\\n\")\n    # tend increases by 1 accounts for the initial values\n    X &lt;- array(0, dim = c(npart, tend+1, nstate),\n               dimnames = list(NULL, NULL, names(x0)))\n    for (nm in names(x0)) {# starting values for each particle\n      X[, 1, nm] &lt;- x0[[nm]]\n    }\n    # run process model (i.e., SIR model) \n    x_1_tend &lt;- \n      process_model(params = params,\n                   x = X,\n                   dt = dt,\n                   beta = beta[i,])\n    # calculate weights (likelihood)\n    lik[i,] &lt;- assign_weights(x = x_1_tend, y = y[1:tend])\n    # normalize particle weights\n    proposal_prob[i,] = dtruncnorm(beta[i,], beta[i-1,], a=prior_lb, b=prior_ub, sd=sd)\n    prior_prob = dtruncnorm(beta[i,], a=prior_lb, b=prior_ub, mean=prior_mean, sd=prior_sd)\n    wt[i,] &lt;- lik[i,] * prior_prob / proposal_prob[i,]\n    \n    W[i,] &lt;- wt[i,] / sum(wt[i,])\n    # resample particles by sampling parent particles according to normalized weights\n    A[i,] &lt;- sample(1:npart, prob=W[i,], replace=T)\n    beta[i,] &lt;- beta[i, A[i,]] # resampled beta according to the normalized weight\n    # sd for the proposal can be adapted in various other ways, but we use the sd of the current sample\n    sd = sd(beta[i,]) \n    # generate proposals for the next iteration\n    if (i &lt; niter) {\n      beta[i+1,] &lt;- rtruncnorm(npart, a=prior_lb, b=prior_ub, mean=beta[i,], sd=sd)\n    } \n  } # end iteration\n  return (list(theta=beta, lik=lik, W=W, A=A))\n}\n\n감염병 확산 과정을 나타내는 SIR 모형을 구현해보자. 파티클수에 따라 벡터형태로 SIR 모형을 구현하였다.\n\nprocess_model &lt;- function (params = NULL,\n                           x = NULL,\n                           dt = 0.1,\n                           beta = NULL) {\n  \n  S &lt;- x[, 1, \"S\"] # a vector of initial S across the particles\n  I &lt;- x[, 1, \"I\"] # a vector of initial I across the particles\n  R &lt;- x[, 1, \"R\"] # a vector of initial S across the particles\n  \n  len &lt;- length(x[1,,\"S\"]) # length of model predictions (same as the data points) + 1 accounting for the initial values\n         \n  N &lt;- S + I + R\n  gamma &lt;- params[[\"gamma\"]]\n  \n  for (j in 2:len) {\n    daily_infected &lt;- 0 # to track the daily infection\n    for (i in seq(dt, 1, dt)) { # steps per day\n      FOI &lt;- beta * I * S/N\n      S_to_I &lt;- FOI * dt\n      I_to_R &lt;- I * gamma * dt\n  \n      S &lt;- S - S_to_I\n      I &lt;- I + S_to_I - I_to_R\n      R &lt;- R + I_to_R\n      \n      daily_infected &lt;- daily_infected + S_to_I\n    }\n    \n    x[, j, \"S\"] &lt;- S\n    x[, j, \"I\"] &lt;- I\n    x[, j, \"R\"] &lt;- R\n    x[, j, \"Inc\"] &lt;- daily_infected\n  }\n  return(x[, 2:len, \"Inc\"])\n}\n\n모수 추정에 사용할 거짓 일별 감염자수를 만들어보자. 위에서 구현한 process_model에서 예측되는 일별 감염자 수를 평균으로 하는 푸아송 분포를 이용하여 만들었다.\n\nparm = list(gamma=0.3) #\nx0 = c(S=9990, I=10, R=0, Inc=0)#\ntend = 50 # the number of observations\n# tend + 1 to account for the initial values\nX &lt;- array(0, dim = c(1, tend+1, 4), \n               dimnames = list(NULL, NULL, names(x0)))\nfor (nm in names(x0)) {# starting values for each particle\n  X[, 1, nm] &lt;- x0[[nm]]\n}\ntruebeta &lt;- 0.6 # true beta\npred &lt;- process_model(params=parm, x=X, beta=truebeta)\ny &lt;- rpois(tend, lambda=round(pred))  # \n\npmc 함수에 사용된 또 다른 함수 assign_weights를 아래에 구현하였다.\n\nassign_weights &lt;- function (x, y) {\n  di &lt;- dim(x)\n  npart &lt;- di[1] # number of particles\n  nobs &lt;- di[2] # number of observations\n  loglik &lt;- rep(NA, npart)\n  for (i in 1:npart) {\n    mean_case &lt;- x[i,] # for the ith particle\n    expected_case &lt;- pmax(0, mean_case)\n    obs_case &lt;- round(y)\n    loglik[i] &lt;- sum(dpois(obs_case, lambda=expected_case, log=T), na.rm=T)\n  }\n  return (exp(loglik)) # convert to normal probability\n}\n\nPMC를 이용하여 모수 추정을 해보고 결과를 그림으로 나타내보자.\n\nset.seed(44)\n# gamma and x0 are set to the same as the model used to generate the data\nparm = list(gamma=0.3)\nx0 = c(S=9990, I=10, R=0, Inc=0)# initial condition\nniter = 50\n# out = pmc(params = parm, x0 = x0, y=y, npart=10000, niter=niter, \n#    tend = length(y), dt=0.1, prior_mean=0.5, prior_sd=0.1, prior_lb=0,\n#    prior_ub=2)\n# saveRDS(out, \"out_20230811.rds\")\nout &lt;- readRDS(\"out_20230811.rds\")\nhist(out$theta[niter,], xlab=expression(beta), main=\"\")\nabline(v=truebeta, col=2, lwd=2)"
  },
  {
    "objectID": "posts/modeling-philosophy/index.html",
    "href": "posts/modeling-philosophy/index.html",
    "title": "Modeling philosophy",
    "section": "",
    "text": "감염병 전파를 이해하는 데에는 수리 모형 (model)이 아주 중요한 역할을 한다. 그런데 현실과는 모형을 통해서 어떻게 현실에 대해 배울 수 있을까? 스탠포드 철학 백과사전에 이러한 내용을 담고 있는 부분이 있어 여기에 정리를 해본다. 아직 만족한 만한 해답을 찾지는 못했다.\n철학자들은 모형을 만들고 (building), 조작하고 (manipulation), 적용하고 (application), 평가함 (evaluation)으로써 현실에 대해 추론 (reasoning) 을 할 수 있다고 기술하고 있는 것 같다. 이런 과정을 “surrogative reasoning” 혹은 “model-based reasoning” 이라는 용어로 표현하기도 했다. 추론 과정은 모형 자체를 이해하는 과정과 그 모형에 대한 이해를 현실에 적용하는 과정 두 가지로 나누어 볼 수 있다. 모형을 만드는 과정은 모형의 여러 부분들이 어떻게 서로 맞아 들어가는 지 알게 되는 과정이다. 모형을 조작하는 과정은 모형을 모수(parameter)를 변화시켜가며 시물레이션을 통해 그 결과를 확인하는 과정이 될 것이다. 모형을 만들고 조작함으로써 알게된 지식을 어떻게 그 대상인 (target system)인 현실의 언어로 변역할 수 있을까? 모형이 현실의 일부를 나타내도록 (represent) 만들어 졌다면 즉 다시 말해 우리가 알고자 하는 현실 (예를 들면 백신 접종 시에 감염자수의 감소 정도)에 상응하는 부분이 모형에 구현되어 있다면 모형을 통해서 얻은 지식이 현실에 적용될 수 있을 것 같다. 그런데 모형에 구현된 부분이 현실을 잘 반영하는지를 어떻게 알 수 있을까?"
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "Jong-Hoon Kim",
    "section": "",
    "text": "101-1804\nkimfinale@gmail.com\n\n\n174 Solsaem-ro, Gangbuk-gu\nwww.jonghoonk.com\n\n\nSeoul, Korea\n+82-10-9482-2517\n\n\n\n\n\n\n2021-2023 (expected)\n\nMicroMaster, Statistics and Data Science; MITx (online learning initiative of the Massachusetts Institute of Technology)\n\n2006-2010\n\nPhD, Theoretical Epidemiology (Disease Transmission Modeling); University of Michigan, Ann Arbor\nThesis title: Dynamic partnerships and HIV transmissions by stage\n\n2007-2010\n\nMSc, Biophysics and molecular biology; Gwangju Institute of Science and Technology\n\n2007-2010\n\nBSc, Biochemistry; Chungnam National University\n\n\n\n\n\n2008-9\nRackham Fellowship ($20,000) University of Michigan, Ann Arbor 2004 Student Award ($3,000)\nBlue Cross Blue Shield Michigan Foundation 2003-2004 Study Abroad Scholarship ($60,000) Korea Science and Engineering Foundation\n\n\n\nYour Most Recent Work Experience:\nShort text containing the type of work done, results obtained, lessons learned and other remarks. Can also include lists and links:\n\nFirst item\nItem with link. Links will work both in the html and pdf versions.\n\nThat Other Job You Had\nAlso with a short description.\n\n\n\nResearch Scientist at the International Vaccine Institute (2018-present)\n\n\n\nI am a theoretical epidemiologist specializing in the modeling of infectious disease transmission. My research involves utilizing mathematical and statistical models as well as data science techniques to examine the dynamics of disease transmission and evaluate the effectiveness of intervention programs like vaccination. Over the course of my career, I have investigated a wide range of pathogens including HIV, poliovirus, cholera, typhoid fever, non-typhoidal Salmonella disease, and COVID-19. To continue expanding my expertise in the field, I actively pursue new knowledge in machine learning and data science. Additionally, I have shared my knowledge through numerous lectures and participated in advisory panels aimed at controlling the spread of COVID-19 in Korea.\n\n\n\n\nMy Cool Side Project\n\nFor items which don’t have a clear time ordering, a definition list can be used to have named items.\n\nThese items can also contain lists, but you need to mind the indentation levels in the markdown source.\nSecond item.\n\n\nOpen Source\n\nList open source contributions here, perhaps placing emphasis on the project names, for example the Linux Kernel, where you implemented multithreading over a long weekend, or node.js (with link) which was actually totally your idea…\n\nProgramming Languages\n\nfirst-lang: Here, we have an itemization, where we only want to add descriptions to the first few items, but still want to mention some others together at the end. A format that works well here is a description list where the first few items have their first word emphasized, and the last item contains the final few emphasized terms. Notice the reasonably nice page break in the pdf version, which wouldn’t happen if we generated the pdf via html.\n\n\nsecond-lang: Description of your experience with second-lang, perhaps again including a [link] ref, this time placing the url reference elsewhere in the document to reduce clutter (see source file).\n\n\nobscure-but-impressive-lang: We both know this one’s pushing it.\n\n\nBasic knowledge of C, x86 assembly, forth, Common Lisp\n\n\n\n\n\n\nHuman Languages:\n\nEnglish (native speaker)\n???\nThis is what a nested list looks like.\n\nRandom tidbit\nOther sort of impressive-sounding thing you did"
  },
  {
    "objectID": "cv.html#education",
    "href": "cv.html#education",
    "title": "Jong-Hoon Kim",
    "section": "",
    "text": "2021-2023 (expected)\n\nMicroMaster, Statistics and Data Science; MITx (online learning initiative of the Massachusetts Institute of Technology)\n\n2006-2010\n\nPhD, Theoretical Epidemiology (Disease Transmission Modeling); University of Michigan, Ann Arbor\nThesis title: Dynamic partnerships and HIV transmissions by stage\n\n2007-2010\n\nMSc, Biophysics and molecular biology; Gwangju Institute of Science and Technology\n\n2007-2010\n\nBSc, Biochemistry; Chungnam National University"
  },
  {
    "objectID": "cv.html#honors-and-awards",
    "href": "cv.html#honors-and-awards",
    "title": "Jong-Hoon Kim",
    "section": "",
    "text": "2008-9\nRackham Fellowship ($20,000) University of Michigan, Ann Arbor 2004 Student Award ($3,000)\nBlue Cross Blue Shield Michigan Foundation 2003-2004 Study Abroad Scholarship ($60,000) Korea Science and Engineering Foundation"
  },
  {
    "objectID": "cv.html#experience",
    "href": "cv.html#experience",
    "title": "Jong-Hoon Kim",
    "section": "",
    "text": "Your Most Recent Work Experience:\nShort text containing the type of work done, results obtained, lessons learned and other remarks. Can also include lists and links:\n\nFirst item\nItem with link. Links will work both in the html and pdf versions.\n\nThat Other Job You Had\nAlso with a short description."
  },
  {
    "objectID": "cv.html#current-position",
    "href": "cv.html#current-position",
    "title": "Jong-Hoon Kim",
    "section": "",
    "text": "Research Scientist at the International Vaccine Institute (2018-present)"
  },
  {
    "objectID": "cv.html#research-interests",
    "href": "cv.html#research-interests",
    "title": "Jong-Hoon Kim",
    "section": "",
    "text": "I am a theoretical epidemiologist specializing in the modeling of infectious disease transmission. My research involves utilizing mathematical and statistical models as well as data science techniques to examine the dynamics of disease transmission and evaluate the effectiveness of intervention programs like vaccination. Over the course of my career, I have investigated a wide range of pathogens including HIV, poliovirus, cholera, typhoid fever, non-typhoidal Salmonella disease, and COVID-19. To continue expanding my expertise in the field, I actively pursue new knowledge in machine learning and data science. Additionally, I have shared my knowledge through numerous lectures and participated in advisory panels aimed at controlling the spread of COVID-19 in Korea."
  },
  {
    "objectID": "cv.html#technical-experience",
    "href": "cv.html#technical-experience",
    "title": "Jong-Hoon Kim",
    "section": "",
    "text": "My Cool Side Project\n\nFor items which don’t have a clear time ordering, a definition list can be used to have named items.\n\nThese items can also contain lists, but you need to mind the indentation levels in the markdown source.\nSecond item.\n\n\nOpen Source\n\nList open source contributions here, perhaps placing emphasis on the project names, for example the Linux Kernel, where you implemented multithreading over a long weekend, or node.js (with link) which was actually totally your idea…\n\nProgramming Languages\n\nfirst-lang: Here, we have an itemization, where we only want to add descriptions to the first few items, but still want to mention some others together at the end. A format that works well here is a description list where the first few items have their first word emphasized, and the last item contains the final few emphasized terms. Notice the reasonably nice page break in the pdf version, which wouldn’t happen if we generated the pdf via html.\n\n\nsecond-lang: Description of your experience with second-lang, perhaps again including a [link] ref, this time placing the url reference elsewhere in the document to reduce clutter (see source file).\n\n\nobscure-but-impressive-lang: We both know this one’s pushing it.\n\n\nBasic knowledge of C, x86 assembly, forth, Common Lisp"
  },
  {
    "objectID": "cv.html#extra-section-call-it-whatever-you-want",
    "href": "cv.html#extra-section-call-it-whatever-you-want",
    "title": "Jong-Hoon Kim",
    "section": "",
    "text": "Human Languages:\n\nEnglish (native speaker)\n???\nThis is what a nested list looks like.\n\nRandom tidbit\nOther sort of impressive-sounding thing you did"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi! My name is Jong-Hoon Kim, and I live in Seoul, South Korea. I am a theoretical epidemiologist who uses mathematical, statistical, and machine-learning models to study infectious disease epidemiology. My work involves developing theories about infectious disease transmission, making predictions, and assessing the effectiveness of intervention strategies to improve public health. Currently, in 2023, I work at the International Vaccine Institute, which is located in Seoul, South Korea. My current research primarily focuses on typhoid fever, non-typhoidal Salmonella, cholera, and COVID-19.\nPlease email me if you are interested in collaborating with me"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jong-Hoon Kim's Blog",
    "section": "",
    "text": "Fitting a straight line in Julia: Flux machine learning\n\n\n\n\n\n\n\njulia\n\n\nFlux\n\n\nlinear model\n\n\n\n\n\n\n\n\n\n\n\nJan 4, 2024\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nUniversal differential equation using Julia\n\n\n\n\n\n\n\nuniversal differential equation\n\n\njulia\n\n\nLotka-Volterra\n\n\npredator-prey model\n\n\n\n\n\n\n\n\n\n\n\nJan 2, 2024\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nCholera SEIR equation\n\n\n\n\n\n\n\ncholera\n\n\nsub-Saharan Africa\n\n\n\n\n\n\n\n\n\n\n\nDec 29, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nUniversal differential equation\n\n\n\n\n\n\n\nuniversal differential equation\n\n\npython\n\n\nSIR\n\n\n\n\n\n\n\n\n\n\n\nDec 19, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nCritical vaccination threshold\n\n\n\n\n\n\n\nvaccine\n\n\npopulation immunity\n\n\ncritical vaccination threshold\n\n\n\n\n\n\n\n\n\n\n\nDec 14, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nGeneration interval\n\n\n\n\n\n\n\ngeneration interval\n\n\nreproduction number\n\n\n\n\n\n\n\n\n\n\n\nDec 7, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nGeneration interval, growth rate, reproduction number\n\n\n\n\n\n\n\ngeneration interval\n\n\ngrowth rate\n\n\nreproduction number\n\n\n\n\n\n\n\n\n\n\n\nDec 6, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nConvolution\n\n\n\n\n\n\n\nparticle filter\n\n\n\n\n\n\n\n\n\n\n\nDec 5, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nIdiosyncrasies and generalities\n\n\n\n\n\n\n\necology\n\n\nidiosyncransy\n\n\ngenerality\n\n\nCOVID-19\n\n\n\n\n\n\n\n\n\n\n\nDec 4, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nEuler-Lotka equation\n\n\n\n\n\n\n\nEuler-Lotka\n\n\ndemography\n\n\nsurvival\n\n\nexponential\n\n\n\n\n\n\n\n\n\n\n\nDec 3, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nSIR model in Stan: Euler method\n\n\n\n\n\n\n\nR\n\n\nStan\n\n\nEuler method\n\n\nSIR model\n\n\n\n\n\n\n\n\n\n\n\nNov 28, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nEstimating a time-to-event distribution in Stan\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 24, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nEstimating a time-to-event distribution from right-truncated data\n\n\n\n\n\n\n\nright truncation\n\n\nexponential growth\n\n\nPoisson process\n\n\n\n\n\n\n\n\n\n\n\nNov 23, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nEstimating serial interval: doubly interval-censored data\n\n\n\n\n\n\n\nR\n\n\nserial interval\n\n\ninterval censoring\n\n\n\n\n\n\n\n\n\n\n\nNov 17, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nEstimating serial interval for a growing epidemic\n\n\n\n\n\n\n\nR\n\n\nserial interval\n\n\ninterval censoring\n\n\n\n\n\n\n\n\n\n\n\nNov 17, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nEstimating serial interval: interval cenoring\n\n\n\n\n\n\n\nR\n\n\nserial interval\n\n\ninterval censoring\n\n\nMLE\n\n\n\n\n\n\n\n\n\n\n\nNov 15, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nBranching process model 2\n\n\n\n\n\n\n\nR\n\n\nbranching process\n\n\nfinal epidemic size\n\n\n\n\n\n\n\n\n\n\n\nNov 14, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nModeling philosophy\n\n\n\n\n\n\n\nmodeling\n\n\nphilosophy\n\n\n\n\n\n\n\n\n\n\n\nNov 14, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nFinal epidemic size: uniroot vs. optimize\n\n\n\n\n\n\n\nepidemic\n\n\nsize\n\n\nR\n\n\nuniroot\n\n\noptimize\n\n\n\n\n\n\n\n\n\n\n\nNov 10, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n\n\n\n\n\nSEIR model\n\n\n\nSEIR\ndeterministic\nstochastic\nGillespie's algorithm\n\n\n\n\n\n\n\n`Nov 9, 2023`{=html}\nJong-Hoon Kim\n\n\n\n\n  \n\n\n\n\nBranching process model\n\n\n\n\n\n\n\nR\n\n\nbranching process\n\n\nfinal epidemic size\n\n\n\n\n\n\n\n\n\n\n\nNov 8, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nNegative binomial regression with censored data: POLYMOD data\n\n\n\n\n\n\n\nR\n\n\nregression\n\n\ncontact\n\n\ncensor\n\n\n\n\n\n\n\n\n\n\n\nNov 2, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nApartment transactions in Korea via API provided by the Ministry of Land, Infrastructure, and Transport\n\n\n\n\n\n\n\nR\n\n\nAPI\n\n\napartment\n\n\n\n\n\n\n\n\n\n\n\nNov 1, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nConfidence interval using profile likelihood\n\n\n\n\n\n\n\nSEIR\n\n\nprofile likelihood\n\n\nlikelihood ratio\n\n\n\n\n\n\n\n\n\n\n\nOct 19, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nSIR model using SymPy\n\n\n\n\n\n\n\nSIR\n\n\nSymPy\n\n\n\n\n\n\n\n\n\n\n\nOct 16, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nRegression with censored data: AER::tobit and optim\n\n\n\n\n\n\n\nR\n\n\nregression\n\n\ncensor\n\n\ntobit\n\n\n\n\n\n\n\n\n\n\n\nOct 15, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nMulitple regression: POLYMOD data\n\n\n\n\n\n\n\nR\n\n\nregression\n\n\ncontact\n\n\n\n\n\n\n\n\n\n\n\nOct 12, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nRegression using optim\n\n\n\n\n\n\n\nR\n\n\noptim\n\n\nregression\n\n\n\n\n\n\n\n\n\n\n\nOct 11, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nExtract raster based on a polygon\n\n\n\n\n\n\n\nR\n\n\nraster\n\n\nshapefile\n\n\ncrop\n\n\nmask\n\n\nsf\n\n\n\n\n\n\n\n\n\n\n\nSep 23, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nodin package\n\n\n\n\n\n\n\nODE\n\n\nR\n\n\nodin\n\n\n\n\n\n\n\n\n\n\n\nSep 15, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nPubMed search, ChatGPT summary, and sending an email in Python\n\n\n\n\n\n\n\nChatGPT\n\n\nR\n\n\nxml\n\n\nhttr\n\n\n\n\n\n\n\n\n\n\n\nSep 1, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nPubMed search, ChatGPT summary, and sending an email in R\n\n\n\n\n\n\n\nChatGPT\n\n\nR\n\n\nxml\n\n\nhttr\n\n\n\n\n\n\n\n\n\n\n\nSep 1, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nPolygon 면적 구하기: sf 와 raster 패키지\n\n\n\n\n\n\n\nR\n\n\nshapefile\n\n\nggplot2\n\n\nsf\n\n\nraster\n\n\nRColorBrewer\n\n\n\n\n\n\n\n\n\n\n\nAug 30, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nggplot2로 지도 그리기\n\n\n\n\n\n\n\nR\n\n\nmap\n\n\nggplot2\n\n\nsf\n\n\nRColorBrewer\n\n\n\n\n\n\n\n\n\n\n\nAug 30, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nWriting a paper: Start with an outline\n\n\n\n\n\n\n\nwriting\n\n\npaper\n\n\n\n\n\n\n\n\n\n\n\nAug 30, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nImportance sampling\n\n\n\n\n\n\n\nimportance sampling\n\n\n\n\n\n\n\n\n\n\n\nAug 30, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nImportant figures from the book, How to avoid a climate diaster? by Bill Gates\n\n\n\n\n\n\n\nparameter estimation\n\n\nR\n\n\nmaximum likelihood\n\n\nprofile likelihood\n\n\n\n\n\n\n\n\n\n\n\nAug 28, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nRegression toward the mean\n\n\n\n\n\n\n\nparameter estimation\n\n\nR\n\n\nmaximum likelihood\n\n\nprofile likelihood\n\n\n\n\n\n\n\n\n\n\n\nAug 25, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nSurvivor bias\n\n\n\n\n\n\n\nparameter estimation\n\n\nR\n\n\nmaximum likelihood\n\n\nprofile likelihood\n\n\n\n\n\n\n\n\n\n\n\nAug 25, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nEstimating the instantaneous reproduction number using the particle filter\n\n\n\n\n\n\n\nparticle filter\n\n\nCOVID-19\n\n\n\n\n\n\n\n\n\n\n\nAug 19, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nMaximum Likelihood and Profile Likelihood for the SEIR model\n\n\n\n\n\n\n\nparameter estimation\n\n\nR\n\n\nmaximum likelihood\n\n\nprofile likelihood\n\n\n\n\n\n\n\n\n\n\n\nAug 14, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nBasic reproduction number using SymPy\n\n\n\n\n\n\n\nBasic reproduction number\n\n\nSymPy\n\n\n\n\n\n\n\n\n\n\n\nAug 11, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nPopulation Monte Carlo 파퓰레이션 몬테카를로\n\n\n\n\n\n\n\nMonte Carlo\n\n\nR\n\n\nparameter estimation\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nAug 10, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nSimple mathematical models with very complicated dynamics\n\n\n\n\n\n\n\nR\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nAug 8, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nSub-exponential growth\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nAug 7, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nODE-based SIR models in Stan\n\n\n\n\n\n\n\nR\n\n\nStan\n\n\nODE\n\n\nSIR\n\n\n\n\n\n\n\n\n\n\n\nAug 6, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\n감염재생산지수 계산하기\n\n\n\n\n\n\n\nmodeling\n\n\nreproduction number\n\n\n\n\n\n\n\n\n\n\n\nAug 4, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nParticle filter using R\n\n\n\n\n\n\n\nparticle filter\n\n\n\n\n\n\n\n\n\n\n\nJul 19, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nMultinomial distribution\n\n\n\n\n\n\n\nmultinomial\n\n\nRcpp\n\n\npomp\n\n\n\n\n\n\n\n\n\n\n\nJun 19, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nSEIR model using the Nimble pacakge\n\n\n\n\n\n\n\nnimble\n\n\nMCMC\n\n\nposterior predictive check\n\n\ntrace plot\n\n\n\n\n\n\n\n\n\n\n\nJun 19, 2023\n\n\nJong-Hoon Kim\n\n\n\n\n\n\n  \n\n\n\n\nTemplate\n\n\n\n\n\n\n\nparticle filter\n\n\n\n\n\n\n\n\n\n\n\nDec 31, 2020\n\n\nJong-Hoon Kim\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/ode-in-stan/index.html",
    "href": "posts/ode-in-stan/index.html",
    "title": "ODE-based SIR models in Stan",
    "section": "",
    "text": "Stan은 통계 모형 뿐 아니라 ODE 모형을 시물레이션하고 모수를 추정하는 데에도 유용하다. 이 포스팅에서는 일별 감염자 자료가 주어졌을 경우 Stan을 이용하여 SIR 모형의 두 개의 모수 (\\(\\beta, \\gamma\\))를 추정하는 과정을 기술하겠다. 먼저 deSolve 패키지 양식을 따라 SIR 모형을 아래와 같이 구현하고 모형에서 예측되는 일별 감염자 자료 (dayinc) 를 평균으로 하는 거짓 관찰값을 만든다 (yobs).\n\nsir &lt;- function(t, state, parameters) {\n  with(as.list(c(state, parameters)),{\n    # rate of change\n    N &lt;- S + I + R\n    dS &lt;- - beta*S*I/N \n    dI &lt;- + beta*S*I/N - gamma*I\n    dR &lt;- + gamma*I\n    dCI &lt;- + beta*S*I/N \n    \n    # return the rate of change\n    list(c(dS, dI, dR, dCI))\n  }) # end with(as.list ...\n}\n\ny0 &lt;- c(S=999, I=1, R=0, CI=0)\nparms &lt;- c(beta=0.6, gamma=0.4)\ntimes &lt;- seq(0, 40, by = 1)\n\nlibrary(dplyr)\ndeSolve::ode(y=y0, times=times, func=sir, parms=parms) %&gt;% \n  as.data.frame() -&gt; out\n\ndayinc &lt;- diff(out$CI)\nset.seed(42)\nyobs &lt;- rpois(length(dayinc), lambda=dayinc)\n\ndf &lt;- data.frame(time=1:length(dayinc), \n                 model=dayinc,\n                 obs=yobs)\nlibrary(ggplot2)\n# the ggplot theme was adopted from the following website: https://mpopov.com/tutorials/ode-stan-r/\n\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\n\nggplot(df)+ \n  geom_line(aes(time, model, color=\"Model\"), linetype=\"dashed\")+\n  geom_point(aes(time, model, color=\"Model\"))+\n  geom_line(aes(time, obs, color=\"Observation\"), linetype=\"dashed\")+\n  geom_point(aes(time, obs, color=\"Observation\"))+\n  labs(x=\"Time (day)\", y=\"Daily incidence\", title=\"Incidence from the SIR model\")+\n  scale_color_manual(\"\", values=c(\"Model\"=\"black\",\"Observation\"=\"firebrick\"))+\n  theme(legend.position=\"bottom\")\n\n\n\n\n아래와 같이 Stan 모형을 만든다. Posterior predictive check 을 하기 위해 generated quantities 블록에 ypred 변수를 넣었다.\n\nstan_code &lt;- \"functions {\n  vector sir(real t,        // time\n             vector y,      // state\n             vector theta  // parameters\n             ) {      \n    vector[4] dydt;\n        \n    real S = y[1];\n    real I = y[2];\n    real R = y[3];\n    real N = S + I + R;\n    \n    real beta = theta[1];\n    real gamma = theta[2];\n    \n    dydt[1] = - beta * S * I / N;\n    dydt[2] = beta * S * I / N - gamma * I;\n    dydt[3] = gamma * I;\n    dydt[4] = beta * S * I / N;\n    \n    return dydt;\n  }\n}\n\ndata {\n  int&lt;lower=1&gt; T;\n  real t0;\n  array[T] real ts; \n  vector[4] y0;\n  int y_obs[T];\n}\n\nparameters {\n  vector&lt;lower=0&gt;[2] theta; // [beta, gamma]\n}\n\nmodel {\n  array[T] vector[4] mu = ode_rk45(sir, y0, t0, ts, theta);\n  real dayinc[T]; // daily incidence\n  dayinc[1] = mu[1, 4] + 1e-12;\n  for (t in 2:T){\n    dayinc[t] = mu[t, 4] - mu[t-1, 4] + 1e-12; \n  }\n  theta ~ exponential(1); // both parameters are on the positive real line\n  y_obs ~ poisson(dayinc); // likelihood\n}\n\ngenerated quantities {\n  array[T] vector[4] mu = ode_rk45(sir, y0, t0, ts, theta);\n  real dayinc[T];\n  dayinc[1] = mu[1, 4] + 1e-12;\n  for (t in 2:T){\n    dayinc[t] = mu[t,4] - mu[t-1,4] + 1e-12;\n  }\n  int ypred[T]; // posterior predictive \n  for (t in 1:T) {\n    ypred[t] = poisson_rng(dayinc[t]);\n  }\n}\n\"\n\n아래와 같이 Stan 모형을 이용해서 샘플링을 한다.\n\nlibrary(rstan)\noptions(mc.cores = parallel::detectCores())\nrstan_options(auto_write = TRUE)\n\n# this is for the stan model in a separate file\n# mod &lt;- stan_model(file=paste0(getwd(),\"/stan/sir_stan.stan\"),\n#                   verbose=TRUE)\nmod &lt;- stan_model(model_code=stan_code, verbose=TRUE)\nT &lt;- 40 # end time unit for the ODE model, also the number of data points\ndata &lt;- list(T=T, t0=0.0, ts=1:T, y0=c(999,1,0,0), y_obs=yobs)\nsmp &lt;- sampling(object=mod, data=data, seed=42, chains=4, iter=2000)\n# saveRDS(smp, \"outputs/stan_smp_20230801.rds\")\n\n모수의 posterior 분포를 살펴보자.\n\n# smp &lt;- readRDS(\"outputs/stan_smp_20230801.rds\")\nsmp &lt;- readRDS(\"stan_smp_20230801.rds\") # file is under the content/post/the_relevant_post_name/index_files/figure_html\ndf &lt;- as.data.frame(smp)\npr &lt;- c(0.5,0.025,0.975)\nd &lt;- as.data.frame(t(apply(df[,grepl(\"^theta.*\", names(df))],\n                           2, quantile, probs=pr)))\nd$name &lt;- c(\"beta\", \"gamma\")\nd$true &lt;- c(0.6, 0.4)\nggplot(d)+ \n  geom_errorbar(aes(x=name, ymin=`2.5%`, ymax=`97.5%`), width=0.0)+\n  geom_point(aes(x=name, y=`50%`, color=\"Estimates\"), size=2)+\n  geom_point(aes(x=name, y=true, col=\"True value\"), size=3)+\n  scale_color_manual(values=c(\"Estimates\"=\"black\",\"True value\"=\"firebrick\"))+\n  labs(x=\"\", y=\"\", title=\"Median estimates with 95% CrI\")+\n  theme(legend.position=\"bottom\", legend.title=element_blank())+\n  scale_x_discrete(breaks=c(\"beta\",\"gamma\"),\n                   labels=c(expression(beta),expression(gamma)))+\n  coord_flip()\n\n\n\n\n마지막으로 posterior predictive check을 통해서 모수 추정을 위해 사용했던 자료와 비교해 보자.\n\n# pr &lt;- c(0.5,0.025,0.975)\nd &lt;- as.data.frame(t(df[,grepl(\"^ypred.*\", names(df))]))\nd$time &lt;- 1:40\ndlong &lt;- tidyr::pivot_longer(d, cols=-time)\ndayincdf &lt;- data.frame(inc=dayinc, time=1:40)\nyobsdf &lt;- data.frame(obs=yobs, time=1:40)\n\nggplot(dlong)+ \n  geom_line(aes(time, value, group=name, color=\"Posterior predictive\"))+\n  geom_line(data=dayincdf, aes(time, inc, color=\"Model\"))+\n  geom_point(data=yobsdf, aes(time, obs, color=\"Observation\"))+\n  geom_line(data=yobsdf, aes(time, obs, color=\"Observation\"), linetype=\"dashed\")+\n  labs(x=\"Time (day)\", y=\"Daily incidence\", title=\"Posterior predictive check\")+\n  scale_color_manual(\"\", values=c(\"Model\"=\"black\",\"Posterior predictive\"=\"grey\",\"Observation\"=\"firebrick\"))+\n  theme(legend.position=\"bottom\")"
  },
  {
    "objectID": "posts/R0-sympy/index.html",
    "href": "posts/R0-sympy/index.html",
    "title": "Population Monte Carlo 파퓰레이션 몬테카를로",
    "section": "",
    "text": "감염병의 전파를 이해하는 데 있어 가장 기본적인 개념이 재감염지수, 특히 기초재감염지수 (\\(\\mathcal{R}_0\\)) 이다. 재감염지수는 한 명의 감염자로부터 생산되는 평균 후속 감염자의 수를 일컫는데 기초재감염지수는 코로나19의 경우 처럼 인구 집단에 면역력을 가진 사람이 없어 모든 사람이 감염될 수 있는 상태하 에서의 재감염지수를 말한다. 기초 재감염 지수는 다음과 같은 수식으로 표현할 수 있다.\n\\[ \\mathcal{R}_0 = \\beta c D \\]\n\\(\\beta\\) 는 한 명의 감염자가 타인을 접촉할 때 상대방을 감염시킬 수 있는 확률, \\(c\\) 는 단위 시간 당 접촉이 일어나는 횟수, \\(D\\) 는 감염 상태가 지속되는 시간을 나타낸다. \\(\\beta\\) 만으로 \\(\\beta c\\) 를 대신해 사용하는 경우도 흔하다. 그 경우 \\(\\beta\\) 는 단위 시간 당 후속 감염자의 수로 표현할 수 있을 것 같다. 미분방정식에 기반한 감염병 모형의 경우는 \\(\\mathcal{R}_0\\)를 어떻게 계산할까? 아래와 같이 SIR 모형을 정의해 보자.\n\\[\\begin{align}\n\\mathrm{d}S/\\mathrm{d}t &= -\\beta I S/N \\\\\n\\mathrm{d}I/\\mathrm{d}t &= \\beta I S/N - \\gamma I\\\\\n\\mathrm{d}R/\\mathrm{d}t &= \\gamma I\n\\end{align}\\]\n위의 정의에서 사용되었던 개념을 적용한다면 \\(\\mathcal{R}_0 = \\beta/\\gamma\\) 라고 할 수 있다. 이는 \\(\\mathcal{R}_0\\)가 감염병이 집단 내에서 유행을 일으킬 수 있는 역치조건임을 이용해도 동일한 결론에 이를 수 있다. (i.e., \\(\\mathrm{d}I/\\mathrm{d}t&gt;0\\))\n위와는 달리 Diekmann et al. 에 의해서 도입된 next generation 방법으로 좀 더 다양한 상황 하에서 \\(\\mathcal{R}_0\\)를 구할 수 있다. 이 방법에서는 \\(\\mathcal{R}_0\\)가 next generation operator의 spectral radius 가 된다. 위 논문 보다는 van den Driessche et al. 가 좀 더 이해하기 쉬운 것 같아 이 방법을 기준으로 살펴보겠다. 그리고 그 계산을 python의 SymPy 라이브러리를 이용해서 구현을 해보겠다. 먼저 간단한 우선 ( SEIR ) 모형의 경우부터 살펴보자.\nNext generation operator \\(G\\) 은 전파를 통해서 생산되는 새로운 감염이 발생하는 속도를 나타내는 행렬 \\(F\\)와 감염이 다른 상태로 변화되는 속도 (V)로 구성되며 다음과 같은 관계를 갖는다. \\(G=FV^{-1}\\). 그리고 \\(R_0\\)는 \\(G\\)의 spectral radius가 된다. 아래 파이썬 구현에서는 \\(\\beta, \\gamma\\) 를 b, g로 나타내었다.\n\nfrom sympy import *\nb, k, g, = symbols('p k g')\nF = Matrix([[0, b],[0, 0]])\nV = Matrix([[k, 0], [-k, g]])\nM = F*(V**-1)\neigval = M.eigenvals(simplify=true)\ninit_printing(use_unicode=True)\neigval\n\n⎧      p   ⎫\n⎨0: 1, ─: 1⎬\n⎩      g   ⎭\n\n#⎧      b   ⎫\n#⎨0: 1, ─: 1⎬\n#⎩      g   ⎭\nlst = list(eigval.keys())\nlst[1]\n\np\n─\ng\n\n#b\n#─\n#g\n\n위에서 언급한 SEIR 모형의 경우는 너무 간단하니 그 보다 조금 더 복잡한 그 예로 다음 연구를 살펴보자. Pitzer et al.의 연구인데 사용된 감염병 모형은 사람 간 직접 전파와 물을 통한 간접 전파 두 가지의 전파 메케니즘을 구현 하였고 (\\(\\lambda_p\\) 와 \\(\\lambda_w\\)) 최초 감염 \\(S_1 \\rightarrow I_1\\) 과 중복 감염\\(R \\rightarrow S_2 \\rightarrow I_2\\) 을 다르게 취급하였다. 부록 (supplementary material)을 보면 사용된 미분식을 볼 수 있다.\n\\[\\begin{align}\n\\mathrm{d}S_1/\\mathrm{d}t &= B + \\epsilon S_2 - (\\lambda_p+\\lambda_w-\\mu)S_1\\\\\n\\mathrm{d}I_1/\\mathrm{d}t &= (\\lambda_p+\\lambda_w)S_1 - (\\delta+\\mu) I_1 \\\\\n\\mathrm{d}R/\\mathrm{d}t &= \\delta(1-\\theta-\\alpha)(I_1+I_2) - (\\omega +\\mu)R \\\\\n\\mathrm{d}C/\\mathrm{d}t &= \\delta\\theta(I_1+I_2) - \\mu C \\\\\n\\mathrm{d}S_2/\\mathrm{d}t &= \\omega R -\\epsilon S_2 - (\\lambda_p+\\lambda_w-\\mu) S_2\\\\\n\\mathrm{d}I_2/\\mathrm{d}t &= (\\lambda_p+\\lambda_w) S_2 - (\\delta+\\mu) I_2 \\\\\n\\mathrm{d}W/\\mathrm{d}t &= \\gamma(I_1+rI_2+rC) - \\xi W\n\\end{align}\\]\n또한 아래와 같이 기초재감염지수도 계산 결과를 보여준다. SymPy를 통해 동일한 결과를 얻을 수 있는지 확인해보자.\n\\[\\begin{align}\nR_0 = \\frac{1}{\\mu+\\delta} \\left(\\beta_p +\\frac{\\gamma \\beta_w}{\\xi}\\right) \\left(1 +\\frac{\\delta\\theta r}{\\mu}\\right)\n\\end{align}\\]\n\np, r, w, N, d, m, t, m, g, x = symbols('p r w N d m t m g x')\nF = Matrix([[p, r*p, r*p, w*N], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])\nV = Matrix([[d+m, 0, 0, 0], [0, d+m, 0, 0], [-d*t, -d*t, m, 0], [-g, -r*g, -r*g, x]])\nM = F*(V**-1)\neigval = M.eigenvals(simplify=true)\ninit_printing(use_unicode=True)\neigval \n\n⎧      (N⋅g⋅w + p⋅x)⋅(d⋅r⋅t + m)   ⎫\n⎨0: 3, ─────────────────────────: 1⎬\n⎩             m⋅x⋅(d + m)          ⎭\n\nlst = list(eigval.keys())\nR0_eig = lst[1]\nR0 = (1/(d+m))*(p+N*g*w/x)*(1+(d*t*r)/m) # R0 from the Pitzer (2014)\nsimplify(R0-R0_eig) # 0 for the same expression (symbolic assessment)\n\n0\n\n#0\nR0.equals(R0_eig) # True for the same expression (numerical assessment)\n\nTrue\n\n#True\n\n부록에 보면 기초 재감염지수에 이르는 상세한 과정이 나와있는데 \\(V_{3,3}\\) 에 오류가 있음을 알아냈다. \\(\\delta +\\mu\\) 가 \\(\\mu\\) 로 바뀌어야 한다. 이유는 위 미분식에서 \\(C\\) 식을 보면 알 수 있는데 이는 만성 감염자를 나타내고 따라서 회복을 의미하는 \\(\\delta\\) 가 없어야 한다. 이는 기록하는 과정에서의 오류인 듯 하고 결과로 얻어진 \\(R_0\\) 는 우리가 계산한 결과와 동일하다. 다만, 계산 결과를 식 (18) 에서와 같이 의미있는 구획으로 나누어서 표현하려면 SymPy 결과를 직접 수정하여야 한다."
  },
  {
    "objectID": "posts/simple-model-complicated-dynamics/index.html",
    "href": "posts/simple-model-complicated-dynamics/index.html",
    "title": "Simple mathematical models with very complicated dynamics",
    "section": "",
    "text": "Simple mathematical models with very complicated dynamics\nRobert M. May Nature Vol. 261 June 10, 1976\nThis article discusses a simple first order difference equations that can display very complicated dynamics.\n\\[X_{t+1} = F(X_t)\\]\nIn biological population, the nonlinear function \\(F(x)\\) often has the following properties. \\(F(0)=0\\); \\(F(x)\\) increases monotonically as \\(X\\) increases through the range of \\(0&lt;X&lt;A\\) (with \\(F(x)\\) attaining its maximum value at \\(X=A\\)); \\(F(X)\\) decreases monotonically as \\(X\\) increases beyond \\(X=A\\) \\(N_{t+1} = N_t(a-bN_t)\\)\n\\(X_{t+1} = a X_t (1-X_t)\\)\nX must remain on the interval \\(0&lt;X&lt;1\\); if \\(X\\) ever exceeds unity, subsequent iterations diverge towards \\(-\\infty\\). Furthermore, \\(F(X)\\) attains a maximum value of \\(a/4\\) at \\(X=1/2\\); the equation therefore possesses non-trivial dynamical behaviour only if \\(a&lt;4\\). On the other hand, all trajectories are attracted to \\(X=0\\) if \\(a&lt;1\\).\n\n# function to compute the value at the next time step\n# 0 &lt; x &lt; 1\n# a &lt; 1 for x to go to zero\n# a &gt; 4 leads to x &gt; 1 at one point, which then leads to - infinity\n# 1 &lt; a &lt; 4 for x to exhibit non-trivial dynamics\nx_next &lt;- function(a, x){\n  a*x*(1-x)\n}\n\nx0 = seq(0.01, 0.99, 0.01)\na = c(2.707, 3.414) # values were adopted from the paper by May Nature Vol. 261 June 10, 1976\nxnext = sapply(x0, function(x) x_next(a, x))\n\nplot(x0, xnext[1,], type='l', ylim=c(0,1), xlim=c(0,1),\n     xlab=expression(X[t]), ylab=expression(X[t+1]))\nlines(x0, xnext[2,])\nlines(0:1, 0:1) # line y = x\n\nxstar = 1 - 1/a # points where X(t+1) = X(t)\npoints(xstar[1], xstar[1])\npoints(xstar[2], xstar[2], col=2)\n# slope at the point x given a\ndx &lt;- function(a,x){\n  -2*a*x+a\n}\n\n# function to compute intercept at the given slope b and point x\nintcpt = function(b,x){\n  x - b*x\n}\n\nabline(a=intcpt(b=dx(a=a,x=xstar[1]),x=xstar[1]), b=dx(a=a,x=xstar[1]), lty=2)\nabline(a=intcpt(b=dx(a=a,x=xstar[2]),x=xstar[2]), b=dx(a=a,x=xstar[2]), lty=2, col=2)\n\n\n\n\n\nx_iter &lt;- function(a, x, iter, func){\n  xvec = rep(NA, iter)\n  xvec[1] = x\n  for(i in 2:iter){\n    xvec[i] = func(a, xvec[i-1])  \n  }\n  return(xvec)\n}\nplot(x_iter(2.9, 0.8, 100, x_next), type=\"l\")\n\n\n\n\n\\(X_{t+1} = X_t \\textrm{exp}[r(1-X_t)]\\)\n\nx_next_exp &lt;- function(r, x){\n  x*exp(r*(1-x))\n}\n\nplot(x_iter(2, 0.8, 100, x_next_exp), type=\"l\")\n\n\n\n\n\nx_next2 &lt;- function(r, x){\n x1 &lt;- a*x*(1-x)\n x2 &lt;- a*x1*(1-x1)\n return(x2)\n}\n\nxnext = sapply(x0, function(x) x_next2(a, x))\n\nplot(x0, xnext[1,], type='l', ylim=c(0,1), xlim=c(0,1),\n     xlab=expression(X[t]), ylab=expression(X[t+2]))\nlines(x0, xnext[2,])\nlines(0:1, 0:1) # line y = x"
  },
  {
    "objectID": "posts/regression-toward-mean/index.html",
    "href": "posts/regression-toward-mean/index.html",
    "title": "Regression toward the mean",
    "section": "",
    "text": "In his lecture Joseph Blitzstein talks about two basic statistical phenomena: Regression toward to the mean (RTTM) and survivor bias. The RTTM is today’s topic. Topic was mainly written by GPT 4.\nRegression toward the mean is a statistical phenomenon where extreme data points are likely to be followed by less extreme ones when measured again. In simpler terms, it means that if an extreme observation is observed, the next observation is likely to be closer to the mean or average.\n\nWhy does it happen?\nIt’s primarily a matter of probability. Extreme values are, by definition, rare. So, when you take a second measurement, it’s simply more probable that the new value will be closer to the mean than the previous extreme value was.\n\n\nExamples:\nSports Performance: Imagine a basketball player who has an outstanding game, scoring well above their average number of points. If they’ve played at such an exceptional level, it’s likely that in the next game they will score closer to their average (not necessarily because their skill has decreased, but simply due to the natural variability in performance).\nStudent Test Scores: If a student who typically scores around the average on exams gets an exceptionally high score on one test, they might score closer to their average on a subsequent test. Conversely, if they score exceptionally low on one test, they might score higher the next time.\nInvestment Returns: If a particular stock has an exceptionally good year with returns way above the market average, it might have more modest (or even below-average) returns the following year.\nHeight of Parents and their Children: This is a classic example by Sir Francis Galton. He found that very tall parents tend to have children who are shorter than them (but still above average), and very short parents tend to have children who are taller than them (but still below average). The children’s heights tend to “regress” towards the mean height.\nMedical Treatments: If patients are selected for a clinical trial because they have exceptionally high blood pressure, some of them will probably show a reduction in blood pressure over time even without any treatment. This isn’t because of any therapeutic effect, but simply because their initial measurements were unusually high and subsequent measurements tend to be closer to the mean.\n\n\nMisunderstandings:\nThis concept is often misunderstood. For instance, if a student performs poorly on a test and then improves on the next one, it might be tempting to attribute this improvement to a particular intervention (like tutoring). While the intervention might have had an effect, it’s also possible that some of the improvement was due to regression toward the mean.\nIn research and experimental designs, this phenomenon needs to be taken into account, especially when making causal inferences from observed changes.\nToward the end of his talk, he mentions about the quote by Daniel Kahneman that very clearly explain the concept of RTTM.\nI had the most satisfying Eureka experience of my career while attempting to teach flight instructors that praise is more effective than punishment for promoting skill-learning. …. [A flight instructor objected:] “On many occasions I have praised flight cadets for clean execution of some aerobatic maneuver, and in general when they try it again, they do worse. On the other hand, I have often screamed at cadets for bad execution, and in general they do better the next time. So please don’t tell us that reinforcement works and punishment does not, because the opposite is the case.” …\nThis was a joyous moment, in which I understood an important truth about the world: because we tend to reward others when they do well and punish them when they do badly, and because there is regression to the mean, it is part of the human condition that we are statistically punished for rewarding others and rewarded for punishing them.\nFull details of Kahneman’s quote can be found from the following article"
  },
  {
    "objectID": "posts/max-likelihood/index.html",
    "href": "posts/max-likelihood/index.html",
    "title": "Maximum Likelihood and Profile Likelihood for the SEIR model",
    "section": "",
    "text": "통계학은 많은 부분 확률모형의 모수를 추정하는 (inferential statistics) 과정이고 모수 추정방법으로 가장 많이 사용되는 방법이 maximum likelihood (ML)이다. 이번 포스트는 2014년 출간된 Cole et al.의 Maximum Likelihood, Profile Likelihood, and Penalized Likelihood: A Primer을 차용하여 maximum likelihood (ML) 와 profile likelihood에 대하여 기술하여 보고자 한다.\n\n최대 가능도 (ML)\n잠복기를 추정하기 위해 증상 발현일과 기존 감염자와의 접촉일을 묻는 설문조사를 했다고 하자. \\(n\\) 명을 인터뷰하고 \\(n\\) 개의 관찰값 \\(y_1, y_2, ..., y_n\\) 을 얻었다고 하자. 잠복기의 분포에 대한 확률모형 \\(f (y|\\boldsymbol{\\theta})\\) 은 주어진 모수\\(\\boldsymbol{\\theta}=(\\theta_1, \\theta_2, ..., \\theta_j)\\) 하에서 \\(Y=y\\)가 될 확률을 나타낸다.\n최대 가능도 방법은 미지의 모수 하에서 관찰값의 확률의 나타낸다. 확률 모형 \\(f(y|\\boldsymbol{\\theta})\\)이 주어진 모수 \\(\\boldsymbol{\\theta}\\) 하에서 \\(Y\\)의 확률을 나타내는 반면 최대 가능도 방법은 \\(Y\\)를 관찰값에 고정한 채 \\(\\boldsymbol{\\theta}\\)의 함수로 표현하게 된다. 따라서 확률모형과는 다르게 다음과 같은 식 \\(\\mathcal{L}(\\boldsymbol{\\theta};y_i)\\) 을 사용한다. 즉, 우리가 관심있어 하는 것은 확률모형 \\(f (y|\\boldsymbol{\\theta})\\)이 \\(Y\\) 가 아니고 \\(\\boldsymbol{\\theta}\\) 에 따라 어떻게 변하는가 하는 것이다. \\(\\mathcal{L}(\\boldsymbol{\\theta};y_i)\\) 를 \\(i\\) 번째 관찰값이 가능도에 영향을 미치는 정도라 하고 관찰값이 상호독립적이라고 가정하면 관찰값 전체의 가능도는 아래와 같이 표현할 수 있다.\n\\[\\mathcal{L}(\\boldsymbol{\\theta};\\boldsymbol{y}) = \\prod_{i=1}^{n} \\mathcal{L}(\\boldsymbol{\\theta};y_i) = \\prod_{i=1}^{n} f(y_i;\\boldsymbol{\\theta})\\]\n위 식에서 \\(\\boldsymbol{y}=(y_1, y_2, ..., y_n)\\)을 나타낸다.\n\\(\\mathcal{L}(\\boldsymbol{\\theta};\\boldsymbol{y})\\) 는 \\(\\boldsymbol{\\theta}\\)에 대한 확률을 알 수는 없기 때문에 확률모형이 아닌 가능도 (혹은 우도) 함수라고 한다. ML은 가능도 함수를 최대로 만들어 주는 \\(\\boldsymbol{\\theta}\\)로 모수에 대한 추정치를 정의한다.\n\\[\\hat{\\theta} = \\textrm{argmax}_{\\theta}\\{{\\mathrm{log} \\mathcal{L}(\\theta)}\\}\\]\n위 식에서 \\(\\mathrm{log}\\)를 사용한 이유는 가능도 값이 매우 작은 수가되는 경우가 많고 따라서 컴퓨터를 이용한 계산상의 안정성을 위해서 (i.e., arithmetic underflow 가 일어나지 않게 하기 위해) 실제로는 \\(\\mathrm{log} \\mathcal{L}(\\theta)\\)를 사용하기 때문이다. 추가적으로 많은 최적화 알고리듬의 경우 최소화가 기본값으로 설정되어 있어 최대 가능도법을 구현할 때는 \\(-\\mathrm{log} \\mathcal{L}(\\theta)\\)를 사용하는 경우가 많다.\n최대 가능도법을 이용하여 푸아송 분포의 모수를 추정하는 과정을 살펴보자.\n\n\n푸아송 분포 모수 추정\n위에서 언급했던 잠복기의 예를 살펴보자. 잠복기는 Weibull, Gamma, 혹은 Lognormal 등 두 개의 모수를 가지는 확률모형이 많이 사용되는 데 아래 예에서는 계산상의 편의를 위해서 하나의 모수를 가지는 푸아송 분포를 사용하였다.\n\nset.seed(1220)\nn &lt;- 50 # number of observations\nlamb &lt;- 23 # true parameter value\ny &lt;- rpois(n, lambda=lamb) # observations\nnll_theta &lt;- function(theta){\n  - sum(dpois(y, lambda=theta, log=T)) # negative log likelihood\n}\nres = optimize(f=nll_theta, interval=c(0,1e6))\nres$minimum #\\hat{\\theta} compare w/ lamb\n\n[1] 24.2\n\nexp(- res$minimum) # likelihood\n\n[1] 3.090828e-11\n\n\n다음 번 포스팅에는 ML로 추정된 모수의 신뢰구간을 구하는 방법을 샆펴보자."
  },
  {
    "objectID": "posts/survivor-bias/index.html",
    "href": "posts/survivor-bias/index.html",
    "title": "Survivor bias",
    "section": "",
    "text": "In his lecture titled “The Soul of statistics” Joseph Blitzstein talks about a survivor bias (or conditioning more broadly) Dr. Derek Muller also talks about various examples of Korean houses in Bukchon Hanok Village on his YouTube\nSurvivor bias is today’s topic and the following was written mostly by GPT 4.\nSurvivor Bias: What Remains Tells Only Half the Story\nImagine walking through a forest and noticing the tallest trees. You marvel at their height and strength, thinking that this is the natural order of things. But what about the saplings and smaller trees that didn’t survive? This is the essence of survivor bias.\nWhat is Survivor Bias?\nSurvivor bias, or survivorship bias, is a logical error of focusing on the people or things that made it past some selection process and overlooking those that did not, typically because of their lack of visibility. This can lead to false conclusions in numerous different ways.\nA Classic Example: WWII Airplanes\nDuring World War II, military officials examined planes returning from combat missions to determine where they were most frequently hit by enemy fire. The plan was simple: reinforce these areas to improve the aircraft’s survival rate. The bullet holes were predominantly in the wings, body, and tail. So, it might seem logical to reinforce these parts.\nHowever, a statistician named Abraham Wald pointed out a flaw in this reasoning. The planes they were inspecting had survived. The real question was: where were the bullet holes on the planes that didn’t return? Wald hypothesized that the missing airplanes had been hit in the engine, a critical area absent of damage in the returning planes. By only looking at the survivors, the military had almost made a grave error.\nWhy Does It Matter?\nSurvivor bias can skew our understanding and lead to incorrect conclusions in various fields:\n\nBusiness: When studying successful companies, we might conclude that their practices are best. But what about companies that followed the same practices and failed?\nMedicine: If we only focus on patients who return for follow-up after treatment, we might miss side effects or outcomes in those who didn’t return.\nCulture: Celebrating only the top artists or authors might make us think that a particular style or theme is the key to success, overlooking other potential talents.\n\nOvercoming Survivor Bias\nAwareness is the first step. Whenever you’re examining successes, ask yourself: “What am I not seeing?” Seek out the failures, the unseen, the unreturned. By considering the whole picture, not just the apparent survivors, you get a clearer, more accurate view of reality.\nIn conclusion, while it’s natural to focus on winners and success stories, it’s crucial to remember the unseen and unspoken failures. They often hold the most valuable lessons."
  },
  {
    "objectID": "posts/climate-disaster/index.html",
    "href": "posts/climate-disaster/index.html",
    "title": "Important figures from the book, How to avoid a climate diaster? by Bill Gates",
    "section": "",
    "text": "How to Avoid a Climate Disaster: The Solutions We Have and the Breakthroughs We Need by Bill Gates is a comprehensive and accessible guide on how to tackle the urgent issue of climate change. Gates begins by laying out the scope of the problem, explaining that the world needs to reduce its greenhouse gas emissions to zero to avoid a catastrophe. I’ve compiled important numbers from the book to understand the climate change issues.\n\n51 Billion Tonnes: This is the amount of greenhouse gases, measured in CO2 equivalent (\\(\\mathrm{CO_{2}e}\\)), that humanity adds to the atmosphere every year.\nZero: According to Bill Gates, we need to bring this number down to zero to avoid a climate disaster. And he thinks it is possible through our technological advances. Watch his TED talk, Innovating to zero!. He is a great speaker!\n\n\n\n\nPercentage\nItem\n\n\n\n\n27%\nHow we generate electricity\n\n\n31%\nHow we make things\n\n\n18%\nHow we grow our food\n\n\n16%\nHow we move around\n\n\n6%\nHow we keep warm or cool"
  },
  {
    "objectID": "posts/pubmed-chatgpt_summary/index.html",
    "href": "posts/pubmed-chatgpt_summary/index.html",
    "title": "PubMed search, ChatGPT summary, and sending an email in R",
    "section": "",
    "text": "최신 연구 동향을 잘 알기 위해서 ChatGPT의 요약기능을 사용해보자. PubMed에서 검색을 하고 ChatGPT를 이용하여 초록을 한 두 문장으로 요약하여 그 결과를 이메일로 보내주는 것이다. 이 모든 것을 R에서 쉽게 할 수 있다.\nchatgpt_api_token &lt;- readRDS(\"G:/My Drive/Personal/chatGPT_api_key.rds\")\nlibrary(rentrez)\n\nquery &lt;- \"typhoid\" # the search query\nsearch_results &lt;- entrez_search(db=\"pubmed\", term=query, datetype=\"pdat\", reldate=10) # any other useful parameters?\n# Get the IDs of the articles\nids &lt;- search_results$ids\n# Retrieve the details of the data in xml format\narticle_details &lt;- entrez_fetch(db=\"pubmed\", id=ids, rettype=\"xml\")\nlibrary(xml2)\n# Parse the XML data\ndoc &lt;- read_xml(article_details)\n# Extract the titles and abstracts\ntitles &lt;- xml_text(xml_find_all(doc, \"//ArticleTitle\"))\n# abstracts &lt;- xml_text(xml_find_all(doc, \"//AbstractText\"))\nabstracts &lt;- xml_text(xml_find_all(doc, \"//Abstract\"))\ndois &lt;- xml_text(xml_find_all(doc, \".//PubmedData/ArticleIdList/ArticleId[@IdType='doi']\")) # to get the doi's\nget_completion &lt;- function(prompt, model=\"gpt-3.5-turbo\", temperature=0){\n  response &lt;- httr::POST(\n    url = \"https://api.openai.com/v1/chat/completions\", \n    add_headers(Authorization = paste(\"Bearer\", chatgpt_api_token)),\n    content_type_json(),\n    encode = \"json\",\n    body = list(\n      model = model,\n      temperature = temperature, # this is the degree of randomness of the model's output\n      messages = list(list(\n        role = \"user\", \n        content = prompt\n     ))\n   )\n  )\n  return(content(response)$choices[[1]]$message$content)\n}\n\n\n\nabstract_summary &lt;- rep(NA,length(abstracts))\n# You may want to try various prompts to suit your needs\nfor (i in 1:length(abstracts)) {\n  prompt = paste0(\"Your task is to generate a short summary of a scientific article based on its title and abstract. Summarize the text delimited by triple backticks into one sentence. ``` Title: \", titles[i], \". Abstract: \", abstracts[i], \"```\")\n  abstract_summary[i] &lt;- get_completion(prompt=prompt)\n}\nlibrary(blastula)\n\ncreate_summary &lt;- function(titles, abstract_summary, ids, dois){\n  summary &lt;- sapply(1:length(abstract_summary), function(i) paste0(\"&lt;p&gt;\", \" &lt;b&gt; \", titles[i], \" &lt;/b&gt; \", abstract_summary[i], \" PMID=\", ids[i] , \" DOI=\", dois[i], \"&lt;/p&gt;\"))\n  return(summary)\n}\n\nemail &lt;- compose_email(\n  title = \"Test Email\",\n  body = md(create_summary(titles, abstract_summary, ids, dois)))\n\nemail %&gt;%\n  smtp_send( \n    from = \"kimfinale@gmail.com\",\n    to = \"jonghoon.kim@ivi.int\",\n    subject = \"Daily summary of PubMed search\",\n    # credentials = creds_key(id = \"gmail\"),\n    credentials = creds_file(\"gmail_cred\")\n  )\n\n# email %&gt;%\n#   smtp_send(\n#     from = \"jonghoon.kim@ivi.int\",\n#     to = \"jonghoon.kim@ivi.int\",\n#     subject = \"Testing the `smtp_send()` function\",\n#     credentials = creds_key(id = \"outlook\")\n#   )"
  },
  {
    "objectID": "posts/pubmed-chatgpt_summary/index.html#make-it-into-a-single-function",
    "href": "posts/pubmed-chatgpt_summary/index.html#make-it-into-a-single-function",
    "title": "PubMed search, ChatGPT summary, and sending an email in R",
    "section": "Make it into a single function",
    "text": "Make it into a single function\nMake the above functions into a single function and register it for Windows task scheduler such that it can happen every day.\n\npubmed_search_chatgpt_summary &lt;- \n  function(query=\"typhoid\", reldate=10, num_sentence=1,                                          model=\"gpt-3.5-turbo\", temperature=0){\n  library(rentrez)\n  library(httr)\n  library(xml2)\n  library(blastula)\n  # chatgpt_api_token &lt;- readRDS(\"chatGPT_api_key.rds\")\n  chatgpt_api_token &lt;- readRDS(\"G:/My Drive/Personal/chatGPT_api_key.rds\")\n\n  get_completion &lt;- function(prompt, model=\"gpt-3.5-turbo\",\n                             temperature=0, api_token=chatgpt_api_token){\n  response &lt;- POST(\n    url = \"https://api.openai.com/v1/chat/completions\", \n    add_headers(Authorization = paste(\"Bearer\", api_token)),\n    content_type_json(),\n    encode = \"json\",\n    body = list(\n      model = model,\n      temperature = temperature,\n      messages = list(list(\n        role = \"user\", \n        content = prompt))\n    )\n  )\n  return(content(response)$choices[[1]]$message$content)\n}\n  \n  res &lt;- entrez_search(db=\"pubmed\", term=query, datetype=\"pdat\", reldate=reldate)\n  \n  if (length(res$ids) &gt; 0){ # one or more hits\n    ids &lt;- res$ids\n    details &lt;- entrez_fetch(db=\"pubmed\", id=ids, rettype=\"xml\")\n    doc &lt;- read_xml(details)\n    titles &lt;- xml_text(xml_find_all(doc, \"//ArticleTitle\"))\n    abstracts &lt;- xml_text(xml_find_all(doc, \"//Abstract\"))\n    dois &lt;- xml_text(xml_find_all(doc, \"//PubmedData/ArticleIdList/ArticleId[@IdType='doi']\"))\n    \n    abstract_summary &lt;- rep(NA, length(abstracts))\n\n    for (i in 1:length(abstracts)) {\n      prompt &lt;- paste0(\"Your task is to generate a short summary of a scientific article based on its title and abstract. Summarize the text delimited by triple backticks into \", num_sentence , \" sentence. ``` Title: \", titles[i], \". Abstract: \", abstracts[i], \"```\")\n      abstract_summary[i] &lt;- get_completion(prompt=prompt, model=model, temperature=temperature)\n    }\n  summary &lt;- sapply(1:length(abstract_summary), function(i) paste0(\"&lt;p&gt;\", \" &lt;b&gt; \", titles[i], \" &lt;/b&gt; \", abstract_summary[i], \" PMID=\", ids[i] , \" DOI=\", dois[i], \"&lt;/p&gt;\"))\n\n  email &lt;- compose_email(\n    title = \"Weekly summary of PubMed search\",\n    body =  md(summary))\n  \n  smtp_send(\n    email = email,\n    to = \"jonghoon.kim@ivi.int\",\n    from = \"kimfinale@gmail.com\",\n    subject = \"Daily summary of PubMed search\",\n    # credentials = creds_key(id = \"gmail\")\n    credentials = creds_file(\"gmail_cred\")\n  )\n  }\n}\npubmed_search_chatgpt_summary()\n\n\nlibrary(taskscheduleR)\n# Schedule the script to run daily at a specific time\ntaskscheduler_create(taskname = \"PubMed ChatGPT Summary\",\n                     rscript = \"G:/My Drive/Personal/pubmed_search_chatgpt_summary.R\"),\nschedule = \"DAILY\", starttime = \"08:00\")"
  },
  {
    "objectID": "posts/how-to-write-a-paper/index.html",
    "href": "posts/how-to-write-a-paper/index.html",
    "title": "Writing a paper: Start with an outline",
    "section": "",
    "text": "연구자의 업무 중에 연구 만큼 중요한 것이 글쓰기, 특히 논문 쓰기이다. 논문으로 쓰여지지 못한 연구는 타인에게는 존재하지 않는 것이나 다름 없는 것이다.. Writing a paper by George M. Whitesides 에 논문 쓰기에 유용한 팁이 있어 여기에 기록으로 남긴다. 한 마디로 요약하면 outline (개요)을 이용하는 것이다. 개요를 연구과제의 초기에 작성하여 연구의 계획표로 활용하며 공저자 (주로 제 1저자와 책임저자) 간에 논문에 대한 의견 교환시 개요를 사용하는 것이다. 그리고, 표, 수식, 그림 등이 거의 최종 상태에 가까워지면 개요를 바탕으로 논문 쓰기를 시작한다. 이렇게 하면 불필요한 실험 및 쓰기 등을 줄일 수 있다.\n지금까지 연구 과정을 돌아보니 프로젝트 초기에 논문의 개요를 작성하는 과정을 대체로 하긴 했었고 최종 논문 쓰기에 효과적임을 느끼고는 있었다. 그런데 개요를 이용하여 논문의 구조를 고민하고 그림이나 표를 최종 상태로 만든 후에 눈문 텍스트를 작성하는 일은 하지 않았던 것 같다. 대체로 개요, 그림, 그리고 표가 최종 상태가 되기 전에 텍스트를 작성하여, Whitesides 가 적었듯이 최종 논문에 사용되지 않은 텍스트가 많았던 것 같다. 개요를 이용하여 논문의 구조를 고민하고, 그림, 표를 최종본으로 만드는 과정에 노력을 기울이고 텍스트를 더하는 일은 그 이후에 하는 것이 더 효과적일 것 같다."
  },
  {
    "objectID": "posts/drawing-map/index.html",
    "href": "posts/drawing-map/index.html",
    "title": "ggplot2로 지도 그리기",
    "section": "",
    "text": "ggplot2를 이용하여 지도 그리기를 해보자. 지도는 shapefile에 담겨져 있다고 가정하자. shapefile을 읽는 방법은 여러가지가 있을 수 있는데 sf 패키지의 st_read 혹은 read_sf 함수를 이용한 후 ggplot2의 geom_sf를 이용하여 그리는 것이 가장 쉬운 것 같다.\n\nlibrary(sf)\nkor &lt;- st_read(\"C:/Users/jonghoon.kim/Documents/myblog/posts/drawing-map/gadm41_KOR_1.shp\")\n\nReading layer `gadm41_KOR_1' from data source \n  `C:\\Users\\jonghoon.kim\\Documents\\myblog\\posts\\drawing-map\\gadm41_KOR_1.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 17 features and 11 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 124.6097 ymin: 33.11236 xmax: 131.8715 ymax: 38.61177\nGeodetic CRS:  WGS 84\n\n# kor &lt;- read_sf(dsn=\"C:/Users/jonghoon.kim/Documents/myblog/posts/drawing-map\", layer=\"gadm41_KOR_1\")\nset.seed(42)\n# normalized number of characters of the name of the admin unit (level 1)\nchar_len &lt;- sapply(kor$NAME_1, nchar)\nkor$prop_char &lt;- char_len / max(char_len)\n\nlibrary(ggplot2)\nplt &lt;- ggplot(kor)+\n  geom_sf(aes(fill=prop_char))+\n  scale_fill_viridis_c(name=\"Normalized\\ncharacter length\", limits=c(0,1)) +\n  theme_minimal()+\n  theme(legend.position=\"right\")\n\nplt\n\n\n\n# use color brewer \nlibrary(RColorBrewer)\npal &lt;- brewer.pal(9,\"YlOrBr\")\nplt &lt;- plt + \n  scale_fill_gradientn(name=\"Normalized\\ncharacter length\", colors=pal, limits=c(0,1))\n  \nplt\n\n\n\n# Clear some background stuff\nplt &lt;- plt +\n  theme(panel.background = element_blank(), # bg of the panel\n        plot.background = element_blank(), # bg of the plot\n        legend.background = element_blank(), # get rid of legend bg\n        legend.box.background = element_blank(),\n        panel.spacing = unit(c(0,0,0,0), \"null\"),\n        plot.margin = unit(c(0,0,0,0), \"null\"),\n        axis.line = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        panel.border = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"bottom\",\n        plot.title = element_text(hjust=0.5, size=12))\nplt"
  },
  {
    "objectID": "posts/area-polygon/index.html",
    "href": "posts/area-polygon/index.html",
    "title": "Polygon 면적 구하기: sf 와 raster 패키지",
    "section": "",
    "text": "shapefile에 담겨져 있는 polygon의 면적을 구해보자 raster 패키지의 area 혹은 sf 패키지의 st_area 함수를 이용할 수 있다.\n\nlibrary(sf)\nkor &lt;- st_read(\"C:/Users/jonghoon.kim/Documents/myblog/posts/area-polygon/gadm41_KOR_1.shp\")\n\nReading layer `gadm41_KOR_1' from data source \n  `C:\\Users\\jonghoon.kim\\Documents\\myblog\\posts\\area-polygon\\gadm41_KOR_1.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 17 features and 11 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 124.6097 ymin: 33.11236 xmax: 131.8715 ymax: 38.61177\nGeodetic CRS:  WGS 84\n\n# another way\n# kor &lt;- read_sf(dsn=\"C:/Users/jonghoon.kim/Documents/myblog/posts/area-polygon\", layer=\"gadm41_KOR_1\")\nset.seed(42)\n# 1e6 to get population density per 1 km^2\nkor$area_sqkm1 &lt;- as.numeric(st_area(kor))/1e6\n\n# raster package way\n# library(raster)\n# kor &lt;- shapefile(\"C:/Users/jonghoon.kim/Documents/myblog/posts/area-polygon/gadm41_KOR_1.shp\")\n# raster pkg works for the Spatial* object\n# kor$area_sqkm2 &lt;- raster::area(as(kor, 'Spatial'))/1e6\n\n# plot population density\nlibrary(ggplot2)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\nextrafont::loadfonts()\n\nlabels = expression(atop(\"Population density\", per~1~km^2))\nplt &lt;- ggplot(kor)+\n  geom_sf(aes(fill=area_sqkm1))+\n  scale_fill_viridis_c(name=labels) +\n  theme(legend.position=\"right\")\n\n# ggsave(\"southkorea_map.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)  \nplt\n\n\n\n# use RColorBrewer \nlibrary(RColorBrewer)\npal &lt;- brewer.pal(9,\"YlOrBr\")\nplt + scale_fill_gradientn(name=labels, colors=pal)"
  },
  {
    "objectID": "posts/odin/index.html",
    "href": "posts/odin/index.html",
    "title": "odin package",
    "section": "",
    "text": "이번 Vaccine Impact Modeling Consoritum (VIMC) 연례회의에서 odin이라는 패키지에 대해 알게 되었다. deSolve의 업그레이드 버전이라고 보면 될까? R 코드를 C언어로 컴파일하기 때문에 최종 모형의 구동속도가 빠르다. 따라서 모형을 여러번 돌려야 하는 경우 (예를 들어 MCMC) 에 유리하다. pomp 보다도 훨씬 더 빠르다고 했는데 정확한 비교 수치는 잘 기억이 안남. 종종 C++로 모형을 만들었는데 odin 패키지를 사용하면 훨씬 쉬워질 것 같다. 좀 더 살펴보아야 할 텐데 일단 잊지 않기 위해 간단히 SIR 모형만 만들어 보았다.\n\nDeterministic SIR model\n\npath_sir_model &lt;- \"C:/Users/jonghoon.kim/Documents/myblog/posts/odin/sir.R\"\nwriteLines(readLines(path_sir_model))\n\n## Core equations for transitions between compartments:\nupdate(S) &lt;- S - beta * S * I / N\nupdate(I) &lt;- I + beta * S * I / N - gamma * I\nupdate(R) &lt;- R + gamma * I\n\n## Total population size (odin will recompute this at each timestep:\n## automatically)\nN &lt;- S + I + R\n\n## Initial states:\ninitial(S) &lt;- S_ini # will be user-defined\ninitial(I) &lt;- I_ini # will be user-defined\ninitial(R) &lt;- 0\n\n## User defined parameters - default in parentheses:\nS_ini &lt;- user(1000)\nI_ini &lt;- user(1)\nbeta &lt;- user(0.2)\ngamma &lt;- user(0.1)\n\n\nRun the model and plot the results\n\nlibrary(odin)\nsir_generator &lt;- odin::odin(path_sir_model)\n\n\nx &lt;- sir_generator$new()\n# see what the object is like\n# x\nsir_col &lt;- c(\"#8c8cd9\", \"#cc0044\", \"#999966\")\nx_res &lt;- x$run(0:200)\n\npar(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)\nmatplot(x_res[, 1], x_res[, -1], xlab = \"Time\", ylab = \"Number of individuals\",\n        type = \"l\", col = sir_col, lty = 1)\nlegend(\"topright\", lwd = 1, col = sir_col, legend = c(\"S\", \"I\", \"R\"), bty = \"n\")\n\n\n\n\n\n\nStochastic SIR model\n\npath_sir_stoch_model &lt;- \"C:/Users/jonghoon.kim/Documents/myblog/posts/odin/sir_stoch.R\"\nwriteLines(readLines(path_sir_stoch_model))\n\n## Core equations for transitions between compartments:\nupdate(S) &lt;- S - n_SI\nupdate(I) &lt;- I + n_SI - n_IR\nupdate(R) &lt;- R + n_IR\n\n## Individual probabilities of transition:\np_SI &lt;- 1 - exp(-beta * I / N) # S to I\np_IR &lt;- 1 - exp(-gamma) # I to R\n\n## Draws from binomial distributions for numbers changing between\n## compartments:\nn_SI &lt;- rbinom(S, p_SI)\nn_IR &lt;- rbinom(I, p_IR)\n\n## Total population size\nN &lt;- S + I + R\n\n## Initial states:\ninitial(S) &lt;- S_ini\ninitial(I) &lt;- I_ini\ninitial(R) &lt;- 0\n\n## User defined parameters - default in parentheses:\nS_ini &lt;- user(1000)\nI_ini &lt;- user(1)\nbeta &lt;- user(0.2)\ngamma &lt;- user(0.1)\n\n\nRun the model and plot the results\n\nsir_generator &lt;- odin::odin(path_sir_stoch_model)\n\n\nset.seed(42)\nx &lt;- sir_generator$new()\nx_res &lt;- x$run(0:200)\npar(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)\nmatplot(x_res[, 1], x_res[, -1], xlab = \"Time\", ylab = \"Number of individuals\",\n        type = \"l\", col = sir_col, lty = 1)\nlegend(\"topright\", lwd = 1, col = sir_col, legend = c(\"S\", \"I\", \"R\"), bty = \"n\")"
  },
  {
    "objectID": "posts/SIR-sympy/index.html",
    "href": "posts/SIR-sympy/index.html",
    "title": "SIR model using SymPy",
    "section": "",
    "text": "I attempted to replicate some of the simple analytical resutls presented in the book, Mathematical Epidemiology by Brauer et al.\n\\[\n\\begin{align}\n\\mathrm{d}S/\\mathrm{d}t &= -\\beta I S \\\\\n\\mathrm{d}I/\\mathrm{d}t &= \\beta I S - \\gamma I\\\\\n\\end{align}\n\\] The first part is simply to compute \\(dI/dS\\).\n\nfrom sympy import *\n\nR_0, b, g, dIdt, dSdt, S, I = symbols('R_0 b g dIdt dSdt S I')\n\ndSdt = - b*S*I\ndIdt = + b*S*I - g*I\ndSdI = dIdt / dSdt #-(I*S*b - I*g)/(I*S*b)\n\n# b &lt;- R0*g\nsimplify(-(I*S*R_0*g - I*g)/(I*S*R_0*g)) \n\n-1 + 1/(R_0*S)\n\n\nThe second part is integrate the equation, \\(dI/dS\\)\n\nS, I = symbols(\"S I\", cls=Function)\nb, g, t, R_0, S0, I0 = symbols(\"b g t R_0 S0 I0\")\n\neq = Eq(I(t).diff(t), - S(t).diff(t) + (1/R_0)*(1/S(t))*S(t).diff(t))\n\nintegrate(eq, t)\n\nEq(I(t), -S(t) + log(S(t))/R_0)"
  },
  {
    "objectID": "posts/crop-raster-polygon/index.html",
    "href": "posts/crop-raster-polygon/index.html",
    "title": "Extract raster based on a polygon",
    "section": "",
    "text": "raster 이미지의 일부를 추출해보자. 특히, shapefile에 담겨져 있는 polygon에 해당하는 raster 를 추출해보자. raster 패키지의 crop 과 mask 함수를 이용할 수 있다.\n\n# Create some data using meuse \nlibrary(raster)\ndata(meuse)\ncoordinates(meuse) &lt;- ~x+y\nproj4string(meuse) &lt;- CRS(\"+init=epsg:28992\")\ndata(meuse.grid)\ncoordinates(meuse.grid) = ~x+y\nproj4string(meuse.grid) &lt;- CRS(\"+init=epsg:28992\")\ngridded(meuse.grid) = TRUE    \nr &lt;- raster(meuse.grid) \nr[] &lt;- runif(ncell(r))\n\n# Create a polygon\nf &lt;- rgeos::gBuffer(meuse[10,], byid=FALSE, id=NULL, width=250, \n                         joinStyle=\"ROUND\", quadsegs=10)   \n\n# Plot full raster and polygon                       \nplot(r)\nplot(f,add=T)\n\n\n\n# Crop using extent, rasterize polygon and finally, create poly-raster\n#          **** This is the code that you are after ****  \ncr &lt;- crop(r, extent(f), snap=\"out\")                    \nfr &lt;- rasterize(f, cr)   \nlr &lt;- mask(x=cr, mask=fr)\n\n# Plot results\nplot(lr)\nplot(f,add=T)"
  },
  {
    "objectID": "posts/nb-regression-optim/index.html",
    "href": "posts/nb-regression-optim/index.html",
    "title": "Regression using optim",
    "section": "",
    "text": "Data\nI will use the cars data with give the speed of cars and the distances taken to stop.\n\nd &lt;- datasets::cars\nm &lt;- lm(dist ~ speed, data=d)\nsummary(m)\n\n\nCall:\nlm(formula = dist ~ speed, data = d)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-29.069  -9.525  -2.272   9.215  43.201 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -17.5791     6.7584  -2.601   0.0123 *  \nspeed         3.9324     0.4155   9.464 1.49e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 15.38 on 48 degrees of freedom\nMultiple R-squared:  0.6511,    Adjusted R-squared:  0.6438 \nF-statistic: 89.57 on 1 and 48 DF,  p-value: 1.49e-12\n\n\n\n\nPlot\nPlot estimates with confidence and prediction intervals\n\npred &lt;- predict(m, interval=\"prediction\", level=0.95) # prediction interval\nconf &lt;- predict(m, interval=\"confidence\", level=0.95) # confidence interval\n\nmdat &lt;- m$model\nmdat$pred_estimate &lt;- pred[,1]\nmdat$pred_lb &lt;- pred[,2]\nmdat$pred_ub &lt;- pred[,3]\nmdat$conf_estimate &lt;- conf[,1]\nmdat$conf_lb &lt;- conf[,2]\nmdat$conf_ub &lt;- conf[,3]\n\nmdat$residuals &lt;- residuals(m)\nlibrary(ggplot2)\nlibrary(dplyr)\n\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\n\npltcar &lt;- mdat %&gt;% \n  ggplot(aes(speed, dist))+\n  # geom_point(aes(size = abs(m$residuals)))+\n  geom_point(aes(color=\"Data\"), size = 1)+\n  geom_line(aes(y=pred_estimate, color=\"Model\"))+\n  geom_ribbon(aes(ymax=pred_ub, ymin=pred_lb, fill=\"Model\"), alpha=0.2)+\n  # geom_line(aes(y=conf_estimate), color=\"steelblue\")+\n  geom_ribbon(aes(ymax=conf_ub, ymin=conf_lb, fill=\"Model\"), alpha=0.5)+\n  scale_color_manual(\"\", values=c(\"Data\"=\"firebrick\"))+\n  scale_fill_manual(\"\", values=c(\"Model\"=\"steelblue\"))+\n  labs(x=\"Speed\", y=\"Distance\", title=\"Speed and Stopping Distances of Cars\")+\n  theme(legend.position=\"bottom\")\nggsave(\"plot_car.png\", pltcar)\npltcar\n\n\n\n\n\n\noptim function\nNow let’s take an alternative approach to write down the likelihood function and maximize it using the optim function\n\n# define our likelihood function we like to optimize\nnegloglik &lt;- function(par, y, X){\n  sigma &lt;- par[1]\n  beta &lt;- par[-length(par)]\n  mu &lt;- X %*% beta \n  - sum(dnorm(y, mean=mu, sd=sigma, log=TRUE), na.rm=T)\n}\n\nX = model.matrix(m)\ninit = c(coef(m), sigma=summary(m)$sigma)\n# check\n# negloglik(par=init, y=d$y, X=X)\nfit &lt;- optim(par=init, \n             fn=negloglik, \n             y=d$dist, \n             X=X, \n             control=list(reltol=1e-6))\n\nLet’s compare the results.\n\nfit$par\n\n(Intercept)       speed       sigma \n -17.579095    3.932409   15.379587 \n\ncoef(m)\n\n(Intercept)       speed \n -17.579095    3.932409"
  },
  {
    "objectID": "posts/nb-censored-regression/index.html",
    "href": "posts/nb-censored-regression/index.html",
    "title": "Negative binomial regression with censored data: POLYMOD data",
    "section": "",
    "text": "This post describes my attempt to reproduce Table 1 of the paper, Social Contacts and Mixing Patterns Relevant to the Spread of Infectious Diseases. Data were downloaded from Social Contact Data, which was hosted in zenodo. I used the version 1.1. In summary, I wasn’t successful at reproducing the table exactly but still wanted to document the processes that I went through.\n\nData preparation\n\nlibrary(data.table)\nd1 &lt;- fread(\"2008_Mossong_POLYMOD_participant_common.csv\")\n# d1 &lt;- fread(\"data/2008_Mossong_POLYMOD_participant_common.csv\")\nd2 &lt;- fread(\"2008_Mossong_POLYMOD_contact_common.csv\")\n# d2 &lt;- fread(\"data/2008_Mossong_POLYMOD_contact_common.csv\")\nlibrary(dplyr)\n# count the number of contacts for each participant using part_id variable\nd2 |&gt; group_by(part_id) |&gt;\n  summarize(contacts = n()) -&gt; d2_contacts\nd12 &lt;- left_join(d1, d2_contacts, by=\"part_id\")\n# add household information\nd3 &lt;- fread(\"2008_Mossong_POLYMOD_hh_common.csv\")\n# d3 &lt;- fread(\"data/2008_Mossong_POLYMOD_hh_common.csv\")\nd123 &lt;- left_join(d12, d3, by=\"hh_id\")\n# add day of week information\nd4 &lt;- fread(\"2008_Mossong_POLYMOD_sday.csv\")\n# d4 &lt;- fread(\"data/2008_Mossong_POLYMOD_sday.csv\")\ndat &lt;- left_join(d123, d4, by=\"part_id\")\n\n\n\nData manipulation\nCategorize the age group into different 10 age groups: 0-4, 5-9, 10-14, 15-19, and 20 to 70 by 10 years and 70 and above\n\nage_grp_label &lt;- c(\"0-4\",\"5-9\",\"10-14\",\"15-19\",\"20-29\",\"30-39\",\"40-49\",\"50-59\",\"60-69\",\"70+\")\n\nclassify_age &lt;- function(d){\n  d$age_grp &lt;- \"Missing\"\n  for (i in 1:nrow(d)) {\n    if(!is.na(d$part_age[i])){\n      if(d$part_age[i] &lt; 5){\n        d$age_grp[i] &lt;- age_grp_label[1]\n      }\n      else if (d$part_age[i] &gt;= 5 && d$part_age[i] &lt; 20){\n        for(j in 1:3){\n          if(d$part_age[i] &gt;= 5*j && d$part_age[i] &lt; (5*j+5)){\n            d$age_grp[i] &lt;- age_grp_label[j+1]\n          }\n        }\n      }\n      else if (d$part_age[i] &gt;= 20 && d$part_age[i] &lt; 70){\n        for (k in 1:5){\n          if (d$part_age[i] &gt;= (10+10*k) && d$part_age[i] &lt; (20+10*k)){\n            d$age_grp[i] &lt;- age_grp_label[k+4]\n          }\n        }\n      } \n      else {\n        d$age_grp[i] &lt;- age_grp_label[10]\n      }\n    } \n  }\n  return(d)\n}\n\ndat &lt;- classify_age(dat)\n\nCompare the number of participants by age group (the third column of Table 1)\n\ndat |&gt; group_by(age_grp) |&gt; summarize(npart=n()) -&gt; npart_ag\nnpart_ag$true &lt;- c(660,661,713,685,879,815,908,906,728,270,65) # hard-coded using the values in Table 1.\nnpart_ag\n\n# A tibble: 11 × 3\n   age_grp npart  true\n   &lt;chr&gt;   &lt;int&gt; &lt;dbl&gt;\n 1 0-4       660   660\n 2 10-14     713   661\n 3 15-19     685   713\n 4 20-29     879   685\n 5 30-39     815   879\n 6 40-49     908   815\n 7 5-9       661   908\n 8 50-59     906   906\n 9 60-69     728   728\n10 70+       270   270\n11 Missing    65    65\n\n\nCategorize the household size\n\nclassify_household &lt;- function(d){\n  d$hh_size_grp &lt;- \"Missing\"\n  d$hh_size_grp &lt;- ifelse(d$hh_size &gt; 5, \"6+\", as.character(d$hh_size))\n  return(d)\n}\ndat &lt;- classify_household(dat)\n\nClassify gender\n\nclassify_gender &lt;- function(d) {\n  d$gender &lt;- \"Missing\"\n  d$gender &lt;- ifelse(d$part_gender == \"M\", \"M\", ifelse(d$part_gender == \"F\", \"F\", d$gender))\n  \n  return(d)\n}\n\ndat &lt;- classify_gender(dat)\n\nClassify day of week\n\ndayofweek_label &lt;- c(\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\")\n\nclassify_dayofweek &lt;- function(d) {\n  d$dayofweek_f &lt;- \"Missing\"\n  for (i in 1:nrow(d)) {\n    day = d$dayofweek[i]\n    if (!is.na(day)) {\n      d$dayofweek_f[i] &lt;- dayofweek_label[day+1]\n    }\n  }\n  return(d)\n}\ndat &lt;- classify_dayofweek(dat)\n# change names for conveninence\ndat$dayofweek_integer &lt;- dat$dayofweek\ndat$dayofweek &lt;- dat$dayofweek_f\n\nMake categorical variables factor for regression Set reference groups relevel(x, ref=ref) as in Table 1\n\n# set the categorical variables as factor for regression\ndat$age_grp &lt;- factor(dat$age_grp, levels=c(age_grp_label,\"Missing\"))\ndat$age_grp &lt;- relevel(dat$age_grp, ref=\"0-4\")\ndat$gender &lt;- factor(dat$gender, levels=c(\"F\",\"M\",\"Missing\"))\ndat$gender &lt;- relevel(dat$gender, ref = \"F\")\ndat$dayofweek &lt;- factor(dat$dayofweek, levels=c(dayofweek_label,\"Missing\"))\ndat$dayofweek &lt;- relevel(dat$dayofweek, ref = \"Sunday\")\ndat$hh_size_grp &lt;- as.factor(dat$hh_size_grp)\ndat$hh_size_grp &lt;- relevel(dat$hh_size_grp, ref=\"1\")\ndat$country &lt;- factor(dat$country, levels=c(\"BE\",\"DE\",\"FI\",\"GB\",\"IT\",\"LU\",\"NL\",\"PL\"))\ndat$country &lt;- relevel(dat$country, ref=\"BE\")\n\n# fwrite(dat, \"POLYMOD_2017.csv\")\n\nAssign weights to individual participants based on the supplementary Table 2. My approach was to identify a row and a column for the relevant weight based on the age and household size. Weight of an age group for the sample was calculated by dividing the proportion of the age group in the population (in the census) with the proportion of the age group in the sample.\n\nfind_age_row_column &lt;- function(d) {\n  d$age_row &lt;- NA\n  for (i in 1:nrow(d)) {\n    ag &lt;- d$part_age[i]\n    if(!is.na(ag)){\n      for (j in 1:14) {\n        if (ag &gt;= (j-1)*5 & ag &lt; (j-1)*5+5) {\n          d$age_row[i] &lt;- j\n          break\n        }\n        else if (ag &gt;= 70) {\n          d$age_row[i] &lt;- 15\n          break\n        }\n        else{}\n      }\n    }\n  }\n  \n  d$hh_col &lt;- NA\n  for (i in 1:nrow(d)) {\n    hs &lt;- d$hh_size[i]\n    if(!is.na(hs)){\n      for (j in 1:4) {\n        if (hs == j) {\n          d$hh_col[i] &lt;- j\n          break\n        }\n        else if (hs &gt; 4) {\n          d$hh_col[i] &lt;- 5\n        }\n        else{}\n      }\n    }\n  }\n  return(d)\n}\n\ndat &lt;- find_age_row_column(dat)\n# wlist &lt;- rio::import_list(\"data/sampling_weight.xlsx\")\nwlist &lt;- rio::import_list(\"sampling_weight.xlsx\")\n\nclassify_weight &lt;- function(d){\n  d$wt &lt;- NA\n  cnames &lt;- names(wlist)\n  for (i in 1:length(cnames)) {\n    wtable &lt;- wlist[[i]]\n    w1 &lt;- wtable[wtable$`Household size` == \"Ratio C/S\",] # sampling weight\n    W &lt;- w1[!is.na(w1$`Household size`),] # remove the first row\n    # View(W)\n    for (j in 1:nrow(d)){\n      if(d$country[j] == cnames[i]) {\n        d$wt[j] &lt;- W[d$age_row[j], d$hh_col[j]+2]\n      }\n    }\n  }\n  return(d)\n}\n\n# grep(\"-\", as.character(d$wt), value = T)\n# hist(as.numeric(d$wt))\ndat &lt;- classify_weight(dat)\ndat$wt &lt;- as.numeric(dat$wt)\n\n\n\nData for fitting only complete cases\nThere are missing values for contacts ($n$=36) and weight ($n$=65). It is not clear how those observations were treated in the model. This may be a reason why I can’t reproduce the results in Table 1.\n\ndat_ &lt;- dat\n## would imputation for the 36 observations make a difference?\n# dat$contacts_ori &lt;- dat$contacts\n# dat$contacts &lt;- ifelse(is.na(dat$contacts), round(mean(dat$contacts, na.rm=T)), dat$contacts)\n\nmodel_var &lt;- c(\"contacts\", \"age_grp\", \"gender\", \"dayofweek\", \"hh_size_grp\", \"country\", \"wt\")\ndat &lt;- dat[,..model_var]\n# dat &lt;- dat[complete.cases(dat),]\ndat &lt;- dat[!is.na(contacts),]\n\n\n\nNegBin regression: no censoring and no weighting\n\nlibrary(MASS)\nm &lt;- glm.nb(contacts ~ age_grp + gender + dayofweek + hh_size_grp + country, data = dat)\n# summary(m4)\nexp(m$coefficients)\n\n       (Intercept)         age_grp5-9       age_grp10-14       age_grp15-19 \n         5.6764958          1.4022341          1.6768688          1.6824225 \n      age_grp20-29       age_grp30-39       age_grp40-49       age_grp50-59 \n         1.4458386          1.4168460          1.3868642          1.2940456 \n      age_grp60-69         age_grp70+     age_grpMissing            genderM \n         1.0520198          0.8120547          1.0338752          0.9941243 \n     genderMissing    dayofweekMonday   dayofweekTuesday dayofweekWednesday \n         1.3434436          1.3179053          1.3998594          1.3876252 \n dayofweekThursday    dayofweekFriday  dayofweekSaturday   dayofweekMissing \n         1.3858679          1.4403113          1.1542837          1.2179674 \n      hh_size_grp2       hh_size_grp3       hh_size_grp4       hh_size_grp5 \n         1.0990550          1.1255471          1.2592436          1.3360603 \n     hh_size_grp6+          countryDE          countryFI          countryGB \n         1.4601697          0.7036079          0.9483997          0.9797998 \n         countryIT          countryLU          countryNL          countryPL \n         1.6351704          1.4081732          1.2493105          1.3223343 \n\n\nRegression that account for censored number of contacts. The paper reads: The data were right censored at 29 contacts for all countries because of a limited number of possible diary entries in some countries\n\\[\n\\text{log }L = \\sum_{i=1}^n w_i\\left(\\delta_i~\\text{log} \\left(P\\left(Y=y_i|X\\right)\\right) + \\left(1-\\delta_i\\right)~\\text{log} \\left(1-\\sum_{i=1}^{28}P(Y=y_i|X)\\right)\n\\right)\n\\] , where\n\\[\n\\begin{equation}\n  \\delta_i=\\begin{cases}\n    1, & \\text{if$~y_i&lt;29$}.\\\\\n    0, & \\text{otherwise}.\n  \\end{cases}\n\\end{equation}\n\\]\n\n\nTake censoring into account\n\nX = model.matrix(m)\n# X &lt;- model.matrix(~ age_grp + gender + dayofweek + hh_size_grp + country, data=dat)\n\n# ini = c(coef(m1), log_theta = log(summary(m1)$theta))\ninit = c(coef(m), size=summary(m)$theta)\n\nnegll_censor &lt;- function(par, y, X, ul=400) {\n  # parameters\n  size = par[length(par)]\n  beta = par[-length(par)]\n  # create indicator depending on chosen limit\n  indicator = y &lt; ul\n  # linear predictor\n  mu = exp(X %*% beta)\n  # log likelihood\n  ll = sum(indicator * dnbinom(y, mu=mu, size=size, log=T) +\n             (1-indicator) * log(1-pnbinom(ul, mu=mu, size=size)), na.rm=T)\n  return(-ll)\n}\n\n# you can check if two methods (glm.nb vs. optim) match by setting ul high (e.g., 100)\nfit1 &lt;- optim(par=init,\n            negll_censor,\n            y = dat$contacts,\n            X = X,\n            ul = 29,\n            method = \"Nelder-Mead\",\n            control = list(maxit=1e3, reltol=1e-10))\nexp(fit1$par)\n\n       (Intercept)         age_grp5-9       age_grp10-14       age_grp15-19 \n         5.6047431          1.4335817          1.7328973          1.7131792 \n      age_grp20-29       age_grp30-39       age_grp40-49       age_grp50-59 \n         1.4411616          1.4214491          1.3811132          1.2825334 \n      age_grp60-69         age_grp70+     age_grpMissing            genderM \n         1.0518372          0.8182114          1.0369387          0.9825757 \n     genderMissing    dayofweekMonday   dayofweekTuesday dayofweekWednesday \n         1.3945323          1.3504467          1.4340414          1.4146111 \n dayofweekThursday    dayofweekFriday  dayofweekSaturday   dayofweekMissing \n         1.4265521          1.4638406          1.1583928          1.2481137 \n      hh_size_grp2       hh_size_grp3       hh_size_grp4       hh_size_grp5 \n         1.0879976          1.1266973          1.2623833          1.3638927 \n     hh_size_grp6+          countryDE          countryFI          countryGB \n         1.4878961          0.6934848          0.9561751          1.0065923 \n         countryIT          countryLU          countryNL          countryPL \n         1.6915581          1.3931403          1.2521232          1.3348934 \n              size \n        18.9737736 \n\n\n\n\nTake censoring & weighting into account\n\nX = model.matrix(m)\n# X &lt;- model.matrix(~ age_grp + gender + dayofweek + hh_size_grp + country, data=dat) # full matrix\n# ini = c(coef(m1), log_theta = log(summary(m1)$theta))\ninit = c(coef(m), size=summary(m)$theta)\n\nnegll_censor_weight &lt;- function(par, y, X, wt, ul=400) {\n  # parameters\n  size = par[length(par)]\n  beta = par[-length(par)]\n  # create indicator depending on chosen limit\n  indicator = y &lt; ul\n  # linear predictor\n  mu = exp(X %*% beta)\n  # log likelihood\n  ll = sum(wt*(indicator * dnbinom(y, mu=mu, size=size, log=T)\n  + (1-indicator) * log(1-pnbinom(ul, mu=mu, size=size))), na.rm=T)\n\n  return(-ll)\n}\n\nfit2 &lt;- optim(par=init,\n            negll_censor_weight,\n            y = dat$contacts,\n            X = X,\n            wt = dat$wt,\n            ul = 29,\n            method = \"Nelder-Mead\",\n            control = list(maxit=1e3, reltol=1e-10))\n\nexp(fit2$par)\n\n       (Intercept)         age_grp5-9       age_grp10-14       age_grp15-19 \n         5.6120605          1.4242420          1.7386774          1.7031201 \n      age_grp20-29       age_grp30-39       age_grp40-49       age_grp50-59 \n         1.4590198          1.4488638          1.3920936          1.3145593 \n      age_grp60-69         age_grp70+     age_grpMissing            genderM \n         1.0690678          0.8092529          0.9944973          0.9919151 \n     genderMissing    dayofweekMonday   dayofweekTuesday dayofweekWednesday \n         1.0153858          1.3261171          1.3904167          1.3853431 \n dayofweekThursday    dayofweekFriday  dayofweekSaturday   dayofweekMissing \n         1.4001935          1.4212925          1.1905515          1.2452143 \n      hh_size_grp2       hh_size_grp3       hh_size_grp4       hh_size_grp5 \n         1.1014090          1.1254771          1.2788309          1.3717150 \n     hh_size_grp6+          countryDE          countryFI          countryGB \n         1.4784786          0.6889027          0.9561525          0.9925714 \n         countryIT          countryLU          countryNL          countryPL \n         1.6631404          1.4198698          1.3256452          1.3635879 \n              size \n        17.7725195 \n\n\n\nda &lt;- data.frame(\n  parm=c(\"0-4\", \"5-9\", \"10-14\", \"15-19\", \"20-29\", \"30-39\", \"40-49\", \n\"50-59\", \"60-69\", \"70+\", \"Missing\", \n\"F\",\"M\",\"Missing\",\n\"1\", \"2\", \"3\", \"4\", \"5\", \"6+\",\n\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \n\"Saturday\", \"Missing\",\n\"BE\", \"DE\", \"FI\", \"GB\", \"IT\", \"LU\", \"NL\", \"PL\"),\nest = c(1.00, 1.42, 1.73, 1.68, 1.45, 1.45, 1.38, 1.31, 1.06, 0.81,0.91, \n        1.00, 0.99, 1.57, \n        1.00, 1.17, 1.20, 1.36, 1.46, 1.56,\n        1.00, 1.33, 1.39, 1.38, 1.41, 1.43, 1.20, 1.24,\n        1.00, 0.70, 0.94, 0.99, 1.66, 1.42, 1.34, 1.37))\n\nda$myest = round(c(1.00, exp(fit2$par)[2:11], \n             1.00, exp(fit2$par)[12:13],\n             1.00, exp(fit2$par)[21:25],\n             1.00, exp(fit2$par)[14:20],\n             1.00, exp(fit2$par)[26:32]), digits=2)\nda\n\n        parm  est myest\n1        0-4 1.00  1.00\n2        5-9 1.42  1.42\n3      10-14 1.73  1.74\n4      15-19 1.68  1.70\n5      20-29 1.45  1.46\n6      30-39 1.45  1.45\n7      40-49 1.38  1.39\n8      50-59 1.31  1.31\n9      60-69 1.06  1.07\n10       70+ 0.81  0.81\n11   Missing 0.91  0.99\n12         F 1.00  1.00\n13         M 0.99  0.99\n14   Missing 1.57  1.02\n15         1 1.00  1.00\n16         2 1.17  1.10\n17         3 1.20  1.13\n18         4 1.36  1.28\n19         5 1.46  1.37\n20        6+ 1.56  1.48\n21    Sunday 1.00  1.00\n22    Monday 1.33  1.33\n23   Tuesday 1.39  1.39\n24 Wednesday 1.38  1.39\n25  Thursday 1.41  1.40\n26    Friday 1.43  1.42\n27  Saturday 1.20  1.19\n28   Missing 1.24  1.25\n29        BE 1.00  1.00\n30        DE 0.70  0.69\n31        FI 0.94  0.96\n32        GB 0.99  0.99\n33        IT 1.66  1.66\n34        LU 1.42  1.42\n35        NL 1.34  1.33\n36        PL 1.37  1.36"
  },
  {
    "objectID": "posts/censored-regression-optim/index.html",
    "href": "posts/censored-regression-optim/index.html",
    "title": "Regression with censored data: AER::tobit and optim",
    "section": "",
    "text": "The following example was adapted from the Tobit model in Model Estimation by Example. The dataset contains 200 observations. The academic aptitude variable is apt, the reading and math test scores are read and math, respectively. The variable prog is the type of program the student is in, it is a categorical (nominal) variable that takes on three values, academic (prog = 1), general (prog = 2), and vocational (prog = 3). The variable id is an identification variable. More details of the dataset available at https://stats.oarc.ucla.edu/r/dae/tobit-models/.\n\nlibrary(data.table)\ndat = fread(\"https://stats.idre.ucla.edu/stat/data/tobit.csv\")\ndat[, prog := as.factor(prog)]\ndat\n\n      id read math       prog apt\n  1:   1   34   40 vocational 352\n  2:   2   39   33 vocational 449\n  3:   3   63   48    general 648\n  4:   4   44   41    general 501\n  5:   5   47   43    general 762\n ---                             \n196: 196   44   49    general 539\n197: 197   50   50    general 594\n198: 198   47   51    general 616\n199: 199   52   50    general 558\n200: 200   68   75    general 800\n\n\nFollowing codes were borrowed from the UCLA Advanced Research Computing\n\n# function that gives the density of normal distribution\n# for given mean and sd, scaled to be on a count metric\n# for the histogram: count = density * sample size * bin width\nf &lt;- function(x, var, bw = 15) {\n  dnorm(x, mean = mean(var), sd(var)) * length(var) * bw\n}\nlibrary(ggplot2)\n# setup base plot\np &lt;- ggplot(dat, aes(x = apt, fill=prog))\n# histogram, coloured by proportion in different programs\n# with a normal distribution overlayed\np &lt;- p + stat_bin(binwidth=15) + \n  stat_function(fun = f, size = 1,\n    args = list(var = dat$apt))\n\nggsave(\"apt_censored.png\", p)\n\nLooking at the above histogram, we can see the censoring in the values of apt, that is, there are far more cases with scores of 750 to 800 than one would expect looking at the rest of the distribution. Below is an alternative histogram that further highlights the excess of cases where apt=800.\nNote on the difference between truncation and censoring: With censored variables, all of the observations are in the dataset, but we don’t know the “true” values of some of them. With truncation some of the observations are not included in the analysis because of the value of the variable.\nThe Tobit model can be used for such a case. It is a class of regression models in which the observed range of the dependent variable is censored in some way, according to the [Wikipedia article] (https://en.wikipedia.org/wiki/Tobit_model). The possible maximum score 800, which\n\ntobit = AER::tobit(\n  apt ~ read + math + prog,\n  data = dat,\n  left = -Inf,\n  right = 800\n)\n\nTo account for censoring, likelihood function is modified to so that it reflects the unequal sampling probability for each observation depending on whether the latent dependent variable fell above or below the determined threshold. It appears that this approach was first proposed by James Tobin. For a sample that, as in Tobin’s original case, was censored from below at zero, the sampling probability for each non-limit observation is simply the height of the appropriate density function. For any limit observation, it is the cumulative distribution, i.e. the integral below zero of the appropriate density function. The likelihood function is thus a mixture of densities and cumulative distribution functions, according to the Wikipedia article.\n\\[\n\\text{log }L = \\sum_{i=1}^n w_i\\left(\\delta_i~\\text{log} \\left(P\\left(Y=y_i|X\\right)\\right) + \\left(1-\\delta_i\\right)~\\text{log} \\left(1-\\sum_{i=1}^{l_U}P(Y=y_i|X)\\right)\n\\right)\n\\] , where \\(l_U\\) represents the upper limit and\n\\[\n\\begin{equation}\n  \\delta_i=\\begin{cases}\n    1, & \\text{if }y_i &lt; l_U.\\\\\n    0, & \\text{otherwise}.\n  \\end{cases}\n\\end{equation}\n\\]\n\nLog likelihood accounting for censoring\n\nnegloglik &lt;- function(par, y, X, ul=100) {\n  # parameters\n  sd = par[length(par)]\n  beta = par[-length(par)]\n  # create indicator depending on chosen limit\n  indicator = y &lt; ul\n  # linear predictor\n  mu = X %*% beta\n  # log likelihood\n  loglik = indicator * dnorm(y, mean=mu, sd=sd, log=T) +\n             (1-indicator) * log(1-pnorm(ul, mean=mu, sd=sd))\n\n  sumloglik = sum(loglik, na.rm=T)\n  return(-sumloglik)\n}\n\n\n\noptim\n\n# Setup data and initial values.\nmod = lm(apt ~ read + math + prog, data = dat)\nX = model.matrix(mod)\ninit = c(coef(mod), sigma=summary(mod)$sigma)\n\n# negloglik(par=init, y=acad_apt$apt, X=X, ul=800)\n\nfit &lt;- optim(par = init,\n            fn = negloglik,\n            y = dat$apt,\n            X = X,\n            ul = 800)\n\ncoef(tobit)\n\n   (Intercept)           read           math    proggeneral progvocational \n    209.565971       2.697939       5.914485     -12.714763     -46.143904 \n\n(fit$par)\n\n   (Intercept)           read           math    proggeneral progvocational \n    211.054867       2.813491       5.763177     -12.354492     -45.847701 \n         sigma \n     65.652919 \n\n\n\n\noptim control parameters\nBy adjusting control parameters of the optim function, results can match more closely. Below is such an example.\n\nfit &lt;- optim(par = init,\n            fn = negloglik,\n            y = dat$apt,\n            X = X,\n            ul = 800,\n            method = \"Nelder-Mead\",\n            control = list(maxit=2e4, reltol=1e-15))\n\ncoef(tobit)\n\n   (Intercept)           read           math    proggeneral progvocational \n    209.565971       2.697939       5.914485     -12.714763     -46.143904 \n\n(fit$par)\n\n   (Intercept)           read           math    proggeneral progvocational \n    209.565967       2.697937       5.914486     -12.714777     -46.143838 \n         sigma \n     65.676724"
  },
  {
    "objectID": "posts/POLYMOD-multiple-regression/index.html",
    "href": "posts/POLYMOD-multiple-regression/index.html",
    "title": "Mulitple regression: POLYMOD data",
    "section": "",
    "text": "This post describes my attempt to reproduce Table 1 of the paper, Social Contacts and Mixing Patterns Relevant to the Spread of Infectious Diseases. Data were downloaded from Social Contact Data, which was hosted in zenodo. I used the version 1.1. In summary, I wasn’t successful at reproducing the table exatly but still wanted to document the processes that I went through.\n\nData preparation\n\nlibrary(data.table)\n\nd1 &lt;- fread(\"2008_Mossong_POLYMOD_participant_common.csv\")\nd2 &lt;- fread(\"2008_Mossong_POLYMOD_contact_common.csv\")\nlibrary(dplyr)\n# count the number of contacts for each participant using part_id variable\nd2 |&gt; group_by(part_id) |&gt;\n  summarize(contacts = n()) -&gt; d2_contacts\nd12 &lt;- left_join(d1, d2_contacts, by=\"part_id\")\n# add household information\nd3 &lt;- fread(\"2008_Mossong_POLYMOD_hh_common.csv\")\nd123 &lt;- left_join(d12, d3, by=\"hh_id\")\n# add day of week information\nd4 &lt;- fread(\"2008_Mossong_POLYMOD_sday.csv\")\ndat &lt;- left_join(d123, d4, by=\"part_id\")\n\n\n\nData manipulation\nCategorize the age group into different 10 age groups: 0-4, 5-9, 10-14, 15-19, and 20 to 70 by 10 years and 70 and above\n\nclassify_age &lt;- function(d){\n  d$age_grp &lt;- 99\n  for (i in 1:nrow(d)) {\n    if(!is.na(d$part_age[i])){\n      if(d$part_age[i] &lt; 5){\n        d$age_grp[i] &lt;- 0\n      }\n      else if (d$part_age[i] &gt;= 5 && d$part_age[i] &lt; 20){\n        for(j in 1:3){\n          if(d$part_age[i] &gt;= 5*j && d$part_age[i] &lt; (5*j+5)){\n            d$age_grp[i] &lt;- j\n          }\n        }\n      }\n      else if (d$part_age[i] &gt;= 20 && d$part_age[i] &lt; 70){\n        for (k in 1:5){\n          if (d$part_age[i] &gt;= (10+10*k) && d$part_age[i] &lt; (20+10*k)){\n            d$age_grp[i] &lt;- k+3\n          }\n        }\n      } \n      else {\n        d$age_grp[i] &lt;- 9\n      }\n    } \n  }\n  d\n}\n\ndat &lt;- classify_age(dat)\n\n\nlibrary(ggplot2)\ndat |&gt; ggplot(aes(x=contacts)) + \n  geom_histogram(binwidth=5)\n\n\n\n\nCompare the number of participants by age group (the third column)\n\ndat |&gt; \n  group_by(age_grp) |&gt; \n  summarize(npart=n(),\n            avg_contacts = round(sum(contacts, na.rm=T) / npart, digits=2)) -&gt; dat_ag\n\ndat_ag$npart_true &lt;- c(660,661,713,685,879,815,908,906,728,270,65)\ndat_ag$avg_contacts_true &lt;- c(10.21,14.81, 18.22,17.58,13.57,14.14,13.83,12.30,9.21,6.89,9.63)\ndat_ag\n\n# A tibble: 11 × 5\n   age_grp npart avg_contacts npart_true avg_contacts_true\n     &lt;dbl&gt; &lt;int&gt;        &lt;dbl&gt;      &lt;dbl&gt;             &lt;dbl&gt;\n 1       0   660        10.2         660             10.2 \n 2       1   661        14.8         661             14.8 \n 3       2   713        18.2         713             18.2 \n 4       3   685        17.6         685             17.6 \n 5       4   879        13.6         879             13.6 \n 6       5   815        14.1         815             14.1 \n 7       6   908        13.8         908             13.8 \n 8       7   906        12.3         906             12.3 \n 9       8   728         9.21        728              9.21\n10       9   270         6.89        270              6.89\n11      99    65         9.63         65              9.63\n\n\nCategorize the household size\n\nclassify_hh &lt;- function(d){\n  d$hh_size_grp &lt;- ifelse(d$hh_size &gt; 4, 5, ifelse(!is.na(d$hh_size), d$hh_size, 99))\n  d\n}\ndat &lt;- classify_hh(dat)\n\nMake categorical variables factor for regression\n\n# set the categorical variables as factor for regression\ndat$age_grp &lt;- as.factor(dat$age_grp)\ndat$hh_size_grp &lt;- as.factor(dat$hh_size_grp)\ndat$gender &lt;- as.factor(dat$part_gender)\ndat$dayofweek &lt;- as.factor(dat$dayofweek)\ndata.table::fwrite(dat, \"POLYMOD_2017.csv\")\n\n\n\ndata for fitting only complete cases\n\ndat_ &lt;- dat\ndat &lt;- dat[complete.cases(dat),]\n# set the maximum number of contacts 29\ndat$contacts = ifelse(dat$contacts &gt; 29, 29, dat$contacts)\n\n\n\nNegBin regression\nNegative binomial regression was modeled using MASS::glm.nb function\n\nlibrary(MASS)\nm1 &lt;- glm.nb(contacts ~ age_grp, data = dat)\nsummary(m1)\n\n\nCall:\nglm.nb(formula = contacts ~ age_grp, data = dat, init.theta = 2.895747992, \n    link = log)\n\nCoefficients:\n            Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)  2.30861    0.02626  87.919  &lt; 2e-16 ***\nage_grp1     0.32714    0.03648   8.967  &lt; 2e-16 ***\nage_grp2     0.49578    0.03556  13.943  &lt; 2e-16 ***\nage_grp3     0.46119    0.03600  12.812  &lt; 2e-16 ***\nage_grp4     0.24010    0.03442   6.975 3.05e-12 ***\nage_grp5     0.28582    0.03483   8.206 2.29e-16 ***\nage_grp6     0.24679    0.03418   7.220 5.21e-13 ***\nage_grp7     0.14499    0.03429   4.228 2.35e-05 ***\nage_grp8    -0.09882    0.03656  -2.703  0.00687 ** \nage_grp9    -0.36270    0.05032  -7.208 5.66e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for Negative Binomial(2.8957) family taken to be 1)\n\n    Null deviance: 8055.6  on 7068  degrees of freedom\nResidual deviance: 7390.5  on 7059  degrees of freedom\nAIC: 47802\n\nNumber of Fisher Scoring iterations: 1\n\n              Theta:  2.8957 \n          Std. Err.:  0.0597 \n\n 2 x log-likelihood:  -47780.1930 \n\nexp(m1$coefficients)\n\n(Intercept)    age_grp1    age_grp2    age_grp3    age_grp4    age_grp5 \n 10.0604651   1.3869981   1.6417727   1.5859529   1.2713769   1.3308557 \n   age_grp6    age_grp7    age_grp8    age_grp9 \n  1.2799167   1.1560315   0.9059023   0.6957929 \n\nm5 &lt;- glm.nb(contacts ~ age_grp + gender + hh_size_grp + country + dayofweek, data = dat)\nsummary(m5)\n\n\nCall:\nglm.nb(formula = contacts ~ age_grp + gender + hh_size_grp + \n    country + dayofweek, data = dat, init.theta = 3.763576898, \n    link = log)\n\nCoefficients:\n             Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)   1.75583    0.19669   8.927  &lt; 2e-16 ***\nage_grp1      0.30090    0.03321   9.060  &lt; 2e-16 ***\nage_grp2      0.45196    0.03238  13.956  &lt; 2e-16 ***\nage_grp3      0.44934    0.03271  13.738  &lt; 2e-16 ***\nage_grp4      0.31340    0.03190   9.824  &lt; 2e-16 ***\nage_grp5      0.31068    0.03213   9.668  &lt; 2e-16 ***\nage_grp6      0.27568    0.03146   8.763  &lt; 2e-16 ***\nage_grp7      0.21717    0.03260   6.661 2.72e-11 ***\nage_grp8      0.03470    0.03617   0.959 0.337387    \nage_grp9     -0.19923    0.04890  -4.074 4.62e-05 ***\ngenderF      -0.01755    0.19240  -0.091 0.927340    \ngenderM      -0.02768    0.19241  -0.144 0.885592    \nhh_size_grp2  0.09645    0.02827   3.412 0.000646 ***\nhh_size_grp3  0.11854    0.02964   3.999 6.36e-05 ***\nhh_size_grp4  0.22913    0.02979   7.692 1.45e-14 ***\nhh_size_grp5  0.30497    0.03213   9.492  &lt; 2e-16 ***\ncountryDE    -0.31802    0.02839 -11.202  &lt; 2e-16 ***\ncountryFI    -0.01234    0.02921  -0.423 0.672627    \ncountryGB     0.02936    0.02918   1.006 0.314328    \ncountryIT     0.43331    0.02960  14.637  &lt; 2e-16 ***\ncountryLU     0.28600    0.02862   9.994  &lt; 2e-16 ***\ncountryNL     0.20892    0.04306   4.851 1.23e-06 ***\ncountryPL     0.25610    0.02860   8.956  &lt; 2e-16 ***\ndayofweek1    0.27813    0.02810   9.898  &lt; 2e-16 ***\ndayofweek2    0.32401    0.02758  11.747  &lt; 2e-16 ***\ndayofweek3    0.31329    0.02812  11.140  &lt; 2e-16 ***\ndayofweek4    0.31717    0.02774  11.434  &lt; 2e-16 ***\ndayofweek5    0.34216    0.02745  12.465  &lt; 2e-16 ***\ndayofweek6    0.14626    0.02887   5.066 4.07e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for Negative Binomial(3.7636) family taken to be 1)\n\n    Null deviance: 9794.6  on 7068  degrees of freedom\nResidual deviance: 7372.6  on 7040  degrees of freedom\nAIC: 46396\n\nNumber of Fisher Scoring iterations: 1\n\n              Theta:  3.7636 \n          Std. Err.:  0.0843 \n\n 2 x log-likelihood:  -46336.2000 \n\nexp(m5$coefficients)\n\n (Intercept)     age_grp1     age_grp2     age_grp3     age_grp4     age_grp5 \n   5.7882277    1.3510687    1.5713835    1.5672725    1.3680647    1.3643573 \n    age_grp6     age_grp7     age_grp8     age_grp9      genderF      genderM \n   1.3174272    1.2425566    1.0353045    0.8193574    0.9826079    0.9726948 \nhh_size_grp2 hh_size_grp3 hh_size_grp4 hh_size_grp5    countryDE    countryFI \n   1.1012549    1.1258570    1.2575100    1.3565872    0.7275872    0.9877342 \n   countryGB    countryIT    countryLU    countryNL    countryPL   dayofweek1 \n   1.0297905    1.5423491    1.3310865    1.2323420    1.2918884    1.3206527 \n  dayofweek2   dayofweek3   dayofweek4   dayofweek5   dayofweek6 \n   1.3826643    1.3679193    1.3732405    1.4079890    1.1575004"
  },
  {
    "objectID": "posts/apartment-data-api/index.html",
    "href": "posts/apartment-data-api/index.html",
    "title": "Apartment transactions in Korea via API provided by the Ministry of Land, Infrastructure, and Transport",
    "section": "",
    "text": "Data preparation\n\nlibrary(XML)\nlibrary(RCurl)\nlibrary(dplyr)\n\n# service_key &lt;- readRDS(\"data/apartment_key_datagokr.rds\")\nservice_key &lt;- readRDS(\"apartment_key_datagokr.rds\")\ndatlist &lt;- vector(\"list\", 12)\n\n# combine the data in 2022\nfor (m in 1:12){\n  if (m &lt; 10) {\n    dt &lt;- paste0(\"20220\", m)\n  } else {\n    dt &lt;- paste0(\"2022\", m)\n  } \n  uri &lt;- paste0(\"http://openapi.molit.go.kr/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMSDataSvcAptTradeDev?LAWD_CD=11110&DEAL_YMD=\", dt, \"&serviceKey=\", service_key)\n\n  xml_doc &lt;- xmlTreeParse(uri, useInternalNodes = TRUE, encoding = \"UTF-8\")\n  root_node &lt;- xmlRoot(xml_doc)\n  xml_data &lt;- xmlToDataFrame(nodes = getNodeSet(root_node, '//item'))\n\n  datlist[[m]] &lt;- xml_data\n}\n\nd &lt;- do.call('rbind', datlist)\n\nI will plot the price\n\n# million won\nd$price &lt;- as.numeric(gsub('\\\\,', \"\", d$거래금액)) / 100\nd$area_sq_meter &lt;- as.numeric(d$전용면적) # q\nd$area_category &lt;- NA\n\nfor(i in 1:nrow(d)) {\n  ar &lt;- d$area_sq_meter[i]\n  if(ar &lt; 50){\n    d$area_category[i] &lt;- \"&lt;50\"\n  }\n  else if(ar &gt;= 50 & ar &lt; 80) {\n    d$area_category[i] &lt;- \"50-80\"\n  }\n  else if(ar &gt;= 80 & ar &lt; 100) {\n    d$area_category[i] &lt;- \"80-100\"\n  }\n  else if(ar &gt;= 100) {\n    d$area_category[i] &lt;- \"&gt;100\"\n  }\n}\n\nd$area_category &lt;- factor(d$area_category, levels=c(\"&lt;50\", \"50-80\", \"80-100\",\"&gt;100\"))\n                             \nd$levels &lt;- as.numeric(d$층)\n\nlibrary(ggplot2)\n\nd |&gt; as.data.frame() |&gt; \n  ggplot()+\n  geom_point(aes(area_category, price, color=levels)) +\n  labs(x=parse(text=paste0(\"Area~(m^2)\")), y=\"Price (million won)\", color=parse(text=paste0(\"Levels\")))+\n  theme_bw()+\n  ggtitle(\"Apartment price in Jongno-gu, Seoul, 2022\") \n\n\n\n# ggsave(\"apt_price.png\", width=3.4*1.5, height=2.7*1.5, units=\"in\")"
  },
  {
    "objectID": "posts/rootsolve_optimize/index.html",
    "href": "posts/rootsolve_optimize/index.html",
    "title": "Final epidemic size: uniroot vs. optimize",
    "section": "",
    "text": "Final size of an epidemic\nMiller 2012 shows that the final size of an epidmic for a well-mixed population can be derived in the following way. We divide the population into susceptible, infected, and recovered fractions: \\(S(t), I(t), and R(t)\\) respectively. Assuming a large population, constant transmission and recovery rates, and mass action mixing, we have\n\\[\\dot{S}= -\\beta IS, ~\\dot{I}=\\beta IS -\\gamma I, ~\\dot{R}=\\gamma I\\] We can remove \\(\\dot{R}\\) since \\(S+I+R=1\\). From the equation, we can have the following relationship.\n\\[\\frac{dS}{dI}= -1 + \\frac{\\gamma}{\\beta S}\\] Solving this equation gives the following: \\[ I(t) = -S(t) + \\frac{\\gamma}{\\beta} \\text{ln} S(t) + C\\]\nWe can find \\(C=1\\) using the initial conditions (\\(I\\rightarrow 0, S\\rightarrow 0\\)). Then, using \\(I(\\infty)=0\\) gives the following relationship\n\\[S(\\infty) = 1 − \\text{exp}\\left[-R_0\\left(1-S(\\infty)\\right)\\right]\\] Using the \\(R(\\infty)=1-S(\\infty)\\), we can get the following equation for the final size of an epidemic, \\(R(\\infty)\\):\n\\[R(\\infty) = 1 − \\text{exp}\\left[-R_0R(\\infty)\\right]\\] Let’s use the above relationship to compute the final epidemic size nuerically\n\nfinal_size &lt;- function(R, R0){\n  R - 1 + exp(-R0*R)\n}\n# lower bound set at 0.1 to avoid R=0, which is also a solution\nuniroot(final_size, interval=c(0.1,1), R0=2)$root\n\n[1] 0.796811\n\ndf &lt;- data.frame(R0vec = c(1.1, seq(1.2, 4, by=0.1))) # as  \ndf$sizevec = sapply(df$R0vec, function(x) uniroot(final_size, interval=c(0.1,1), R0=x)$root)\n\nlibrary(ggplot2)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\n\nggplot(df, aes(R0vec, sizevec)) +\n  geom_line(linetype=\"dashed\")+\n  geom_point()+\n  labs(x=parse(text=\"R[0]\"), y=\"Final epidemic size\")\n\n\n\n# ggsave(\"epidemicsize_R.png\", p, units=\"in\", width=3.4, height=2.7)\n\nInstead of uniroot, optimize function can be used to find the solution for the above equation. However, optimize gives the correct answer when the function was squared.\n\noptimize(final_size, interval=c(0.1,1), R0=2)\n\n$minimum\n[1] 0.3465758\n\n$objective\n[1] -0.1534264\n\nfinal_size_sq &lt;- function(R, R0){\n  (R - 1 + exp(-R0*R))^2\n}\noptimize(final_size_sq, interval=c(0.1,1), R0=2)\n\n$minimum\n[1] 0.7968155\n\n$objective\n[1] 3.933157e-12"
  },
  {
    "objectID": "posts/branching_process/index.html",
    "href": "posts/branching_process/index.html",
    "title": "Branching process model",
    "section": "",
    "text": "Branching process model\nIn the branching process model, the number of secondary infections is realized as a random number (e.g., Poission or Negative binomial).\n\nset.seed(42)\nR0_mean &lt;- 2\npopsize = 1000 # population size for each iteration\nnrun &lt;- 1000 # number of iterations to compute the mean\noutbreaks &lt;- rep(NA, nrun) # to store outbreak size for each iteration\ninit_inf &lt;- 1 # initially infected people\n\nfor (r in seq_len(nrun)) {\n  pop &lt;- data.frame(id=1:popsize)\n  pop$status &lt;- \"S\"\n  pop$status[1:init_inf] &lt;- \"I\"\n  nS &lt;- sum(pop$status == \"S\")\n  nI &lt;- sum(pop$status == \"I\")\n  N &lt;- nrow(pop)\n  cnt &lt;- init_inf + 1 # infecteds are placed from the first position\n  while (nI &gt; 0 & nS &gt; 0) {\n    row &lt;- which(pop$status == \"I\")\n    nI &lt;- length(row)\n    for (i in seq_len(nI)) {\n      pop$status[row[i]] &lt;- \"R\"\n      offspring &lt;- rpois(1, lambda=R0_mean*nS/N)\n      nS = nS - offspring\n      for (k in seq_len(offspring)) {\n        pop$status[cnt] &lt;- \"I\" \n        cnt &lt;- cnt + 1\n      }\n    }\n  }\n  outbreaks[r] = popsize - sum(pop$status == \"S\")\n}\n\nhist(outbreaks) # minor and major outbreaks\n\n\n\nsum(outbreaks&gt;200)/nrun # freq of major outbreaks\n\n[1] 0.792\n\nmean(outbreaks[outbreaks&gt;200])/popsize # outbreak size of the only major outbreaks\n\n[1] 0.7966742\n\nmax(outbreaks) # maximum outbreak size\n\n[1] 853\n\n\n\n\nFinal epidemic size\nTo make sure that my branching process model makes sense, let’s compare the final size of an epidemic. As shown in the previous post, for the \\(SIR\\) model in a well-mixed population, the final epidemic size, \\(R(\\infty)\\) is given as follows: \\[R(\\infty) = 1 − \\text{exp}\\left[-R_0R(\\infty)\\right]\\]\n\n# final size of an epidemic, R\nfinal_size &lt;- function(R, R0){\n  R - 1 + exp(-R0*R)\n}\n# lower bound set at a positive number to avoid R=0, which is also a solution\nuniroot(final_size, interval=c(1e-3,1), R0=R0_mean)$root\n\n[1] 0.7968115\n\n\n\n\nNegative binomial distribution\nWhat would happen if I allow the negative binomial distribution for the offspring\n\nset.seed(42)\nR0_mean &lt;- 2\nR0_size &lt;- 0.2 # loosely based on the estimate for Ebola (see Kucharski et al. 2016 https://wwwnc.cdc.gov/eid/article/22/1/15-1410_article)\npopsize = 1000 # population size for each iteration\nnrun &lt;- 1000 # number of iterations to compute the mean\noutbreaks &lt;- rep(NA, nrun) # to store outbreak size for each iteration\ninit_inf &lt;- 1 # initially infected people\n\nfor (r in seq_len(nrun)) {\n  pop &lt;- data.frame(id=1:popsize)\n  pop$status &lt;- \"S\"\n  pop$status[1:init_inf] &lt;- \"I\"\n  nS &lt;- sum(pop$status == \"S\")\n  nI &lt;- sum(pop$status == \"I\")\n  N &lt;- nrow(pop)\n  cnt &lt;- init_inf + 1 # infecteds are placed from the first position\n  while (nI &gt; 0 & nS &gt; 0) {\n    row &lt;- which(pop$status == \"I\")\n    nI &lt;- length(row)\n    for (i in seq_len(nI)) {\n      pop$status[row[i]] &lt;- \"R\"\n      offspring &lt;- rnbinom(1, mu=R0_mean*nS/N, size=R0_size)\n      nS = nS - offspring\n      for (k in seq_len(offspring)) {\n        pop$status[cnt] &lt;- \"I\" \n        cnt &lt;- cnt + 1\n      }\n    }\n  }\n  outbreaks[r] = popsize - sum(pop$status == \"S\")\n}\n\nhist(outbreaks) # minor and major outbreaks\nsum(outbreaks&gt;200)/nrun # freq of major outbreaks\nmean(outbreaks[outbreaks&gt;200])/popsize # only major outbreaks\nmax(outbreaks) # maximum outbreak size"
  },
  {
    "objectID": "posts/branching_process2/index.html",
    "href": "posts/branching_process2/index.html",
    "title": "Branching process model 2",
    "section": "",
    "text": "Branching process model\nIn the branching process model, the number of secondary infections is realized as a random number (e.g., Poission or Negative binomial).\n\nR0_mean &lt;- 2\npopsize = 1000 # population size for each iteration\nnrun &lt;- 1000 # number of iterations to compute the mean\noutbreaks &lt;- vector(\"list\", nrun) # to store outbreak size for each iteration\ninit_inf &lt;- 1 # initially infected people\n\nfor (r in 1:nrun) {\n  pop &lt;- data.frame(id=1:popsize)\n  pop$status &lt;- \"S\"\n  pop$status[1:init_inf] &lt;- \"I\"\n  pop$run_id &lt;- r\n  pop$time_inf &lt;- NA\n  pop$time_inf[1:init_inf] &lt;- 0\n  nS &lt;- sum(pop$status == \"S\")\n  nI &lt;- sum(pop$status == \"I\")\n  N &lt;- nrow(pop)\n  cnt &lt;- init_inf + 1 # infecteds are placed from the first position\n  while (nI &gt; 0 & nS &gt; 0) {\n    row &lt;- which(pop$status == \"I\")\n    nI &lt;- length(row)\n    for (i in seq_len(nI)) {\n      # cat(\"i =\", i, \"\\n\")\n      pop$status[row[i]] &lt;- \"R\"\n      offspring &lt;- rpois(1, lambda=R0_mean*nS/N)\n      nS = nS - offspring\n      for (k in seq_len(offspring)) {\n        pop$status[cnt] &lt;- \"I\"\n        pop$time_inf[cnt] &lt;- pop$time_inf[row[i]] + \n          rgamma(1, shape=2, rate=1/3)\n        cnt &lt;- cnt + 1\n      }\n    }\n  }\n  outbreaks[[r]] &lt;- pop\n}\n\noutbreak_size &lt;- sapply(outbreaks, function(x) nrow(x) - sum(x$status==\"S\"))\nhist(outbreak_size) # minor and major outbreaks\nmajor_outbreaks = outbreak_size &gt; 200\nmean(outbreak_size[major_outbreaks])/popsize # only major outbreaks\n\n[1] 0.7960679\n\noutbks = purrr::list_rbind(outbreaks)\nlibrary(tidyverse)\n\n\n\noutbks[major_outbreaks,] |&gt; \n  filter(!is.na(time_inf)) |&gt; \n  ggplot()+\n    geom_histogram(aes(x=time_inf))"
  },
  {
    "objectID": "posts/interval-censoring/index.html",
    "href": "posts/interval-censoring/index.html",
    "title": "Estimating serial interval: interval cenoring",
    "section": "",
    "text": "Vanilla maximum likelihood estimation\nSuppose dates of onsets of infectors, \\(t^{A}\\), and infectees, \\(t^{B}\\), are given as specific dates. Then the likelihood function for the serial interval may be written down as follows:\n\\[\\mathcal{L} = \\prod_{i=1}^{n} f(t^{B}_i - t^\n{A}_i)\\] , where \\(f\\) is a probability density function for the serial interval, which we assume follows a Gamma distribution.\n\nset.seed(42)\nn &lt;- 100\nshape_true &lt;- 2.2\nscale_true &lt;- 3.3\n\nonset_infector &lt;- sample(20:30, size=n, replace=TRUE)\nonset_infectee &lt;- onset_infector + rgamma(n, shape=shape_true, scale=scale_true)\nnll &lt;- function(parms, x) -sum(dgamma(x, shape=parms[[1]], scale=parms[[2]], log=TRUE))\nres1 = optim(par=c(1,2), fn=nll, x=onset_infectee - onset_infector, method = \"Nelder-Mead\",\n            control = list(maxit=2e4, reltol=1e-15))\n\n\n\nMLE with interval censoring\nNow suppose that the dates of onset of the infectors are given as intervals. In this case, the above likelihood function may be modified as follows:\n\\[\\mathcal{L} = \\prod_{i=1}^{n} \\int_{t^{A}_{Li}}^{t^{A}_{Ri}} g(\\tau) f(t^{B}_i-\\tau) ~\\text{d}\\tau\\] , where \\(t^A_L, t^A_R, t^B\\) present the times for lower end and upper end of the interval for the time of onset of the infector, and the onset time of the infectee, respectively. \\(g(x)\\) represents the probability density function for the time of symptom onset of the infector, which we assume follows a uniform distribution.\nThis is a simplified version of doubly interval-censored data analysis, which was discussed by Reich et al 2009. The same concept has recently been applied to estimation of serial interval of CVODI-19 by Nishiura et al. 2020. I will cover the doubly interval-censored data in a future post.\n\nset.seed(42)\nL &lt;- - sample(1:5, n, replace=TRUE)\nR &lt;- - 4*L # this will lead to potentially shorter serial interval\nAL &lt;- onset_infector + L\nAR &lt;- onset_infector + R\n\n# x\nnll_interval_censor &lt;- function(parms, AL, AR, t){\n  -sum(log(dunif(AL, min=AL, max=AR)*(pgamma(t-AL, shape=parms[[1]], scale=parms[[2]]) - pgamma(t-AR, shape=parms[[1]], scale=parms[[2]]))))\n}\n\nres2 = optim(par=c(1,2), fn=nll_interval_censor, AL=AL, AR=AR, t=onset_infectee, method = \"Nelder-Mead\",\n            control = list(maxit=2e4, reltol=1e-15))\n\nx1 &lt;- rgamma(1e3, shape=res1$par[[1]], scale=res1$par[[2]])\nx2 &lt;- rgamma(1e3, shape=res2$par[[1]], scale=res2$par[[2]])\nsummary(x1)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.1677  3.7743  6.2386  7.3706 10.0134 36.0535 \n\nsummary(x2)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n 0.05973  2.01266  3.88932  4.85497  6.77875 20.17723 \n\ndf = data.frame(model=rep(c(\"No censoring\", \"Interval censoring\"), each=1e3), val=c(x1,x2))\n\nlibrary(ggplot2)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\n\ndf |&gt; ggplot(aes(x=val, fill=model))+\n  geom_density(alpha=0.2) +\n  labs(x=\"value\", y=\"density\")+\n  theme(legend.position = \"bottom\", \n        legend.title = element_blank())"
  },
  {
    "objectID": "posts/double-interval-censoring/index.html",
    "href": "posts/double-interval-censoring/index.html",
    "title": "Estimating serial interval: doubly interval-censored data",
    "section": "",
    "text": "We start simple. Our task is to estimate parameters of a probability density function used to model the serial interval. Suppose dates of onsets of infectors, \\(A\\), and infectees, \\(B\\), are given as specific dates. Then the likelihood function for the serial interval may be written down as follows:\n\\[\\mathcal{L}(X;\\theta) = \\prod_{i=1}^{n} f_{\\theta}(B_i - A_i)\\], where \\(f\\) is the probability density function for the serial interval with the unknown parameters, \\(\\theta\\).\nNow suppose that the dates of symptom onset of the infectors are given as intervals. We can use the following argument also for the case where dates of symptom onset of the infectees are given as intervals. In this case, the above likelihood function may be modified as follows:\n\\[\\mathcal{L}(X;\\theta) = \\prod_{i=1}^{n} \\int_{A^L_i}^{A^R_i} f_{\\theta}(B_i-a) ~\\text{d}a\\] , where \\(A^L, A^R, B\\) present the times for lower end and upper bound on the potential dates of symptom onset of the infector, and the symptom onset time of the infectee, respectively.\nNow suppose that both the dates of onset of the infectors and infectees are given as intervals. This is so called the doubly interval-censored data discussed by Reich et al 2009. The likelihood function may be given as follows:\n\\[\\mathcal{L}(X;\\theta,\\lambda) = \\prod_{i=1}^{n} \\int_{A^L_i}^{A^R_i} \\int_{B^L_i}^{B^R_i} h_{\\lambda}(a) f_{\\theta}(b-a) ~\\text{d}b \\text{d}a\\] , where \\(A^L, A^R, B^L, B^R\\) present the times for left and right boundaires on the possible onset times of the infector, \\(A\\), and the infectee, \\(B\\), respectively. \\(h_{\\lambda}(x)\\) represents the probability density function for the time of symptom onset of the infector, which we assume follows a uniform distribution.\nMore detailed analyses of doubly interval-censored data were discussed by Reich et al 2009. The same concept has recently been applied to estimation of serial interval of CVODI-19 by Nishiura et al. 2020.\nIn the following codes, we create the fake data set and add intervals such that the serial intervals may become shorter.\n\nset.seed(42)\nn &lt;- 100\nshape_true &lt;- 2.2\nscale_true &lt;- 3.3\n\nonset_infector &lt;- sample(20:30, size=n, replace=TRUE)\nonset_infectee &lt;- onset_infector + rgamma(n, shape=shape_true, scale=scale_true)\nnll &lt;- function(parms, x) -sum(dgamma(x, shape=parms[[1]], scale=parms[[2]], log=TRUE))\nres1 = optim(par=c(1,2), fn=nll, x=onset_infectee - onset_infector, method = \"Nelder-Mead\",\n            control = list(maxit=2e4, reltol=1e-15))\n\n# singly interval-censored data\ntau &lt;- sample(1:5, n, replace=TRUE)\nAL &lt;- onset_infector \nAR &lt;- onset_infector + 2*tau # this will lead to shorter serial interval\n\nnll_single_censor &lt;- function(parms, AL, AR, B){\n  -sum(log(pgamma(B-AL, shape=parms[[1]], scale=parms[[2]]) - pgamma(B-AR, shape=parms[[1]], scale=parms[[2]])))\n}\n\nres2 = optim(par=c(1,2), fn=nll_single_censor, AL=AL, AR=AR, \n             B=onset_infectee, method=\"Nelder-Mead\",\n            control = list(maxit=2e4, reltol=1e-15))\n\n# doubly interval-censored data\nBL &lt;- onset_infectee - 2*tau # this will lead to even shorter serial interval\nBR &lt;- onset_infectee\n\nnll_double_censor &lt;- function(parms, AL, AR, BL, BR){\n  -sum(log(dunif(AL, min=AL, max=AR)*(pgamma(BR-AL, shape=parms[[1]], scale=parms[[2]]) - pgamma(BL-AR, shape=parms[[1]], scale=parms[[2]]))))\n}\n\nres3 = optim(par=c(1,2), fn=nll_double_censor, AL=AL, AR=AR,\n             BL=BL, BR=BR, method=\"Nelder-Mead\",\n            control=list(maxit=2e4, reltol=1e-15))\n\nx1 &lt;- rgamma(1e3, shape=res1$par[[1]], scale=res1$par[[2]])\nx2 &lt;- rgamma(1e3, shape=res2$par[[1]], scale=res2$par[[2]])\nx3 &lt;- rgamma(1e3, shape=res3$par[[1]], scale=res3$par[[2]])\nsummary(x1)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.1677  3.8165  6.4303  7.5411 10.3268 36.0535 \n\nsummary(x2)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n 0.03203  1.37089  3.37988  4.70497  6.48863 38.89572 \n\nsummary(x3)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n 0.00001  0.36330  1.48009  2.92934  4.04038 46.12810 \n\ndf = data.frame(model=rep(c(\"No censoring\", \"Singly interval-censored\",\n                            \"Doubly interval-censored\"), each=1e3),\n                val=c(x1,x2, x3))\n\nlibrary(ggplot2)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\n\ndf |&gt; ggplot(aes(x=val, fill=model))+\n  geom_density(alpha=0.2) +\n  labs(x=\"value\", y=\"density\")+\n  theme(legend.position = \"bottom\", \n        legend.title = element_blank())\n\n\n\n# ggsave(\"double_interval_censor.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)"
  },
  {
    "objectID": "posts/right-truncation/index.html",
    "href": "posts/right-truncation/index.html",
    "title": "Estimating serial interval for a growing epidemic",
    "section": "",
    "text": "In this case, the above likelihood function may be modified as follows:\n\\[\\mathcal{L}(X;\\theta) = \\prod_{i=1}^{n} f_{\\theta}(B_i-A_i)\\] , where \\(A^L, A^R, B\\) present the times for lower end and upper bound on the potential dates of symptom onset of the infector, and the symptom onset time of the infectee, respectively.\n\\[f^t_{\\theta}(B_i-A_i) = \\frac{f_{\\theta}(B_i-A_i)}{F(T-A_i)}\\]\n\nset.seed(42)\nn &lt;- 1000\nshape_true &lt;- 2.2\nscale_true &lt;- 3.3\n\ndf &lt;- data.frame(A=sample(0:30, size=n, replace=TRUE))\nsi &lt;- rgamma(n, shape=shape_true, scale=scale_true)\ndf$B &lt;- df$A + si\nmax(df$B)\n\n[1] 57.03661\n\nsummary(df$B)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.3967 13.9763 22.4103 22.4031 30.3811 57.0366 \n\nTmax &lt;- 35\nunder_Tmax &lt;- df$B &lt; Tmax\n\nnewdf &lt;- df[under_Tmax,]\n\nnll &lt;- function(parms, A, B) -sum(dgamma(B-A, shape=parms[[1]], scale=parms[[2]], log=TRUE))\nres1 = optim(par=c(1,2), fn=nll, A=newdf$A, B=newdf$B,\n             method = \"Nelder-Mead\",\n            control = list(maxit=2e4, reltol=1e-15))\nres1\n\n$par\n[1] 2.366494 2.735134\n\n$value\n[1] 2389.103\n\n$counts\nfunction gradient \n     101       NA \n\n$convergence\n[1] 0\n\n$message\nNULL\n\nnll_right_trunc &lt;- function(parms, A, B, Tmax) -sum(log(dgamma(B-A, shape=parms[[1]], scale=parms[[2]])/pgamma(Tmax-A, shape=parms[[1]], scale=parms[[2]])))\n\nres2 = optim(par=c(1,2), \n             fn=nll_right_trunc, \n             A=newdf$A, \n             B=newdf$B,\n             Tmax=Tmax,\n             method = \"Nelder-Mead\",\n             control = list(maxit=2e4, reltol=1e-15))\nres2\n\n$par\n[1] 2.230993 3.230118\n\n$value\n[1] 2317.955\n\n$counts\nfunction gradient \n     115       NA \n\n$convergence\n[1] 0\n\n$message\nNULL\n\nn &lt;- 1e5\nx1 &lt;- rgamma(n, shape=res1$par[[1]], scale=res1$par[[2]])\nx2 &lt;- rgamma(n, shape=res2$par[[1]], scale=res2$par[[2]])\n\nsummary(x1)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n 0.01066  3.36629  5.58653  6.47582  8.62659 44.32536 \n\nsummary(x2)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0263  3.6574  6.1697  7.2078  9.6218 43.8174 \n\ndf = data.frame(model=rep(c(\"No truncation\", \"Right truncated\"), each=n), val=c(x1,x2))\n\nlibrary(ggplot2)\nextrafont::loadfonts()\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\n\ndf |&gt; ggplot(aes(x=val, fill=model))+\n  geom_density(alpha=0.2) +\n  labs(x=\"value\", y=\"density\")+\n  theme(legend.position = \"bottom\", \n        legend.title = element_blank())\n\n\n\n# ggsave(\"right_trunc.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)"
  },
  {
    "objectID": "posts/right-truncation2/index.html",
    "href": "posts/right-truncation2/index.html",
    "title": "Estimating a time-to-event distribution from right-truncated data",
    "section": "",
    "text": "Seamen writes: Data on time to an event are said to be right truncated if they come from a set of individuals who have been randomly sampled from a population using a sampling mechanism that selects only individuals who have experienced the event by a given time, called the truncation time.\nThe analysis of right-truncated data requires statistical methods that account for the fact that each of the sampled individuals must have experienced the final event by their truncation time.\nLet’s assume that we are interested in estimating the serial interval and let \\(X\\) and \\(Y\\) denote the times of symptom onset of the infector and the infectee, with \\(0\\leq X \\leq Y\\). Let \\(T=Y-X\\) denote the serial interval. Let \\(f_T^∗(t)\\) and \\(F_T^∗(t)\\) denote, respectively, the probability density (or mass) function of \\(T\\) and the distribution function of \\(T\\). We obtain an i.i.d. sample, \\((x_1, t_1), . . . , (x_n, t_n)\\), from the probability distribution of \\((X, T)\\) given \\(X + T ≤ \\tau\\) for some \\(\\tau &gt; 0\\).\n\\[f_{X, T}(x,t|X+T \\leq \\tau) = \\frac{f_X(x) f^*_T(t)I(x+t \\leq \\tau)}{\\int_0^{\\tau} f_X(x') F^*_T(\\tau-x')\\text{d}x'}\\] , where \\(f_X (x)\\) denotes the conditional probability density (or mass) function of \\(X\\) given \\(X \\leq \\tau\\), and \\(I(\\cdot)\\) denotes the indicator function. If \\(X\\) and \\(T\\) are discrete, we shall assume, without loss of generality, that \\(\\tau\\) is an integer. We should like to estimate \\(F^∗_T(t)\\)\nIf we assume no truncation (i.e., \\(F^*_T(\\tau-x)=1~ \\forall x\\))\n\nDuring an initial period of an epidemic\nSeamen provides two approaches to formulating a likelihood that can be applied during the initial period of an epidemic. The first approach is: \\[f_X (x;r) =  \\frac{\\text{exp}(rx)}{\\int_0^{\\tau}\\text{exp}(rs)ds }=\\frac{r\\text{exp}(rx)}{\\text{exp}(r\\tau) - 1 } \\propto \\text{exp}(rx)\\], and \\(T \\sim \\text{Gamma}(\\theta_1, \\theta_2)\\).\n\n\nExperiment\nLet’s first create samples where infectees (\\(X\\)) are created through a non-homogeneous Poisson process where rate, \\(h\\), is modeled as an exponential growth with a rate, \\(r\\), (i.e., \\(h=\\text{exp}(rt)\\).\n\nset.seed(42)\nn &lt;- 1000\ntmax &lt;- 30 # first events that happened only before time 30\nr &lt;- 0.14 # growth rate\nX &lt;- vector(\"double\", n)\ni &lt;- 1\nct &lt;- 0\n# generate sample through a nonhomogeneous Poisson process\nwhile (ct &lt; tmax) {\n  t &lt;- rexp(1, rate=exp(r*ct))\n  ct &lt;- ct + t\n  X[i] &lt;- ct\n  i &lt;- i+1\n}\nX &lt;- X[X &gt; 0]\n\n# parameters for the serial interval\nshape_true &lt;- 2.2\nscale_true &lt;- 3.3\n\ndf &lt;- data.frame(X=X)\nsi &lt;- rgamma(length(X), shape=shape_true, scale=scale_true)\ndf$Y &lt;- df$X + si\n\ntmax &lt;- 33 # truncation time\nunder_tmax &lt;- df$Y &lt; tmax \nnewdf &lt;- df[under_tmax,]\n\nnll &lt;- function(parms, X, Y) -sum(dgamma(Y-X, shape=parms[[1]], scale=parms[[2]], log=TRUE))\nres1 = optim(par=c(1,2), fn=nll, X=newdf$X, Y=newdf$Y,\n             method = \"Nelder-Mead\",\n            control = list(maxit=2e4, reltol=1e-15))\n\n# \nnll_right_trunc &lt;- function(parms, X, Y, tmax) -sum(log(dgamma(Y-X, shape=parms[[1]], scale=parms[[2]])/pgamma(tmax-X, shape=parms[[1]], scale=parms[[2]])))\n\n# the following would not work. why?\n# nll_right_trunc &lt;- function(parms, X, Y, tmax) -sum(log(dgamma(Y-X, shape=parms[[1]], scale=parms[[2]])/pgamma(tmax, shape=parms[[1]], scale=parms[[2]])))\n\nres2 = optim(par=c(1,2), \n             fn=nll_right_trunc, \n             X=newdf$X, \n             Y=newdf$Y,\n             tmax=tmax,\n             method = \"Nelder-Mead\",\n             control = list(maxit=2e4, reltol=1e-15))\n\n\n\nExponential growth for \\(X\\)\n\nnumerator_func &lt;- function(x, y, parms){\n  exp(r*x)*dgamma(y-x, shape=parms[[1]], scale=parms[[2]])\n}\n\n# using the full probability density function\n# numerator_func &lt;- function(x, y, parms){\n#   exp(r*x)/(exp(r*tmax)-1)*dgamma(y-x, shape=parms[[1]], scale=parms[[2]])\n# }\n\n# uniform distribution - same as the vanilla truncation assumption\n# numerator_func &lt;- function(x, y, parms){\n#   dgamma(y-x, shape=parms[[1]], scale=parms[[2]])\n# }\n\n# NB: x is not used in this formuation but is included as params to make consistent w/ other alternative formulations\ndenominator_func &lt;- function(t, x, parms, tmax) {\n  exp(r*t)*pgamma(tmax-t, shape=parms[[1]], scale=parms[[2]])\n}\n\n# the following would not give the correct answer. why?\n# denominator_func &lt;- function(t, x, parms, tmax) {\n#   exp(r*t)*pgamma(tmax-x-t, shape=parms[[1]], scale=parms[[2]])\n# }\n\n# same as the vanialla truncation model\n# denominator_func &lt;- function(t, x, parms, tmax) {\n#   dgamma(tmax-x-t, shape=parms[[1]], scale=parms[[2]])\n# }\n\n# single likelihood\nll_right_trunc_exp_growth &lt;- function(parms,x,y,tmax){\n  log(numerator_func(x=x, y=y, parms=parms)) - log(integrate(denominator_func,lower=0, upper=tmax, x=x, parms=parms, tmax=tmax)$value)\n}\n\n# sum of negative log likelihoods\nnll_right_trunc_exp_growth &lt;- function(parms, X, Y, tmax){\n  sll &lt;- 0\n  for(i in seq_along(X)) {\n    sll &lt;- sll + ll_right_trunc_exp_growth(parms=parms,x=X[i],y=Y[i],tmax=tmax)\n  }\n  return(-sll)\n}\n\nres3 = optim(par=c(1,2), \n             fn=nll_right_trunc_exp_growth, \n             X=newdf$X, \n             Y=newdf$Y,\n             tmax=tmax,\n             method = \"Nelder-Mead\",\n             control = list(maxit=2e4, reltol=1e-15))\n\nparmdf &lt;- data.frame(true = c(shape_true, scale_true, shape_true*scale_true))\nparmdf$no_trunc &lt;- c(res1$par, prod(res1$par))\nparmdf$trunc &lt;- c(res2$par, prod(res2$par))\nparmdf$trunc_exp_growth &lt;- c(res3$par, prod(res3$par))\n\nparmdf\n\n  true no_trunc    trunc trunc_exp_growth\n1 2.20 2.115872 1.932797         2.100084\n2 3.30 2.273549 3.684688         3.427339\n3 7.26 4.810538 7.121754         7.197701\n\n\nParameter estimates based on the methods that account for right truncation and exponential growth appear to match better with the true values than the those based on the method that accounts only for right truncation.\n\n\nPlot\nLet’s plot the distribution\n\nn &lt;- 1e5\nx0 &lt;- rgamma(n, shape=shape_true, scale=scale_true)\nx1 &lt;- rgamma(n, shape=res1$par[[1]], scale=res1$par[[2]])\nx2 &lt;- rgamma(n, shape=res2$par[[1]], scale=res2$par[[2]])\nx3 &lt;- rgamma(n, shape=res3$par[[1]], scale=res3$par[[2]])\n\ndf = data.frame(model=rep(c(\"True\",\"No truncation\", \"Right truncated\", \"Right truncated, exp growth\"), each=n), val=c(x0,x1,x2,x3))\n\nlibrary(ggplot2)\nextrafont::loadfonts()\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\n\ndf |&gt; ggplot(aes(x=val, fill=model))+\n  geom_density(alpha=0.2) +\n  labs(x=\"value\", y=\"density\")+\n  theme(legend.position = \"bottom\", \n        legend.title = element_blank())\n\n\n\n# ggsave(\"right_trunc2.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)"
  },
  {
    "objectID": "posts/truncation-in-stan/index.html",
    "href": "posts/truncation-in-stan/index.html",
    "title": "Estimating a time-to-event distribution in Stan",
    "section": "",
    "text": "Stan instead of optim\nAs in the previous post, let’s create a sample through a non-homogeneous process for the infection events and a Gamma distribution for the serial (or generation) interval.\n\nset.seed(42)\nn &lt;- 1000\ntmax &lt;- 30 # maximum time of first event\nr &lt;- 0.14 # growth rate\nX &lt;- vector(\"double\", n)\ni &lt;- 1\nct &lt;- 0\n# generate sample through a nonhomogeneous Poisson process\nwhile (ct &lt; tmax) {\n  t &lt;- rexp(1, rate=exp(r*ct))\n  ct &lt;- ct + t\n  X[i] &lt;- ct\n  i &lt;- i+1\n}\nX &lt;- X[X &gt; 0]\n\n# parameters for the serial interval\nshape_true &lt;- 2.2\nscale_true &lt;- 3.3\n\ndf &lt;- data.frame(X=X)\nsi &lt;- rgamma(length(X), shape=shape_true, scale=scale_true)\ndf$Y &lt;- df$X + si\n\ntau &lt;- 33 # truncation time\nunder_tau &lt;- df$Y &lt; tau \nnewdf &lt;- df[under_tau,]\n\nnumerator_func &lt;- function(x, y, parms){\n  exp(r*x)*dgamma(y-x, shape=parms[[1]], scale=parms[[2]])\n}\n\ndenominator_func &lt;- function(t, parms, tmax) {\n  exp(r*t)*pgamma(tmax-t, shape=parms[[1]], scale=parms[[2]])\n}\n\n# single likelihood\nll_right_trunc_exp_growth &lt;- function(parms,x,y,tmax){\n  log(numerator_func(x=x, y=y, parms=parms)) - log(integrate(denominator_func,lower=0, upper=tmax, parms=parms, tmax=tmax)$value)\n}\n\n# sum of negative log likelihoods\nnll_right_trunc_exp_growth &lt;- function(parms, X, Y, tmax){\n  sll &lt;- 0\n  for(i in seq_along(X)) {\n    sll &lt;- sll + ll_right_trunc_exp_growth(parms=parms,x=X[i],y=Y[i],tmax=tmax)\n  }\n  return(-sll)\n}\n\nres_optim = optim(par=c(1,2), \n             fn=nll_right_trunc_exp_growth, \n             X=newdf$X, \n             Y=newdf$Y,\n             tmax=tmax,\n             method = \"Nelder-Mead\",\n             control = list(maxit=2e4, reltol=1e-15))\n\n\nStan program\nGamma distribution accounting for truncation\n\nstan_code &lt;- \"\ndata {\n    int&lt;lower = 0&gt; N; // number of records\n    vector&lt;lower = 0&gt;[N] X;\n    vector&lt;lower = 0&gt;[N] Y;\n    real tau;\n}\n\nparameters {\n    real shape;\n    real scale;\n}\n\nmodel {\n    shape ~ exponential(0.1);\n    scale ~ exponential(0.1);\n    target += gamma_lpdf(Y - X | shape, 1/scale) - gamma_lcdf(tau-X | shape, 1/scale);\n}\"    \n\nGamma distribution accounting for truncation and exponential growth of infections\n\nstan_code &lt;- \"\nfunctions {\n  real denominator_density(real x,\n                           real xc,                \n                           array[] real theta,     \n                           array[] real x_r,                        \n                           array[] int x_i){\n    real shape = theta[1];\n    real scale = theta[2];\n  \n    return exp(0.14 * x) * gamma_cdf(33 - x, shape, 1/scale);\n  }\n}\ndata {\n    int&lt;lower = 0&gt; N; // number of records\n    vector&lt;lower = 0&gt;[N] X;\n    vector&lt;lower = 0&gt;[N] Y;\n    real tau;\n    real r;\n}\n\ntransformed data{     \n  array[0] real x_r;\n  array[0] int x_i;  \n} \n\nparameters {\n    real shape;\n    real scale;\n}\n\ntransformed parameters {\n  vector[N] log_exp_r;\n  for (n in 1:N)\n    log_exp_r[n] = log(exp(r*X[n]));\n}\n\nmodel {\n    shape ~ exponential(0.1);\n    scale ~ exponential(0.1);\n    \n    for (i in 1:N)\n      target += log(exp(r*X[i])) + gamma_lpdf(Y[i] - X[i] | shape, 1/scale) -                          log(integrate_1d(denominator_density, 0, tau,\n                           {shape, scale}, x_r, x_i, 1e-2));\n     \n}\"\n\n\n\nCompile and sample\nintegrate_1d(denominator_density, 0, tau, {shape, scale}, x_r, x_i, 1e-3) cause errors. Four of the two samplers generated samples if the rel_tol is increased to 1e-2 for seed=42.\n\nlibrary(rstan)\noptions(mc.cores = parallel::detectCores())\nrstan_options(auto_write = TRUE)\nmod &lt;- stan_model(model_code=stan_code, verbose=TRUE)\ndata &lt;- list(N=nrow(newdf), X=newdf$X, Y=newdf$Y, tau=tau, r=r)\n# smp &lt;- sampling(object=mod, data=data, seed=33, chains=4, iter=2000)\n# saveRDS(smp, \"stan_trunc_smp_20231124.rds\")\n\nLet’s explore the posterior distribution.\n\nsmp &lt;- readRDS(\"stan_trunc_smp_20231124.rds\")\ndf &lt;- as.data.frame(smp)\npr &lt;- c(0.5,0.025,0.975)\nd &lt;- as.data.frame(t(apply(df[,c(\"shape\", \"scale\")],\n                           2, quantile, probs=pr)))\n\nd$name &lt;- c(\"shape\", \"scale\")\nd$true &lt;- c(shape_true, scale_true)\nd$optim &lt;- res_optim$par\nd\n\n           50%     2.5%    97.5%  name true    optim\nshape 2.085903 1.760453 2.448298 shape  2.2 2.090817\nscale 3.484215 2.680270 4.770225 scale  3.3 3.482427\n\n\nLet’s plot the results.\n\nlibrary(ggplot2)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\nextrafont::loadfonts()\nggplot(d)+ \n  geom_errorbar(aes(x=name, ymin=`2.5%`, ymax=`97.5%`), width=0.0)+\n  geom_point(aes(x=name, y=`50%`, color=\"Stan\"), size=3)+\n  geom_point(aes(x=name, y=true, col=\"True value\"), size=3)+\n  geom_point(aes(x=name, y=optim, col=\"Optim\"), size=3)+\n  scale_color_manual(values=c(\"Stan\"=\"black\",\n                              \"True value\"=\"firebrick\", \"Optim\"=\"steelblue\"))+\n  labs(x=\"\", y=\"\", title=\"Median estimates with 95% CrI\")+\n  theme(legend.position=\"bottom\", legend.title=element_blank())+\n  scale_x_discrete(breaks=c(\"shape\",\"scale\"),\n                   labels=c(expression(theta[1]),expression(theta[2])))+\n  coord_flip()\n\n\n\n# ggsave(\"right_trunc_stan.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)\n\n\nd &lt;- df[, c(\"shape\",\"scale\")]\ndlong &lt;- tidyr::pivot_longer(d, cols=c(\"shape\",\"scale\"),\n                             names_to=\"param\")        \ndlong$param &lt;- as.factor(dlong$param)\nlibrary(dplyr)\nggplot(dlong)+ \n  geom_histogram(aes(x=value))+\n  facet_wrap(~param, nrow=1, scales = \"free_x\")+\n  geom_vline(data=filter(dlong, param ==\"shape\"), aes(xintercept=shape_true), color=\"firebrick\", linewidth=1.2) +\n  geom_vline(data=filter(dlong, param ==\"scale\"), aes(xintercept=scale_true), color=\"firebrick\", linewidth=1.2)"
  },
  {
    "objectID": "posts/importance-sampling/index.html",
    "href": "posts/importance-sampling/index.html",
    "title": "Importance sampling",
    "section": "",
    "text": "Importance sampling\nImportance sampling is a Monte Carlo method for evaluating properties of a particular distribution, while only having samples generated from a different distribution than the distribution of interest.\nSuppose we want to compute the expectation of an arbitrary function \\(f\\) of a random variable \\(Y\\), which is distributed according to the distribution \\(p\\): \\[ E_p[f(Y)] := \\int f(y) p(y) dy\\]\nIn case the integration becomes difficult, we can use a Monte Carlo method. \\[ E^{MC} := \\frac{1}{N} \\sum_{i=1}^N f(y^{(i)})\\] By the law of large numbers, this estimate will almost surely converge to the true value as the number \\(N\\) of particles (i.e., sampled values) increases.\nAlthough this appears straightforward, sampling from the target distribution, \\(p\\) is not always possible or efficient. Importance sampling bypasses this difficulty by sampling particles from an arbitrary “instrumental distribution” \\(q\\) and weighting the particles by accounting for they were sampled from \\(q\\) but not from \\(p\\).\nImportance sampling fundamental identity\n\\[ E_p[f(Y)] := \\int \\frac{f(y)}{q(y)} q(y) p(y) dy = E_q[w(Y) f(Y)]\\] where we define the importance weight \\(w(y) = \\frac{p(y)}{q(y)}\\)\nLet’s see an example in which we create Gamma-distributed sample from the exponentially distributed sample.\n\nset.seed(42)\nr &lt;- 0.01 # low rate for a wide coverage\nx &lt;- rexp(1e4, rate=r)\n# dgamma(x, shape=3, rate=1) target distribution\nwt = dgamma(x, shape=3, rate=1) / dexp(x, rate=r)\n\nplot(x, wt)\n\n\n\nW = wt/sum(wt)\n\nids &lt;- sample(1:length(x), prob=W, replace=T)\nnewx &lt;- x[ids]\nd &lt;- data.frame(wt=wt, x=x, W=W)\nd &lt;- d[order(x),]\ny = rgamma(length(x), shape=3, rate=1)\n\nd &lt;- data.frame(mean_exp=mean(x),\n                sum_wt_x=sum(W*x),\n                mean_important=mean(newx),\n                true_mean = mean(y))\n\nd\n\n  mean_exp sum_wt_x mean_important true_mean\n1 100.6511  3.01221       3.046269  3.035831\n\n\n\ndf &lt;- data.frame(name=rep(c(\"Target dist\",\"Intrumental dist\",\"Importance sample\"), each=1e4), \n                 value=c(y,x,newx))\nlibrary(ggplot2)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\nextrafont::loadfonts()\nggplot(df)+\n  geom_histogram(aes(x=value))+\n  facet_wrap(~name, nrow=1, scales=\"free_x\")\n\n\n\n# ggsave(\"importance_sampling.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)"
  },
  {
    "objectID": "posts/seir-models/index.html",
    "href": "posts/seir-models/index.html",
    "title": "SEIR model",
    "section": "",
    "text": "Susceptible-Exposed-Infective-Recovered (SEIR) 모형\nSEIR 모형은 잠복기가 어느 정도 긴 감염병 (예를 들어 코로나19)의 전파를 모형하는 데 사용한다. 이번 포스트에서는 SEIR 모형을 만드는 방법을 알아본다. 결정론적 (deterministic) 그리고 확률론적 (stochastic) 방법으로 SEIR 모형을 R언어로 만들어 본다.\n\nDeterministic model\n결정론적 모형은 주로 미분식 (differential equation)을 이용하여 구현한다. \\[\\begin{equation} \\begin{split}  \\frac{dS}{dt} &= - \\beta S\\frac{I}{N}\\\\ \\frac{dE}{dt} &= \\beta S\\frac{I}{N} - \\epsilon E\\\\ \\frac{dI}{dt} &= \\epsilon E - \\gamma I\\\\ \\frac{dR}{dt} &= \\gamma I \\end{split} \\end{equation}\\]\n\nseir_ode &lt;- function(t, y, params) {\n  # state variables \n  S &lt;- y[1]; E &lt;- y[2]; I &lt;- y[3]; R &lt;- y[4];\n  beta &lt;- params[[\"beta\"]] # beta = transmission rate\n  epsilon &lt;- params[[\"epsilon\"]] # 1/epsilon = latent period\n  gamma &lt;- params[[\"gamma\"]] # 1/gamma = duration of infectiousness\n  \n  N &lt;- S + E + I + R # total population size\n  muSE &lt;- beta * S * I / N # rate from S to E\n  muEI &lt;- epsilon * E # rate from E to I, i.e., 1/epsilon = latent period\n  muIR &lt;- gamma * I # rate from I to R\n  \n  dS &lt;- - muSE # rate of change for S\n  dE &lt;- muSE - muEI # rate of change for E\n  dI &lt;- muEI - muIR # rate of change for I\n  dR &lt;- muIR # rate of change for R\n  \n  return(list(c(dS, dE, dI, dR))) # return as a list to use deSolve package\n}\n\n미분식을 적분하여 SEIR 변수들의 시간에 따른 추이를 살펴보자. 적분은 deSolve 패키지의 ode 함수를 이용한다.\n\nI0 &lt;- 0.01 # initially infected people\ny0 &lt;- c(S = 1 - I0, E = 0, I = I0, R = 0) # initial values for state variables\nparams &lt;- list() # parameter input for the SIR model\nparams$epsilon &lt;- 0.5\nparams$gamma &lt;- 0.2\nparams$beta &lt;- 0.4  \ntend &lt;- 100 # simulation end time 50 days\ntimes &lt;- seq(0, tend, by = 1) # daily output for 150 days\n\n# ODE integration using the deSolve package\nlibrary(deSolve)\nlibrary(dplyr) # to use %&gt;%\node(y=y0, times=times, func=seir_ode, parms=params) %&gt;%\n  as.data.frame() -&gt; out\nlibrary(tidyr) # turn the data into a long format for easier plot\noutlong &lt;- out %&gt;% pivot_longer(cols=2:5, names_to = \"State\")\n\nlibrary(ggplot2)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\nextrafont::loadfonts()\n\nggplot(outlong, aes(x=time, y=value, color=State)) +\n  geom_line(linewidth = 1.2) +\n  labs(x = 'Time (day)', y = 'Proportion')+\n  theme(legend.title = element_blank(),\n        legend.position = \"bottom\") \n\n\n\n\n\n\n확률론적 모형\n두 가지 방식으로 확률론적 모형을 구현하여 본다. 첫번째는 \\(\\tau\\)-leaping 방법과 유사하나 푸아송 분포 대신 binomial 분포를 사용한다. 푸아송 분포와 달리 상한선이 정해지므로 각 상태 변수가 음수로 가는 것을 막을 수 있는 잇점이 있다. S에서 E로 단위 시간 \\(\\delta\\) 동안 이동하는 수는 아래와 같이 정해진다. \\[\\begin{equation} \\begin{split}  \\Delta N_{SE} &= \\textrm{Binomial}\\left( S(t), 1-\\textrm{exp}[{-r_{SE}\\delta }]\\right) \\\\ S(t+\\delta) &= S(t) - \\Delta N_{SE}\\ \\end{split} \\end{equation}\\] 비슷한 방법으로 \\(E\\)에서 \\(I\\) 그리고 \\(I\\)에서 \\(R\\)로 변하는 수를 계산하여 아래와 같이 구현한다.\n\nseir_stoch_step &lt;- function (y, params, delta) {\n  \n  beta &lt;- params[[\"beta\"]]\n  epsilon &lt;- params[[\"epsilon\"]]\n  gamma &lt;- params[[\"gamma\"]] \n\n  S &lt;- y[\"S\"]; E &lt;- y[\"E\"]; I &lt;- y[\"I\"]; R &lt;- y[\"R\"];\n\n  N &lt;- S + E + I + R\n  rSE &lt;- beta * I / N\n  rEI &lt;- epsilon\n  rIR &lt;- gamma\n  # number of events over the time step, delta, modeled as binomial random variable     \n  nSE &lt;- rbinom(1, S, 1 - exp(- rSE * delta))\n  nEI &lt;- rbinom(1, E, 1 - exp(- rEI * delta))\n  nIR &lt;- rbinom(1, I, 1 - exp(- rIR * delta))\n\n  dSdt &lt;- - nSE\n  dEdt &lt;- nSE - nEI\n  dIdt &lt;- nEI - nIR\n  dRdt &lt;- nIR\n  dCEdt &lt;- nSE\n  dCIdt &lt;- nEI\n\n return (list(c(dSdt, dEdt, dIdt, dRdt)))\n}\n\n위 함수는 한 번의\\(\\delta\\)동안 변화를 출력하기 때문에 원하는 기간 동안 연속해서 계산하기 위해 아래와 같은 함수를 추가적으로 만든다.\n\nstoch_solve &lt;- function(func, y, times, params, delta) {\n  # times indicate the times for which we want to see outputs\n  out &lt;- data.frame(matrix(NA, nrow = length(times), ncol = (length(y)+1)))\n  out[1, ] &lt;- c(times[1], y)\n  row &lt;- 2\n  \n  substeps &lt;- round((times[2]-times[1])/delta)\n  for (t in 1:(length(times)-1)) {\n    for (t2 in 1:substeps) {\n      y &lt;- y + unlist(func(y, params, delta))\n    }\n    out[row, ] &lt;- c(t, y)\n    row &lt;- row + 1\n  }\n  names(out) &lt;- c(\"time\", names(y))\n  return (out)\n}\n\n위 stoch_solve 함수를 이용하여 계산하고 플롯팅을 해본다. ODE 모형의 결과는 proportion으로 주어져 있으니 1,000을 곱한 후 비교하면 결과가 크게 다르지 않음을 알 수 있다. stoch_solve를 여려 번 실행하여 평균을 비교하면 그리고\\(\\delta\\)을 작게 할 수록 ODE 모형의 결과와 가까워진다.\n\nres &lt;- stoch_solve(func = seir_stoch_step, y=1000*y0, times=0:100, params = params, delta=0.2)\nreslong &lt;- pivot_longer(res, cols=2:5, names_to = \"State\")\n\nggplot(reslong, aes(x = time, y = value, color = State)) +\n  geom_line(linewidth = 1.2) +\n  labs(x = 'Time (day)', y = 'Number')+\n  theme(legend.title = element_blank(),\n        legend.position = \"bottom\") \n\n\n\n\n\n\nGillespie algorithm\n위에서 기술한 확률론적 방법은 우리가 이미 정한 time interval \\(\\delta\\)에 따라 오차가 발생하는 반면 Gillespie algorithm 을 이용해서 통계적으로 정확한 stochastic simulation 을 할 수 있다.\n\nseir_gillespie &lt;- function(y, params) {\n  S &lt;- y[\"S\"]\n  E &lt;- y[\"E\"]\n  I &lt;- y[\"I\"]\n  R &lt;- y[\"R\"]\n  \n  beta &lt;- params[[\"beta\"]]\n  epsilon &lt;- params[[\"epsilon\"]]\n  gamma &lt;- params[[\"gamma\"]]\n  \n  N &lt;- S + E + I + R\n  event_occurred &lt;- FALSE\n  tau &lt;- 0\n  if (I &gt; 0 & S &gt; 0) {## no need to proceed if no one is infectious or no one is susceptible\n    rate_StoE &lt;- beta * S * I / N\n    rate_EtoI &lt;- epsilon * E\n    rate_ItoR &lt;- gamma * I\n    \n    rate_all &lt;- c(rate_StoE, rate_EtoI, rate_ItoR) # event rates\n    tau &lt;- rexp(1, rate = sum(rate_all)) # time to the next event\n    event &lt;- sample(length(rate_all), 1, prob = rate_all) # next event\n    if (event == 1) {\n      S &lt;- S - 1\n      E &lt;- E + 1\n    }\n    else if (event == 2) {\n      E &lt;- E - 1\n      I &lt;- I + 1\n    }\n    else if (event == 3) {\n      I &lt;- I - 1\n      R &lt;- R + 1\n    }\n    event_occurred &lt;- TRUE;\n  }\n  return (list(y = c(S, E, I, R),\n               tau = tau,\n               event_occurred = event_occurred))\n}\n\nseir_gillespie는 한 번의 event 후 결과를 출력하므로 아래와 같이 추가적인 함수를 구성하여 시물레이션을 한다.\n\nrun_seir_gillespie &lt;- function(func, tend, y, params, report_dt = 1) {\n  res &lt;- data.frame(time = 0, t(y)) # store the simulation results\n  t &lt;- 0\n  yt &lt;- y\n  while (t &lt; tend) {\n    sim &lt;- func(y = yt, params = params) # one event according to the Gillespie algorithm\n    t &lt;- t + sim$tau\n    yt &lt;- sim$y\n    if (t &gt;= report_dt) { # add to the result only when the t is reaches report dt\n      res &lt;- rbind(res, c(t, t(yt)))\n      report_dt &lt;- report_dt  + 1\n    }\n    if (!sim$event_occurred)\n      break\n  }\n  return (res)\n}\n\n시물레이션 결과를 플롯팅 한다.\n\nres &lt;- run_seir_gillespie(func = seir_gillespie, \n                     tend = tend, \n                     y = y0 * 1000, \n                     params = params, \n                     report_dt = 1)\n\nreslong &lt;- pivot_longer(res, cols=2:5, names_to = \"State\")\n\nggplot(reslong, aes(x = time, y = value, color = State)) +\n  geom_line(linewidth = 1.2) +\n  labs(x = 'Time (day)', y = 'Number')+\n  theme(legend.title = element_blank(),\n        legend.position = \"bottom\") + \n  ggtitle(\"Gillespie algorithm\")\n\n\n\n# ggsave(\"gillespie.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)"
  },
  {
    "objectID": "posts/profile-likelihood/index.html",
    "href": "posts/profile-likelihood/index.html",
    "title": "Confidence interval using profile likelihood",
    "section": "",
    "text": "감염병 수리 모형 모수(parameter)의 신뢰구간 (confidence interval)구하기 - profile likelihood\n수리 모형을 이용하여 연구를 하게되면 관찰값을 이용하여 모형의 모수를 보정하는 과정을 거치게 된다. 이 과정을 소위 결과 (관찰값)로 부터 원인 (모형)을 알아내는 과정이라 하여 inverse problem 이라 부르기도 한다. 이 글에서는 \\(SEIR\\) 모형과 중국 우한 에서의 초기 코로나-19 발열자 자료를 이용하여 모형의 모수 (기초재감염지수)와 신뢰구간을 구해본다. 모수는 푸아송 (Poisson) 분포를 이용한 최대 우도 (maximum likelihood) 방법으로 그리고 신뢰구간은 profile likelihood 방법을 사용한다.\n아래에 SEIR 모형의 R 코드는 이전에 사용했던 모형에 변수 \\(C\\)를 추가하였는데 이는 누적 발열자수를 나타내고 일별 발열자 수를 쉽게 구하기 위함이다.\n\n# ODE-based SEIR model\nseir &lt;- function(t, y, params) {\n  S &lt;- y[1]; E &lt;- y[2]; I &lt;- y[3]; R &lt;- y[4]; C &lt;- y[5]\n  beta &lt;- params[\"beta\"]\n  sigma &lt;- params[\"sigma\"]\n  gamma &lt;- params[\"gamma\"]\n  \n  muSE &lt;- beta * I / (S + E + I + R)\n  muEI &lt;- sigma\n  muIR &lt;- gamma\n  \n  dS &lt;- - muSE*S\n  dE &lt;-  muSE*S - muEI*E\n  dI &lt;-  muEI*E - muIR*I\n  dR &lt;-  muIR*I\n  dC &lt;-  muEI*E ## cumulative symtom onset\n  \n  return(list(c(dS, dE, dI, dR, dC)))\n}\n\n\n# daily symptomatic case\ndaily_case &lt;- function(params=NULL) { \n  y0 &lt;- c(S = 11e6 - 1, E = 0, I = 1, R = 0, C = 1) # initial values (Wuhan population size)\n  times &lt;- seq(from = 0, to = 35, by = 1)\n  if(is.null(params)){\n    params &lt;- c(beta = 2.5/4.5, sigma = 1/5.2, gamma = 1/4.5)\n  }\n  out &lt;- ode(y = y0, times = times, func = seir, parms = params)\n  x &lt;- as.data.frame(out) \n  n &lt;- nrow(x)\n  daily = c(0, diff(x[,\"C\"]))\n  return (daily)\n} \n\n우한에서 발생한 초기 일별 코로나19 환자수는 Kucharski et al. (2020) Lancet 에 보고된 자료를 기반으로 하였다.\n\nwuhan &lt;- \n  data.frame(date = seq(as.Date(\"2019-12-13\"), \n                        as.Date(\"2020-01-16\"), by = \"day\"),\n             case = c(0,0,0,0,0,0,0,2,2,3,0,1,1,0,0,1,0,1,2,\n                      3,4,3,3,1,2,5,6,8,3,8,8,5,17,7,13))\n\n일별 발열자수 \\(y_t\\)가 푸아송 분포를 따른다고 가정하고 우도 함수를 아래와 같이 정의 한다.\n\\[ y_t \\sim \\mathrm{Poisson}(Y_t)\\] \\[\\mathcal{L}(\\theta) = \\prod_{t=1}^{n} f(y_t \\vert \\theta) = \\prod_{t=1}^{n} \\frac{Y_t^{y_t} e^{-Y_t}}{y_t!}\\]\n우도 계산식을 아래와 같이 R로 구현할 수 있다. 물론 우도함수는 수치 안정성을 위해서 log 를 취한 값을 사용하고 (즉 log likelihood) 최적화 알고리듬은 최소값을 찾기 때문에 음의값으로 치환한 negative log likelihood를 사용한다.\n\nnegloglik &lt;- function(par) {\n  params &lt;- c(beta = par, sigma = 1/5.2, gamma = 1/4.5)\n  model &lt;- daily_case(params = params)\n  - sum(dpois(x = wuhan$case, lambda = model, log = TRUE)) # sum of negative log likelihood\n}\n\nSEIR 모형에는 세 개의 모수 (\\(\\beta, \\sigma, \\gamma\\))가 있는데 \\(\\sigma, \\gamma\\)는 각각 잠복기와 회복까지 걸리는 시간을 나타내고 환자들을 관찰하여 그 값을 추정할 수 있는 경우가 많다. 이에 반해 \\(\\beta\\)는 수리 모형의 예측값을 관찰된 유행 곡선과 비교하여 추정한다. 이 과정이 negloglik 함수에 구현된 것이고 optim 함수를 사용하여 negloglik를 최소화하는 \\(\\beta\\)를 구한다.\n\\[ \\hat{\\theta} = \\underset{\\theta}{\\mathrm{argmax}}~\\{{\\mathrm{log} \\mathcal{L}(\\theta)} \\}\\]\n\nlibrary(deSolve) # negloglik includes ODE model to be integrated using deSolve\nfit &lt;- optim(negloglik, par=c(0.1), method=\"Brent\", lower=0, upper=10)\n(theta &lt;- fit$par)\n\n[1] 0.5735032\n\ngamma &lt;- 1/4.5; (R0 &lt;- theta/gamma)\n\n[1] 2.580765\n\n\n95% 신뢰 구간은 Log likelihood 가 asymptotically 아래의 조건을 만족한다는 사실을 이용하여 계산할 수 있다 (Wilks’ theorem). \\[ 2 (\\mathrm {log} \\mathcal {L} (\\hat{\\theta}) - \\mathrm{log}\\mathcal{L}(\\theta_0)) \\sim \\chi^2_1\\]\n\nprof_b &lt;- expand.grid(b = seq(0.5, 0.7, length = 1000))\nprof_b$loglik &lt;- -sapply(prof_b$b, negloglik)\nmaxloglik &lt;- - fit$value\ncutoff &lt;- maxloglik - qchisq(p=0.95,df=1)/2\n(limits &lt;- range(subset(prof_b, loglik &gt; cutoff)$b)) # 95% confidence interval\n\n[1] 0.5518519 0.5940941\n\nlibrary(ggplot2)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\nextrafont::loadfonts()\nlibrary(dplyr)\nprof_b |&gt; as.data.frame() |&gt; \n  ggplot(aes(b,loglik))+\n  geom_line()+\n  geom_vline(xintercept=fit$par, color=\"steelblue\", linewidth=1)+\n  geom_vline(xintercept=limits, color=\"steelblue\", linetype=\"dotted\", linewidth=1)+\n  geom_hline(yintercept=maxloglik, color=\"steelblue\", linewidth=1)+\n  geom_hline(yintercept=cutoff, color=\"steelblue\", linewidth=1)+\n  scale_y_continuous(limits= c(maxloglik-6, maxloglik+1))+\n  labs(x=expression(beta), y=\"Log likelihood\")\n\n\n\n# ggsave(\"profile_lik.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)\n\nbbmle 패키지는 confint 함수로 profile likelihood를 이용하여 신뢰구간을 구하는 방법을 제공해준다.\n\nlibrary(bbmle)\nbbfit &lt;- mle2(minuslogl=negloglik, start=list(par=0.1), method=\"L-BFGS-B\", lower=c(par=1e-6), control=list(maxit=5000))\nconfint(bbfit)\n\n    2.5 %    97.5 % \n0.5517962 0.5942085"
  },
  {
    "objectID": "posts/particle-filter/index.html",
    "href": "posts/particle-filter/index.html",
    "title": "Particle filter using R",
    "section": "",
    "text": "A simple particle filter in R\nThe following example was adapted from the post in RPubs.\n\nSimulate the data\nGenerate \\(y_{1:T}\\) as a sequence of noisy observations of a latent variable \\(x_{1:T}\\).\n\n# create a data set: x (latent variable) and y (observation)\nset.seed(42) # to make it reproducible  (lots of random numbers follow)\nT &lt;- 50 # number of observations\nx &lt;- rep(NA, T) # latent variable\ny &lt;- rep(NA, T) # observed values\nsx &lt;- 2.2 # standard deviation for x\nsy &lt;- 0.3 # standard deviation for y\nx[1] &lt;- rnorm(1, 0, 1)\ny[1] &lt;- rnorm(1, x[1], sy)\n\nfor (t in seq(2, T)) {\n  x[t] &lt;- rnorm(1, x[t-1], sx)\n  y[t] &lt;- rnorm(1, x[t], sy)\n}\nx_true &lt;- x\nobs &lt;- y\n\n\n\nImplement a particle filter (sequential Monte Carlo)\n\n# particle filter -----------------------------------------------------------\nT &lt;- length(y) # number of observations\nN &lt;- 100 # number of particles\n# to store prior distributions for variables correspond to latent variable x\nx_prior &lt;- matrix(nrow=N, ncol = T) \nx_post &lt;- matrix(nrow=N, ncol = T)  # posterior distributions\nweights &lt;- matrix(nrow=N, ncol = T) # weights used to draw posterior sample\nW &lt;- matrix(nrow =  N, ncol = T) # normalized weights\nA &lt;- matrix(nrow =  N, ncol = T) # indices based on the normalized weights\nx_prior[, 1] &lt;- rnorm(N, 0, sx)# initial X from a normal distribution\n# calculate weights, normal likelihood\nweights[, 1] &lt;- dnorm(obs[1], x_prior[, 1], sy)\nW[, 1] &lt;- weights[, 1]/sum(weights[, 1])# normalise weights\n# indices based on the weighted resampling with replacement \nA[, 1] &lt;- sample(1:N, prob = W[1:N, 1], replace = T) \nx_post[, 1] &lt;- x_prior[A[, 1], 1] # posterior distribution using the indices\n\nfor (t in seq(2, T)) {\n  x_prior[, t] &lt;- rnorm(N, x_post[, t-1], sx) # prior x_{t} based on x_{t-1}\n  weights[, t] &lt;- dnorm(obs[t], x_prior[, t], sy) # calculate weights \n  W[, t] &lt;- weights[, t]/sum(weights[, t]) # normalise weights\n  A[, t] &lt;- sample(1:N, prob = W[1:N, t], replace = T) # indices\n  x_post[, t] &lt;- x_prior[A[, t], t] # posterior samples\n}\n\n\n\n\nSummarize results\nCalculate the mean and 2.5\\(^\\textrm{th}\\) and 97.\\(^\\textrm{th}\\) percentile of the posterior sample as a means to get 95% credible interval.\n\nx_means &lt;- apply(x_post, 2, mean) # posterior mean\nx_quantiles &lt;- apply(x_post, 2, function(x) quantile(x, probs = c(0.025, 0.975))) # 95% credible interval\ndf &lt;- data.frame(t = seq(1, T),\n                 x_mean = x_means,\n                 x_lb = x_quantiles[1, ],\n                 x_ub = x_quantiles[2, ],\n                 x_true = x_true, # latent variables\n                 y = y) # observed values\n\n\nPlot the results\n\nlibrary(ggplot2)\nextrafont::loadfonts(\"win\", quiet=TRUE)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\nggplot(df, aes(x = t)) +\n  geom_ribbon(aes(ymin = x_lb, ymax = x_ub, fill=\"95% CrI\"), alpha=0.5) +\n  geom_line(aes(y=x_mean, color=\"Posterior mean\")) +\n  geom_line(aes(y=x_true, color=\"True\")) +\n  geom_point(aes(y=x_mean, color=\"Posterior mean\")) +\n  geom_point(aes(y=x_true, color=\"True\")) +\n  labs(y=\"values\", x=\"index\") + \n  scale_colour_manual(\"\", values=c(\"Posterior mean\"=\"firebrick\",\n                                   \"True\"=\"darkgrey\")) +\n  scale_fill_manual(\"\", values=\"firebrick\")+\n  theme(legend.position = \"bottom\")\n\n\n\n# ggsave(\"particle_filter.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)"
  },
  {
    "objectID": "posts/particle_filter_COVID19/index.html",
    "href": "posts/particle_filter_COVID19/index.html",
    "title": "Estimating the instantaneous reproduction number using the particle filter",
    "section": "",
    "text": "A simple particle filter in R\n파티클 필터 (particle filter) 를 이용하여 잠재 변수 (latent variable)를 추정하는 과정을 지난 글에서 다루었다. 관찰값들이 코로나 19 일별 감염자일때 감염병 수리 모형을 이용하여 일별 감염재생산지수 (\\((R_t\\)) 를 추정한다. 아래 글은 2020년 Kucharski et al. 논문에 사용되었던 방법을 차용하였다. 이해를 돕기 위해 모형을 단순화 하였고 가상의 데이타를 만들어 내는 과정을 더하였다. 우선 SEIR 모형을 이용해서 가상의 데이타 (일별 감염자 수)를 만든다. 누적 감염자 (cumulative incidence) 를 나타내는 CI라는 변수의 일별 차이를 계산하여 일별 감염자 수를 계산한다. 보통의 SEIR 모형에서는 \\(\\beta\\)가 상수로 취급 되지만 아래 모형에서는 일별 감염 재생산지수 \\(R_t = \\beta (t) \\times D\\) \\(D\\)는 감염 기간)가 방역 정책, 활동 변화 등 이유로 인해 시간에 따라 변화한다고 가정하기 때문에 시간에 따른 함수 \\(\\beta(t)\\)로 표현한다. 우리가 추정 하고자 하는 \\(R_t\\)를 미리 정의하고 이로 부터 \\(\\beta(t)\\) 를 계산하고 이를 SEIR 모형에 적용하여 가상의 데이타를 만든다.\n아래와 같은 방식으로 SEIR 모형을 만든다. 본래 미분식으로 정의하고 deSolve 패키지의 ode 함수 등을 이용하여 적분할 수 있으나 이 글에서는 간단하게 Euler 방법을 사용한다.\n\nSEIR_Euler &lt;- function (params = NULL,\n                        y = NULL,\n                        tbegin = 0,\n                        tend = 1,\n                        dt = 0.2) {\n  \n  M &lt;- matrix(NA, nrow=(tend-tbegin+1), ncol=length(y)) # output matrix\n  M[1,] &lt;- y # initial values for the first row\n  \n  S &lt;- y[1]; E &lt;- y[2]; I &lt;- y[3]; R &lt;- y[4]; CI &lt;- y[5]\n  N &lt;- S + E + I + R\n  epsilon &lt;- params[[\"epsilon\"]]\n  gamma &lt;- params[[\"gamma\"]]\n  Rt &lt;- params[[\"Rt\"]] # daily reproduction number\n  \n  for (t in seq(tbegin, tend, by=1)) { # for each day\n    for (i in seq(dt, 1, dt)) { # sub-intervals that can vary\n      # beta is already adjusted by N \n      # t is not an integer\n      beta &lt;- Rt[floor(t+1+dt)] * gamma # transmission rate\n      S_to_E &lt;- beta * I * dt\n      E_to_I &lt;- E * epsilon * dt\n      I_to_R &lt;- I * gamma * dt\n      \n      # update state variables\n      S &lt;- S - S_to_E\n      E &lt;- E + S_to_E - E_to_I\n      I &lt;- I + E_to_I - I_to_R\n      R &lt;- R + I_to_R\n      CI &lt;- CI + S_to_E\n    }\n    # output for each day\n    M[t+1, 1] &lt;- S \n    M[t+1, 2] &lt;- E\n    M[t+1, 3] &lt;- I\n    M[t+1, 4] &lt;- R\n    M[t+1, 5] &lt;- CI\n  }\n  return(M)\n}\n\n일별 감염자 수를 플롯해본다.\n\n# pre-defined Rt\nRt_true &lt;- c(rep(1.2, 15), 0.5*sin(0.1*pi*0:32) + 1.2, rep(0.9, 100))\nI0 &lt;- 100 # initially infected people\ny0 &lt;- c(S = 1e7-I0, E = 0, I = I0, R = 0, CI = 0) # initial values for state variables\nparams &lt;- list() # input parameters for the SEIR model\nparams$Rt &lt;- Rt_true\nparams$epsilon &lt;- 0.5 # 1/epsilon = latent period\nparams$gamma &lt;- 0.2 # 1/gamma = duration of infectiousness\ntend &lt;- 50 # simulation end time 50 days\n\nres1 &lt;- SEIR_Euler(params = params, y=y0, tend=50) # run the model\nres1 &lt;- as.data.frame(res1)\nres1$daily_infected &lt;- c(0, diff(res1$V5))\nres1$time &lt;- 0:tend\n\nlibrary(ggplot2)\nextrafont::loadfonts(\"win\", quiet=TRUE)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\n\nggplot(res1, aes(x = time, y = daily_infected)) +\n  geom_line(size = 1.2) +\n  labs(x = 'Time (day)', y = 'Daily infected')\n\n\n\n\n푸아송 분포를 이용하여 가상의 데이타를 만든다.\n\n# Create the data assunming observations are poisson random variable\nset.seed(42)\nfakedata &lt;- data.frame(daily_infected = rpois(nrow(res1), lambda = res1$daily_infected))\n\n일별 변화를 계산하는 SEIR 전파 모형, 행의 수는 파티클 수와 같다.\n\n# stochastic differential equation (with beta(t) moves according to a geometric Brownian motion) are modeled using the Euler-Maruyama method.\n# daily change is modeled using the subinterval dt\nSEIR_step &lt;- function (params = NULL,\n                       y = NULL,\n                       tbegin = 0,\n                       tend = 1,\n                       dt = 0.2,\n                       beta = NULL) {\n  # daily infection reset to zero to hold values from tbegin to tend\n  y[, c(\"CI\")] &lt;- 0\n  \n  S &lt;- y[, \"S\"]\n  E &lt;- y[, \"E\"]\n  I &lt;- y[, \"I\"]\n  R &lt;- y[, \"R\"]\n  daily_infected &lt;- y[, \"CI\"]\n  \n  N &lt;- S + E + I + R\n  epsilon &lt;- params[[\"epsilon\"]]\n  gamma &lt;- params[[\"gamma\"]]\n  \n  for (i in seq((tbegin + dt), tend, dt)) {\n    # beta is already assumed to be adjusted by N such that it can\n    # be translated to Rt by multiplying the duration of infectiousness\n    S_to_E &lt;- beta * I * dt\n    E_to_I &lt;- E * epsilon * dt\n    I_to_R &lt;- I * gamma * dt\n    # Process model for SEIR\n    S &lt;- S - S_to_E\n    E &lt;- E + S_to_E - E_to_I\n    I &lt;- I + E_to_I - I_to_R\n    R &lt;- R + I_to_R\n    daily_infected &lt;- daily_infected + S_to_E\n  }\n  y[, \"S\"] &lt;- S\n  y[, \"E\"] &lt;- E\n  y[, \"I\"] &lt;- I\n  y[, \"R\"] &lt;- R\n  y[, \"CI\"] &lt;- daily_infected\n  \n  return(y)\n}\n\n파티클 필터링 함수\n\npfilter &lt;- function (params, # parameters\n                     y, # initial values of state variables\n                     data, # input data set\n                     npart = 1000, # number of particles\n                     tend = NULL, # simulation stop time\n                     dt = 0.2) {\n  \n  # Assumptions - using daily growth rate\n  nstatevar &lt;- length(y) # number of state variables\n  if(is.null(tend)) {\n    tend = nrow(data)\n  }\n  # to store state variables\n  latent_var &lt;- array(0,\n                      dim = c(npart, tend, nstatevar),\n                      dimnames = list(NULL, NULL, names(y)))\n  # latent_var[, 1, ] &lt;- y\n  for (nm in names(y)) { # initial value\n    latent_var[, 1, nm] &lt;- y[[nm]]\n  }\n  ## parameters \n  gamma &lt;- params[[\"gamma\"]]\n  beta0 &lt;- params[[\"R0\"]] * gamma\n  beta_sd &lt;- params[[\"betavol\"]]\n  beta &lt;- matrix(rnorm(npart * tend, mean = 0, sd = beta_sd), nrow = tend)\n  beta[1,] &lt;- beta0 # this is updated at t=2\n  \n  wt &lt;- matrix(NA, nrow = npart, ncol = tend) # weight (likelihood)\n  wt[, 1] &lt;- 1 / npart  # initial weights\n  W &lt;- matrix(NA, nrow = npart, ncol = tend) # normalized weights\n  A &lt;- matrix(NA, nrow = npart, ncol = tend) # Resample according to the normalized weight\n  \n  for (t in 2:tend) {# begin particle loop\n    # beta changes according to a Geometric Brownian motion \n    beta[t, ] &lt;- beta[t-1, ] * exp(beta[t, ])\n    # run process model\n    latent_var[, t, ] &lt;- SEIR_step(params = params,\n                                   y = latent_var[, t-1, ],\n                                   tbegin = t-1,\n                                   tend = t,\n                                   dt = dt,\n                                   beta = beta[t,])\n    # calculate weights (likelihood)\n    # wt[, t] &lt;- assign_weights(var = latent_var, t = t, data = data)\n    \n    case_expected &lt;- latent_var[, t, \"CI\"]\n    case_data &lt;- round(unlist(data[t, \"daily_infected\"]))\n    expected_val &lt;- pmax(0, case_expected) # make sure that the value is not negative\n    log_lik &lt;- dpois(round(case_data), lambda = expected_val, log = T)\n    wt[, t] &lt;- exp(log_lik)\n    # normalize particle weights\n    W[, t] &lt;- wt[, t] / sum(wt[, t])\n    # resample particles by sampling parent particles according to weights\n    A[, t] &lt;- sample(1:npart, prob = W[1:npart, t], replace = T)\n    # Resample particles for corresponding variables\n    latent_var[, t,] &lt;- latent_var[A[, t], t,]\n    beta[t,] &lt;- beta[t, A[, t]] #- needed for random walk on beta\n  } # end particle loop\n  \n  # Marginal likelihoods\n  lik_values &lt;- rep(NA, tend)\n  for (t in 1:tend) {\n    lik_values[t] &lt;- log(sum(wt[1:npart, t])) # log-likelihoods\n  }\n  # averaged log likelihoods log(L/(npart^tend))\n  loglik &lt;- - tend * log(npart) + sum(lik_values)\n  \n  return (list(lik_marginal = lik_values,\n               lik_overall_average = loglik,\n               latent_var_filtered = latent_var,\n               beta_filtered = beta,\n               W = W, A = A))\n}\n\n일별 변화를 계산하는 SEIR 전파 모형, 행의 수는 파티클 수와 같다.\n\nparams$R0 &lt;- 2\nparams$betavol &lt;- 0.3\nsample &lt;- pfilter(params=params, # parameters\n                     y=y0, # initial values of state variables\n                     data=fakedata, # input data set\n                     npart = 1000, # number of particles\n                     tend = tend, # simulation stop time\n                     dt = 0.2) \nobserved &lt;- fakedata$daily_infected[2:nrow(fakedata)]\n\n\nPlot the results\n\n# draw incidence plot\ndaily_inc_summary &lt;- t(apply(sample$latent_var_filtered[,,5], 2, quantile,\n            probs=c(0.025, 0.5, 0.975)))\ndf &lt;- cbind(data.frame(time=1:(nrow(res1)-1), observed = observed), daily_inc_summary)\n\n\nggplot(df, aes(x=time)) +\n  geom_ribbon(aes(ymin=`2.5%`, ymax=`97.5%`), fill=\"steelblue\", alpha=0.8)+\n  geom_line(aes(y=`50%`), color=\"steelblue\")+\n  geom_point(aes(y=observed), color = \"darkred\")+\n  labs(x=\"Time\", y=\"Daily incidence\")\n\n\n\n# draw daily Rt plot\ndur &lt;- 1/params$gamma\ndaily_Rt_summary &lt;- t(apply(sample$beta_filtered * dur, 1, quantile,\n                            probs=c(0.025, 0.5, 0.975)))  \ndf &lt;- cbind(data.frame(time=1:(nrow(res1)-1), true_Rt = Rt_true[2:51]), daily_Rt_summary)\nggplot(df, aes(x=time)) +\n  geom_ribbon(aes(ymin=`2.5%`, ymax=`97.5%`), fill=\"darkgreen\", alpha=0.7)+\n  geom_line(aes(y=`50%`), color=\"darkgreen\")+\n  geom_point(aes(y=true_Rt), color = \"black\") + \n  labs(x=\"Time\", y=expression(italic(R[t])))\n\n\n\n# ggsave(\"particle_filter_covid.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)"
  },
  {
    "objectID": "posts/0_template/index.html",
    "href": "posts/0_template/index.html",
    "title": "Template",
    "section": "",
    "text": "A simple particle filter in R\nThe following example was adapted from the post in RPubs.\n\nSimulate the data\nGenerate \\(y_{1:T}\\) as a sequence of noisy observations of a latent variable \\(x_{1:T}\\).\n\\[\n\\begin{align}\n\\mathrm{d}S/\\mathrm{d}t &= -\\beta I S \\\\\n\\mathrm{d}I/\\mathrm{d}t &= \\beta I S - \\gamma I\\\\\n\\end{align}\n\\] The first part is simply to compute \\(dI/dS\\).\n\nfrom sympy import *\n\nR_0, b, g, dIdt, dSdt, S, I = symbols('R_0 b g dIdt dSdt S I')\n\ndSdt = - b*S*I\ndIdt = + b*S*I - g*I\ndSdI = dIdt / dSdt #-(I*S*b - I*g)/(I*S*b)\n\n# b &lt;- R0*g\nsimplify(-(I*S*R_0*g - I*g)/(I*S*R_0*g)) \n\n-1 + 1/(R_0*S)\n\n\n\n# create a data set: x (latent variable) and y (observation)\nset.seed(42) # to make it reproducible  (lots of random numbers follow)\nT &lt;- 50 # number of observations\nx &lt;- rep(NA, T) # latent variable\ny &lt;- rep(NA, T) # observed values\nsx &lt;- 2.2 # standard deviation for x\nsy &lt;- 0.3 # standard deviation for y\nx[1] &lt;- rnorm(1, 0, 1)\ny[1] &lt;- rnorm(1, x[1], sy)\n\nfor (t in seq(2, T)) {\n  x[t] &lt;- rnorm(1, x[t-1], sx)\n  y[t] &lt;- rnorm(1, x[t], sy)\n}\nx_true &lt;- x\nobs &lt;- y\n\n\n\nImplement a particle filter (sequential Monte Carlo)\n\n# particle filter -----------------------------------------------------------\nT &lt;- length(y) # number of observations\nN &lt;- 100 # number of particles\n# to store prior distributions for variables correspond to latent variable x\nx_prior &lt;- matrix(nrow=N, ncol = T) \nx_post &lt;- matrix(nrow=N, ncol = T)  # posterior distributions\nweights &lt;- matrix(nrow=N, ncol = T) # weights used to draw posterior sample\nW &lt;- matrix(nrow =  N, ncol = T) # normalized weights\nA &lt;- matrix(nrow =  N, ncol = T) # indices based on the normalized weights\nx_prior[, 1] &lt;- rnorm(N, 0, sx)# initial X from a normal distribution\n# calculate weights, normal likelihood\nweights[, 1] &lt;- dnorm(obs[1], x_prior[, 1], sy)\nW[, 1] &lt;- weights[, 1]/sum(weights[, 1])# normalise weights\n# indices based on the weighted resampling with replacement \nA[, 1] &lt;- sample(1:N, prob = W[1:N, 1], replace = T) \nx_post[, 1] &lt;- x_prior[A[, 1], 1] # posterior distribution using the indices\n\nfor (t in seq(2, T)) {\n  x_prior[, t] &lt;- rnorm(N, x_post[, t-1], sx) # prior x_{t} based on x_{t-1}\n  weights[, t] &lt;- dnorm(obs[t], x_prior[, t], sy) # calculate weights \n  W[, t] &lt;- weights[, t]/sum(weights[, t]) # normalise weights\n  A[, t] &lt;- sample(1:N, prob = W[1:N, t], replace = T) # indices\n  x_post[, t] &lt;- x_prior[A[, t], t] # posterior samples\n}\n\n\n\n\nSummarize results\nCalculate the mean and 2.5\\(^\\textrm{th}\\) and 97.\\(^\\textrm{th}\\) percentile of the posterior sample as a means to get 95% credible interval.\n\nx_means &lt;- apply(x_post, 2, mean) # posterior mean\nx_quantiles &lt;- apply(x_post, 2, function(x) quantile(x, probs = c(0.025, 0.975))) # 95% credible interval\ndf &lt;- data.frame(t = seq(1, T),\n                 x_mean = x_means,\n                 x_lb = x_quantiles[1, ],\n                 x_ub = x_quantiles[2, ],\n                 x_true = x_true, # latent variables\n                 y = y) # observed values\n\n\nPlot the results\n\nlibrary(ggplot2)\nextrafont::loadfonts(\"win\", quiet=TRUE)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\nggplot(df, aes(x = t)) +\n  geom_ribbon(aes(ymin = x_lb, ymax = x_ub, fill=\"95% CrI\"), alpha=0.5) +\n  geom_line(aes(y=x_mean, color=\"Posterior mean\")) +\n  geom_line(aes(y=x_true, color=\"True\")) +\n  geom_point(aes(y=x_mean, color=\"Posterior mean\")) +\n  geom_point(aes(y=x_true, color=\"True\")) +\n  labs(y=\"values\", x=\"index\") + \n  scale_colour_manual(\"\", values=c(\"Posterior mean\"=\"firebrick\",\n                                   \"True\"=\"darkgrey\")) +\n  scale_fill_manual(\"\", values=\"firebrick\")+\n  theme(legend.position = \"bottom\")\n\n\n\n# ggsave(\"particle_filter.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)"
  },
  {
    "objectID": "posts/nimble/index.html",
    "href": "posts/nimble/index.html",
    "title": "SEIR model using the Nimble pacakge",
    "section": "",
    "text": "감염병 수리 모형을 개발하는 데 있어 가장 근본적인 질문 중 하나는 주어진 관찰값 (시계열)하에서 어떤 모형을 선택하고 그 모수의 값을 어떻게 결정하는가이다. 모형을 선택하는 과정은 따로 다루기로 하고 여기서는 일반적으로 사용되는 감염병 수리 모형 (i.e., SIR)을 사용할 때 모수를 추정하는 과정에 대해서 이야기해보자. 최대 가능도 (maximum likelihood) 방법에 대해서는 전에 언급하였다. 모수를 추정하는 여러 방법 중에 마르코프 연쇄 몬테카를로 (Markov Chain Monte Carlo; MCMC) 방법이 적절한 모수의 값을 찾아내고 그 값의 불확실성 (uncertainty)를 나타내는 데 가장 널리 쓰이는 방법 중의 하나이다. MCMC 알고리듬을 직접 작성해서 사용한는 것도 원리를 이해하는 데에는 도움이 되지만 이미 다양한 통계 패키지에서 MCMC가 사용되고 있으므로 기존 패키지를 사용하는 것도 합리적인 방법이 될 수 있다. 회귀 분석 등 통계모형의 경우BUGS (Bayesian Inference Using Gibbs Sampling) 혹은 JAGS (Just Another Gibbs Sampler), Stan, 그리고 NIMBLE 등에 구현된 MCMC를 사용하는 것이 많이 보편화 되어 있다.\n이 중 NIMBLE 은 R 패키지 nimble을 이용해서 사용할 수 있고 패키지에서 제공하는 함수 기능을 이용해서 감염병 수리 모형을 구현하고 MCMC 까지 할 수 있다. syntax 또한 R과 유사해서 R를 사용하는 사람에게는 Stan 보다 더 접근이 용이한 것 같다. 아래에는 nimble 함수 기능을 이용하여 Euler 방법에 기반한 SIR 모형을 구현한 예이다.\n\nlibrary(nimble)\nsir_incidence &lt;- nimbleFunction(\n  run = function(beta = double(0)) {\n    tend &lt;- 100 # 100 days of simulation\n    dt &lt;- 0.1 # time step of 0.1 day\n    \n    # initial condition\n    St &lt;- 999 \n    It &lt;- 1\n    Rt &lt;- 0\n    CIt &lt;- 0\n    \n    # create vectors for the state variables\n    S &lt;- rep(0, tend)\n    I &lt;- rep(0, tend)\n    R &lt;- rep(0, tend) \n    CI &lt;- rep(0, tend) # cumulative incidence\n    \n    # first elements of the vectors are initial conditions\n    S[1] &lt;- St\n    I[1] &lt;- It\n    R[1] &lt;- Rt\n    CI[1] &lt;- CIt\n  \n    gamma &lt;- 0.2 # 1/gamma = duration of infectiousness\n    \n    for (i in 2:tend) { # each day\n      for (j in 1:ceiling(1/dt)) { # time steps per day\n        Nt &lt;- St + It + Rt                     # total population size\n        rate_StoI &lt;- St * beta * It / Nt * dt  # transition rate from S to I\n        rate_ItoR &lt;- gamma * It * dt           # transition rate from I to R\n  \n        dS &lt;- - rate_StoI            # rate of change for S\n        dI &lt;- rate_StoI - rate_ItoR  # rate of change for I\n        dR &lt;- rate_ItoR              # rate of change for R\n        dCI &lt;- rate_StoI             # rate of change for cumulative incidence\n      \n        St &lt;- St + dS                # update the St\n        It &lt;- It + dI                # update the It \n        Rt &lt;- Rt + dR                # update the Rt\n        CIt &lt;- CIt + dCI             # update the CIt\n      }\n      S[i] &lt;- St                     # put St in the vector \n      I[i] &lt;- It                     # put It in the vector \n      R[i] &lt;- Rt                     # put Rt in the vector \n      CI[i] &lt;- CIt                   # put CIt in the vector \n   }\n   # daily incidence from cumulative incidence\n   inc &lt;- CI[2:tend] - CI[1:(tend-1)] \n   return(inc) \n   returnType(double(1)) # return type\n }\n)\n\n모수 추정을 위해서 푸아송 분포를 이용하여 거짓 관찰값 (Y) 을 만들어보자.\n\n# create observation\nbeta &lt;- 0.4 # true beta\nX &lt;- sir_incidence(beta) # true daily incidence\nY &lt;- rpois(length(X), lambda=X) # Poisson-distributed observation\n\n아래와 같이 prior distribution, likelihood, 그리고 posterior predictive check위해서 ypred 도 함께 구현한다.\n\n# BUGS style code\ncode &lt;- nimbleCode({\n  beta ~ T(dnorm(0, sd = 2), 0, 2)   # prior for beta truncated at 0 and 2\n  mu[1:N] &lt;- sir_incidence(beta)     # daily incidence from the model\n  for (i in 1:N) {\n    y[i] ~ dpois(mu[i])              # likelihood\n    ypred[i] ~ dpois(mu[i])          # posterior predictive value\n  }\n})\n\n아래와 같이 초기 조건을 설정하고 모형을 구성한다. 빠른 실행을 위해서 컴파일 한다.\n\n# constants, data, and initial values\nconstants &lt;- list(N = length(Y))      # number of observation\ndata &lt;- list(y = Y)                   # observation\ninits &lt;- list(beta = 0.1)             # starting point for beta  \n\n# create the model object\nsir_model &lt;- nimbleModel(code = code,\n                         constants = constants,\n                         data = data,\n                         inits = inits,\n                         check = FALSE)\n\nsirMCMC &lt;- buildMCMC(sir_model, monitors=c('beta','ypred'))\nCsir &lt;- compileNimble(sir_model)\nCsirMCMC &lt;- compileNimble(sirMCMC, project=Csir)\n\n# thining interval was chosen based on previous analyses of ACF\nsamples &lt;- runMCMC(CsirMCMC, niter=5000, thin=10, nburnin=1000)\n# saveRDS(samples, \"samples_nimble_20231125e.rds\")\n\n\nsamples &lt;- readRDS(\"samples_nimble_20231125e.rds\")\nplot(samples[,1], type=\"l\", ylab=expression(beta), xlab=\"Iterations\")\n\n\n\n\n\\(\\beta\\) 의 posterior distribution과 거짓 자료를 만들기 위해 사용했던 \\(\\beta\\)값 (빨간색)을 비교해보자.\n\nlibrary(ggplot2)\nextrafont::loadfonts(\"win\", quiet=TRUE)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\n\nsamples |&gt; \n  as.data.frame() |&gt; \n  ggplot()+\n  geom_histogram(aes(x=beta, fill=\"posterior\"))+\n  geom_vline(aes(xintercept=0.4, color=\"true\"), linewidth=1.2)+\n  labs(x=expression(beta), y=\"frequency\")+\n  scale_fill_manual(\"\", values=c(\"posterior\"=\"grey\"))+\n  scale_color_manual(\"\", values=c(\"true\"=\"firebrick\"))+\n  theme(legend.position = \"bottom\")\n\n\n\n\n\nPosterior predictive check\n\n# posterior predictive check\nnsamp &lt;- nrow(samples)\ndf &lt;- data.frame(time=rep(1:99, nsamp+1), \n                 name=c(rep(1:nsamp, each=99),rep(\"data\",99)))\ndf$value &lt;- c(c(t(samples[,2:100])), Y)\n\n\nlibrary(dplyr)\nggplot(df)+\n  geom_line(data=filter(df, name!=\"data\"), aes(x=time, y=value, group=name,\n            color=\"posterior predictive values\"))+\n  geom_point(data=filter(df, name==\"data\"), aes(x=time, y=value, color=\"data\"),\n             size=1.2) +\n  labs(x='Time (day)', y='Daily infected')+\n  scale_color_manual(\"\",values=c(\"posterior predictive values\"=\"grey\",\n                                 \"data\"=\"firebrick\"))+\n  theme(legend.position = \"bottom\")\n\n\n\n# ggsave(\"nimble_ppc_incidence.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)"
  },
  {
    "objectID": "posts/euler_multinomial/index.html",
    "href": "posts/euler_multinomial/index.html",
    "title": "Multinomial distribution",
    "section": "",
    "text": "A simple particle filter in R\nWhen implementing a model of stochastic disease transmission, one has to deal with a situation in which multiple events are possible. For example, susceptible people may become infected, remain susceptible, or die from other causes. In R, one could use rmultinorm as long as one can assign a probability for each event. Here, however, we implement a function from scratch. One way is to follow the approach of Aaron King, author of the pomp package. His method is implemented in C and I adapted it to R and C++ while removing many of its auxiliary functions (e.g., checking the validity of the inputs).\n\nreulermultinom2 &lt;- function (m=2, size, rate, dt) {\n  trans &lt;- matrix(NA, nrow=m, ncol=length(rate))\n  p &lt;- 0.0 # total event rate\n  if ((size &lt; 0.0) | (dt &lt; 0.0) | (floor(size+0.5) != size)) {\n    for (k in seq_along(rate)) {\n      trans[k] = NaN\n    }\n    return(trans)\n  }\n  if (sum(rate &lt; 0.0) &gt; 0){\n    stop(\"Negative rates  are not allowed\")\n  }\n  else {\n    p &lt;- sum(rate)\n  }\n  if (p &gt; 0.0) {\n    for (i in 1:m) {\n      tmpsize &lt;- rbinom(1, size = size, prob = (1-exp(-p*dt))) # total number of events\n      tmpp &lt;- p\n      for (k in 1:(length(rate)-1)) {\n        trans[i, k] = rbinom(1, tmpsize, rate[k]/tmpp)\n        tmpsize = tmpsize - trans[i, k];\n        tmpp = tmpp - rate[k];\n      }\n      trans[i, length(rate)] = tmpsize;\n    }    \n  } \n  \n  return(trans)\n}\n\nLet’s compare it with the original function provided in the pomp package\n\nx &lt;- t(pomp::reulermultinom(1e5, 100, rate=c(1,2), dt=0.05))\ny &lt;- reulermultinom2(1e5, 100, rate=c(1,2), dt=0.05)\nxy &lt;- as.data.frame(cbind(x, y))\nnames(xy) &lt;- c(\"pomp_var1\", \"pomp_var2\", \"var1\", \"var2\")\napply(xy, 2, summary)\n\n        pomp_var1 pomp_var2     var1     var2\nMin.      0.00000   0.00000  0.00000  0.00000\n1st Qu.   3.00000   7.00000  3.00000  7.00000\nMedian    4.00000   9.00000  4.00000  9.00000\nMean      4.63943   9.28385  4.64695  9.29948\n3rd Qu.   6.00000  11.00000  6.00000 11.00000\nMax.     15.00000  24.00000 15.00000 23.00000\n\n\nThe speed difference is quite substantial.\n\nlibrary(microbenchmark)\nmicrobenchmark(pomp::reulermultinom(100, 100, rate=c(1,2), dt=0.05), reulermultinom2(100, 100, rate=c(1,2), dt=0.05))\n\nUnit: microseconds\n                                                      expr   min     lq    mean\n pomp::reulermultinom(100, 100, rate = c(1, 2), dt = 0.05)  39.2  40.30  44.024\n      reulermultinom2(100, 100, rate = c(1, 2), dt = 0.05) 374.6 385.85 504.970\n median     uq    max neval cld\n  41.75  44.25   91.4   100  a \n 399.00 530.05 5534.6   100   b\n\n\nRewrite the function in C++ using Rcpp.\n\nRcpp::cppFunction(\"NumericMatrix reulermultinom_cpp(int m, double size, NumericVector rate, double dt) {\n  int ncol = rate.size();\n  NumericMatrix trans(m, ncol);\n  double p = sum(rate); //total event rate\n  for (int i = 0; i &lt; m; i++) { \n    double tmpp = p;\n    double tmpsize = R::rbinom(size, (1-exp(-tmpp*dt))); // total number of events\n    for (int k = 0; k &lt; (ncol-1); k++) {\n      double tr = R::rbinom(tmpsize, rate(k)/tmpp);\n      trans(i, k) = tr;\n      tmpsize = tmpsize - trans(i, k);\n      tmpp = tmpp - rate(k);\n    }\n    trans(i, (ncol-1)) = tmpsize;\n  }    \n  return(trans);\n}\")\n\n\nlibrary(microbenchmark)\nmicrobenchmark(pomp::reulermultinom(1e5, 100, rate=c(1,2), dt=0.05), reulermultinom_cpp(1e5, 100, rate=c(1,2), dt=0.05))\n\nUnit: milliseconds\n                                                        expr     min       lq\n pomp::reulermultinom(1e+05, 100, rate = c(1, 2), dt = 0.05) 77.3161 81.80885\n   reulermultinom_cpp(1e+05, 100, rate = c(1, 2), dt = 0.05) 74.5419 80.61165\n     mean  median       uq      max neval cld\n 89.34946 88.0295 94.05625 137.9836   100   a\n 87.42233 85.1177 92.16820 113.2549   100   a\n\n\n\nx &lt;- t(pomp::reulermultinom(1e5, 100, rate=c(1,2), dt=0.05))\ny &lt;- reulermultinom_cpp(1e5, 100, rate=c(1,2), dt=0.05)\nxy &lt;- as.data.frame(cbind(x, y))\nnames(xy) &lt;- c(\"pomp_var1\", \"pomp_var2\", \"var1\", \"var2\")\napply(xy, 2, summary)\n\n        pomp_var1 pomp_var2     var1     var2\nMin.       0.0000   0.00000  0.00000  0.00000\n1st Qu.    3.0000   7.00000  3.00000  7.00000\nMedian     4.0000   9.00000  4.00000  9.00000\nMean       4.6421   9.29104  4.64224  9.28226\n3rd Qu.    6.0000  11.00000  6.00000 11.00000\nMax.      17.0000  22.00000 16.00000 25.00000\n\nlibrary(tidyr)\nxy |&gt; pivot_longer(cols=1:4, names_to=\"var\") -&gt; xylong\nlibrary(ggplot2)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\nextrafont::loadfonts()\nggplot(xylong)+\n  geom_violin(aes(x=var, y=value))+\n  facet_wrap(~var, nrow=1, scales=\"free_x\")\n\n\n\n# ggsave(\"multinomial.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)"
  },
  {
    "objectID": "posts/stan_sir_transformed_parameters/index.html",
    "href": "posts/stan_sir_transformed_parameters/index.html",
    "title": "SIR model in Stan: Euler method",
    "section": "",
    "text": "SIR model in Stan\nI developed a SIR model and solved it an Euler method and generated a fake data as a sequence of noisy observation of daily incidence. I could have used the ODE solving routine available in Stan as in my previous post. However, an SIR model solved via the Euler method can be extended mor easily (e.g., stochatic model). I also suspect it would be easier to combine with the other statistical modeling techinques (e.g., hierarchical model), which I am going to post later.\n\nSimulate the data\nGenerate \\(y_{1:N}\\) as a sequence of noisy observations of a daily incidence. Almost the same Stan model is used twice: once to create fake data and the second time to estimate parameters via HMC.\n\n\nStan model to create fake data\n\nstan_code_data &lt;- \"\ndata {\n  int&lt;lower=0&gt; N; // length of the data\n  int&lt;lower=0&gt; iter_per_day;\n  real dt;\n  real&lt;lower=0&gt; S0;\n  real&lt;lower=0&gt; I0;\n  real&lt;lower=0&gt; R0;\n  real&lt;lower=0&gt; CI0;\n  real&lt;lower=0&gt; phi;\n  real&lt;lower=0&gt; gamma;\n  real&lt;lower=0&gt; beta;\n}\n\nparameters {\n\n}\n\n\ntransformed parameters {\n  vector&lt;lower=0&gt;[N] daily_inf;\n  vector&lt;lower=0&gt;[N+1] S;\n  vector&lt;lower=0&gt;[N+1] I;\n  vector&lt;lower=0&gt;[N+1] R;\n  vector&lt;lower=0&gt;[N+1] CI;\n  \n  real&lt;lower=0&gt; st; // susceptible at time t\n  real&lt;lower=0&gt; it;\n  real&lt;lower=0&gt; rt;\n  real&lt;lower=0&gt; cit;  // cumulative infections at time t\n  real&lt;lower=0&gt; n; // total population size\n  real&lt;lower=0&gt; n_si; // number moving from S to I\n  real&lt;lower=0&gt; n_ir; // number moving from I to R\n  \n  S[1] = S0;\n  I[1] = I0;\n  R[1] = R0;\n  CI[1] = CI0;\n    \n  for (i in 2:(N+1)) {\n    st = S[i-1];\n    it = I[i-1];\n    rt = R[i-1];\n    cit = CI[i-1];\n    for (j in 1:iter_per_day) {\n      n = st + it + rt;\n      n_si = dt * beta * st * it / n;\n      n_ir = dt * gamma * it;\n      st = st - n_si;\n      it = it + n_si - n_ir;\n      rt = rt + n_ir;\n      cit = cit + n_si;\n    }\n    S[i] = st;\n    I[i] = it;\n    R[i] = rt;\n    CI[i] = cit;\n  }\n\n  for (i in 2:(N+1)) {\n    daily_inf[i-1] = CI[i] - CI[i-1];\n  }\n}\n\nmodel {\n\n}\n\ngenerated quantities {\n  array[N] int y_sim;\n  for (i in 1:N) {\n    y_sim[i] = neg_binomial_2_rng(daily_inf[i] + 1e-6, phi);\n    //y_sim[i] = poisson_rng(daily_inf[i] + 1e-6);\n  }\n}\n\"\n\n\n\n\n\n\nlibrary(rstan)\noptions(mc.cores = parallel::detectCores())\nrstan_options(auto_write = TRUE)\nmod_data &lt;- stan_model(model_code=stan_code_data, verbose=TRUE)\n\nN=31L \nS0=999\nI0=1\ndt=0.1\n\ndata = list(N=N,\n  S0=S0, I0=I0, R0=0, CI0=0, iter_per_day=round(1/dt),\n  phi=5000, beta=0.3, gamma=0.2, dt=dt)\n\nset.seed(42)\n\nfit = sampling(mod_data, data=data,\n                iter = 200,\n                chains = 1,\n                cores = 1, \n                algorithm = \"Fixed_param\")\n\ndf = as.data.frame(fit)\ny_sim = df[, grepl(\"^y_sim.*\", names(df))]\nplot(1:N, as.numeric(y_sim[1,]))\n\n# saveRDS(y_sim, \"stan_sir_daily_inc_NB.rds\")\n\n\nStan model to estimate parameters\nNote that there are two parameters in the parameters block\n\nstan_code_est &lt;- \"\ndata {\n  int&lt;lower=0&gt; N;\n  int&lt;lower=0&gt; iter_per_day;\n  real dt;\n  int&lt;lower=0&gt; y[N];\n  real&lt;lower=0&gt; S0;\n  real&lt;lower=0&gt; I0;\n  real&lt;lower=0&gt; R0;\n  real&lt;lower=0&gt; CI0;\n  real&lt;lower=0&gt; phi;\n  real&lt;lower=0&gt; r;\n}\n\nparameters {\n  real&lt;lower=0&gt; gamma;\n  real&lt;lower=0&gt; beta;\n}\n\ntransformed parameters {\n  vector&lt;lower=0&gt;[N] daily_inf;\n  vector&lt;lower=0&gt;[N+1] S;\n  vector&lt;lower=0&gt;[N+1] I;\n  vector&lt;lower=0&gt;[N+1] R;\n  vector&lt;lower=0&gt;[N+1] CI;\n  \n  real&lt;lower=0&gt; st; // susceptible at time t\n  real&lt;lower=0&gt; it;\n  real&lt;lower=0&gt; rt;\n  real&lt;lower=0&gt; cit;  // cumulative infections at time t\n  real&lt;lower=0&gt; n; // total population size\n  real&lt;lower=0&gt; n_si; // number moving from S to I\n  real&lt;lower=0&gt; n_ir; // number moving from I to R\n  \n  S[1] = S0;\n  I[1] = I0;\n  R[1] = R0;\n  CI[1] = CI0;\n    \n  for (i in 2:(N+1)) {\n    st = S[i-1];\n    it = I[i-1];\n    rt = R[i-1];\n    cit = CI[i-1];\n    for (j in 1:iter_per_day) {\n      n = st + it + rt;\n      n_si = dt * beta * st * it / n;\n      n_ir = dt * gamma * it;\n      st = st - n_si;\n      it = it + n_si - n_ir;\n      rt = rt + n_ir;\n      cit = cit + n_si;\n    }\n    S[i] = st;\n    I[i] = it;\n    R[i] = rt;\n    CI[i] = cit;\n  }\n\n  for (i in 2:(N+1)) {\n    daily_inf[i-1] = CI[i] - CI[i-1];\n  }\n}\n\n\nmodel {\n  beta ~ exponential(r);\n  gamma ~ exponential(r);\n\n  y ~ neg_binomial_2(daily_inf + 1e-6, phi);\n\n}\"\n\n\nlibrary(rstan)\noptions(mc.cores = parallel::detectCores())\nrstan_options(auto_write = TRUE)\n\nmod_est = stan_model(model_code=stan_code_est, verbose=TRUE)\n\ny_sim = readRDS(\"stan_sir_daily_inc_NB.rds\")\n\ny = as.integer(y_sim[1,])\ndata = list(N=length(y), y=y, S0=S0, I0=I0, R0=0, CI0=0, iter_per_day=round(1/dt), phi=50, r=0.1, dt=dt)\n\nset.seed(42)\n\nfit = sampling(mod_est, data=data,\n                iter = 2000,\n                chains = 4,\n                cores = min(parallel::detectCores(), 4))\n\n# saveRDS(fit, \"stan_sir_daily_inc_NB_fit.rds\")\n\nTrace plot\n\nlibrary(rstan)\nfit = readRDS(\"stan_sir_daily_inc_NB_fit.rds\")\ntraceplot(fit, c(\"beta\",\"gamma\"))\n\n\n\n\n\nPlot the results\n\nlibrary(ggplot2)\nextrafont::loadfonts(\"win\", quiet=TRUE)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\n\ndf = as.data.frame(fit)\nd &lt;- df[, c(\"beta\",\"gamma\")]\ndlong &lt;- tidyr::pivot_longer(d, cols=c(\"beta\",\"gamma\"),\n                             names_to=\"param\")        \n# dlong$param &lt;- as.factor(dlong$param)\nlibrary(dplyr)\nggplot(dlong)+ \n  geom_histogram(aes(x=value))+\n  facet_wrap(~param, nrow=1, scales = \"free_x\")+\n  geom_vline(data=filter(dlong, param ==\"beta\"), aes(xintercept=0.3), color=\"firebrick\", linewidth=1.2) +\n  geom_vline(data=filter(dlong, param ==\"gamma\"), aes(xintercept=0.2), color=\"firebrick\", linewidth=1.2)\n\n\n\n# ggsave(\"sir_euler_stan_param.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)"
  },
  {
    "objectID": "posts/Idiosyncrasy_generality/index.html",
    "href": "posts/Idiosyncrasy_generality/index.html",
    "title": "Idiosyncrasies and generalities",
    "section": "",
    "text": "Idiosyncrasies and generalities\nDebates in the population ecology Bjørnstad and Grenfell.\n\nRelative importance of “noise” (small-scale, high-frequency stochastic influences) versus climatic forcing (larger scale, often lower-frequency signals) versus nonlinear interactions between individuals of the same or different species.\nThe impact of intrinsic (i.e., intraspecific) processes, as opposed to extrinsic or community-level interactions\nNested within 2, “dimensionality” of population fluctuations; given that most populations are embedded in rich communities and affected by numerous interspecific interactions, can simple (low-dimensional) models involving one or a few species capture the patterns of fluctuations?\n\n“… To understand any system, we need to appreciate its idiosyncrasies; to encompass broad patterns, we need to extract generalities…”\nViewing infectious disease epidemiology as a subset of ecology can be highly beneficial. By doing so, we can apply all the components that influence the dynamics of animal species to infectious disease dynamics, to varying degrees.\nIn the context of COVID-19, the modeling of confirmed cases has primarily focused on the variation in transmission rates. Often, the variation within reasonable limits in the transmission rate alone is sufficient to produce the daily number of cases. However, there is a potential risk of overlooking other influential factors, which could lead to biased estimates for transmission.\nBy considering infectious disease dynamics from an ecological perspective, we can broaden our understanding and ensure that relevant factors beyond transmission rates are taken into account. This approach can enhance the accuracy of our modeling and contribute to more effective public health interventions in combating diseases like COVID-19."
  },
  {
    "objectID": "posts/Euler-Lotka/index.html",
    "href": "posts/Euler-Lotka/index.html",
    "title": "Euler-Lotka equation",
    "section": "",
    "text": "Euler-Lotka equation\nThe following content was adapted from the Wikipedia article.\nThe Euler-Lotka equation is a fundamental concept in demographic analysis and population ecology, offering critical insights into the age structure and growth rate of populations. At its core, the equation connects the reproductive rates across different ages to the overall population growth rate.\nLet \\(B(t)dt\\) be the number of births during the time interval from \\(t\\) to \\(t+dt\\). Also define the survival function \\(l(a)\\), the fraction of individuals surviving to age \\(a\\). Finally define \\(b(a)\\) to be the birth rate for mothers of age \\(a\\). The product \\(B(t-a) l(a)\\) therefore denotes the number density of individuals born at \\(t-a\\) and still alive at \\(t\\), while \\(B(t-a)l(a)b(a)\\) denotes the number of births in this cohort, which suggest the following Volterra integral equation for \\(B\\): \\[\n\\begin{align}\nB(t) &= \\int_{a=0}^t B(t-a) l(a) b(a)\\\\\n\\end{align}\n\\]\nIf we assume an exponential solution \\(B(t)=Q e^{rt}\\), the equation becomes\n\\[\n\\begin{align}\nQe^{rt} &= \\int_{a=0}^t Qe^{r(t-a)} l(a) b(a)\\\\\n\\end{align}\n\\]\n\\[\n\\begin{align}\n1 = \\int_{a=0}^t e^{-ra} l(a) b(a)\\\\\n\\end{align}\n\\]\nIn R, we can simulate the Euler-Lotka equation to understand population dynamics better. The following code snippet provides a basic framework for this simulation:\n\n# Define age-specific fertility and survival rates\nages &lt;- seq(from = 15, to = 50, by = 1) # Age range\nfertility_rates &lt;- runif(length(ages), min = 0, max = 5) # Random fertility rates\nsurvival_rates &lt;- runif(length(ages), min = 0, max = 1) # Random survival rates\n\n# Euler-Lotka Equation Function\neuler_lotka &lt;- function(r) {\n    sum(survival_rates * fertility_rates * exp(-r * ages)) - 1\n}\n\n# Finding the intrinsic rate of natural increase\nlibrary(rootSolve)\nr_estimated &lt;- uniroot(euler_lotka, lower = 0, upper = 1)$root\n\n# Output the estimated intrinsic rate of natural increase\nprint(paste(\"Estimated r:\", r_estimated))\n\n[1] \"Estimated r: 0.140031822598998\""
  },
  {
    "objectID": "posts/convolution/index.html",
    "href": "posts/convolution/index.html",
    "title": "Convolution",
    "section": "",
    "text": "Convolution\nThe following content was adapted from the post in Grant Sanderson’s YouTube video and the Wikipedia article.\nConvolution is a fundamental concept in mathematics and statistics, playing a crucial role in various applications ranging from signal processing to probability theory. In this blog post, we’ll explore what convolution is, its significance, and how it’s used in mathematics and statistics. Additionally, I’ll include a practical example using R.\nConvolution is a mathematical operation that combines two functions to produce a third function. It’s a way of ‘mixing’ two functions, often used to understand the way a system modifies a signal. In mathematical terms, the convolution of two functions, \\(f\\) and \\(g\\), is defined as:\n\\[\n(f*g)(t) = \\int_0^{\\infty} f(\\tau)g(t-\\tau) \\textrm{d}\\tau\n\\] Let’s consider a simple example of convolution in R. We’ll convolve two functions, a sine wave and a cosine wave, to see how they interact.\n\n# Define the two functions\nf &lt;- function(x) sin(x)\ng &lt;- function(x) cos(x)\n\n# Create a sequence of points\nx &lt;- seq(-pi, pi, length.out = 100)\n\n# Perform the convolution\nconvolved &lt;- convolve(f(x), g(x), type = \"open\")\n\n# Plot the original functions and their convolution\nplot(x, f(x), type='l', col='blue', ylim=c(-50, 50))\nlines(x, g(x), col='red')\nlines(x, convolved[seq(1,199, length.out=100)], col='green')\nlegend(\"topright\", legend=c(\"f(x) = sin(x)\", \"g(x) = cos(x)\", \"Convolved\"), col=c(\"blue\", \"red\", \"green\"), lty=1)\n\n\n\n\nIn compartmental modeling, it can be used to explore the distribution and features of the consecutive compartments. For example, in the SEIR model, the the length of a generation interval is given by the convolution of E and I compartments."
  },
  {
    "objectID": "posts/generation_interval/index.html",
    "href": "posts/generation_interval/index.html",
    "title": "Generation interval, growth rate, reproduction number",
    "section": "",
    "text": "Growth rate, generation interval, and reproduction number\nWallinga and Lipsitch wrote a highly cited paper about the reproduction number. It discusses how to derive reproduction number, \\(R\\), given the growth rate, \\(r\\), and the generation interval, \\(T_c\\).\n\\[\n\\begin{align}\nR &= 1 + r/b\\\\\nR &= (1 + r/b_1)(1 + r/b_2)\\\\\nR &= \\frac{(1 + r/b_1)^x}{\\sum_{i=1}^y(1 + r/b_2)^{-i}}\\\\\n\\end{align}\n\\]\nI can seem to use the third equation to reproduce the answer to the example the authors provided. On page 603, the authors gave the example of Influenza A where the generation interval has a mean of 2.85 days with the standard deviation of 0.93 days. The epidemic growth rate \\(r = 0.2\\). “The \\(R=1.57\\) for the SIR epidemic model, a value of \\(R=1.65\\) for the SEIR epidemic model and a value of \\(R=1.66\\) the more complicated epidemic model with one latent stage and two infectious stages (equation (3.3), with \\(x=1, y=2\\))”\nI tried to reproduce the results.\n\nTc = 2.85\nsigma = 0.93\nr = 0.2\n# for the SIR model\nb = 1/Tc\n(R = 1 + r/b)\n\n[1] 1.57\n\n# for the SEIR model, assume that b1 and b2 are the same\nb1 = b2 = 2/Tc\n(R = (1 + r/b1)*(1 + r/b2))\n\n[1] 1.651225\n\n\nFor the model with \\(x=1, y=2\\), the \\(R\\) is not the same as provided. \\(R\\) can vary depending on how we set \\(b_1\\) and \\(b_2\\), but it is smaller than one.\n\n# for the SEIR model with x=1, y=2 (i.e., two consecutive . assume that b1 and b2 are the same\nx = 1\ny = 2\nb1 = 2/Tc\nb2 = 4/Tc\n\nnumer = function(x) (1 + r/b1)^x\ndenom = function(y) sum(sapply(1:y, function(i) (1+r/b2)^(-i)))\n\n(R = numer(x=x)/denom(y=y))\n\n[1] 0.7828791\n\n\nThe study also refers to Wearing et al. (2005) study and the result is below. Again, it is not \\(R=1.66\\)\n\n# as presented in Wearing et al.(2005)\n\nm = 1\nn = 2\nb1 = 2/Tc\nb2 = 4/Tc\n\nnumer = r*(r/(b1*m)+1)^m\ndenom = b2*(1-(r/(b2*n)+1)^(-n))\n(R = numer / denom)\n\n[1] 1.423909\n\n\nI implemented moment generating function to see if I can reproduce the results this way. One important aspect is that how we should set the rate to get the generation interval we want.\n\nmgf = function(b, r) b / (b + r)\n\n1/mgf(b=1/Tc, r=r)\n\n[1] 1.57\n\nmgf_recursion = function(c, b, r){\n  l = length(b)\n  if (l == 1) {\n    c * mgf(b, r)\n  } \n  else {\n    c[l] * mgf(b[l], r) * mgf_recursion(c=rep(1,length(b[1:(l-1)])), b=b[1:(l-1)], r=r)\n  }\n}\n\nc = c(0,1/2,1/2)\nb = c(3,3,3)/Tc\n\nR0_recursion = function(c,b,r){\n  out &lt;- rep(NA, length(b))\n  for (i in seq_along(b)) {\n    out[i] = mgf_recursion(c[1:i], b[1:i], r)\n  }\n  1/sum(out)\n}\n\nR0_recursion(c=c(1), b=c(1)/Tc, r=0.2)\n\n[1] 1.57\n\nR0_recursion(c=c(0,1), b=c(2,2)/Tc, r=0.2)\n\n[1] 1.651225\n\n# for y=2 (i.e., Gamma distribution with shape=2)\n# use the relationship \n# average time to infection = beta*(1+alpha)/2 where beta and alpha represent scale and shape\n# beta*(1+alpha)/2 = Tc/2\n# rate = b = (1+alpha)/Tc\nR0_recursion(c=c(0,1/2,1/2), b=c(2,3,3)/Tc, r=0.2)\n\n[1] 1.661816"
  },
  {
    "objectID": "posts/generation_interval1/index.html",
    "href": "posts/generation_interval1/index.html",
    "title": "Generation interval",
    "section": "",
    "text": "Generation interval = incubation period + infectious period?\nAlthough not published, I wrote a correspondence to Lancet to commenting the article. In the article, the authors stated that the generation interval is the sum of the incubation period and the infectious period. I argued that this statement holds only for a constant rate of transmission during the exponentially distributed infectious period (i.e., only a very limited case). Then, I showed that the generation interval varies if the infectious period distribution is different from the exponential distribution even with the constant rate of transmission. Following is the whole message. I now think I am glad that it was not published because I realized that Svensson wrote an article in 2007 to show a similar message in a more rigorous and general way. At least the message and arguments I presented were correct.\n\n\nThe main text\nWhen confronted with a novel disease like the coronavirus disease 2019 (COVID-19), the incubation period and the serial interval are two critical epidemiological variables that are measured during the early stages of an outbreak. A transmission model can be constructed based on these variables to project potential scenarios of outbreak expansion or resolution and, importantly, define the basic reproduction number (\\(R_0\\)) for the disease. The recent article by Wu et al., published in The Lancet on January 31 of this year, one month after the first case was reported in Wuhan, China, uses a transmission model parameterized by data available at the time. This study provided important and timely insights into the spread of COVID-19 in China and elsewhere, concluding that, in addition to Wuhan, other major cities in China and well-connected cities outside China were likely to already have sustained localized outbreaks. The model utilized by Wu et al. makes a key statement, which has limited applications and may lead to unjustified assumptions in subsequent model iterations. The dynamic model requires an input on the length of the infectious period, which Wu et al. derived by assuming that the serial interval is equal to the sum of the infectious period and the latent period (on page 4 of the article by Wu et al.). Neither Wu et al. nor the study to which they refer provides a clear rationale for this statement. The serial interval represents the time between the clinical onset of successive cases [3] and it is naturally expressed as the sum of the incubation period and disease age at transmission* 4. Here we treat the incubation period (the time between infection and the onset of symptoms) as the same as latent period (the time between infection and the onset of infectiousness), for simplicity. The disease age at transmission represents the time between the onset of symptoms of a primary case and the time of infection of the associated secondary cases. Therefore, for the mean serial interval to be the same as the sum of mean incubation period and mean infectious period, the mean disease age at transmission must be equal to the mean infectious period. The mean disease age at transmission is indeed as long as the mean of the exponentially-distributed infectious period, which is often used for convenience in building a differential equation-based model (Table 1). However, for other distributions we explored, the mean disease age at transmission is shorter than mean infectious period, and it is only half of the mean infectious period† when the infectious period is constant. The gamma-distributed infectious period can also be easily adopted in a differential-equation based model to represent a more realistic representation of infectious period and in this case, following Wu et al.’s recipe will lead to a shorter serial interval than is intended. Moreover, each of the aforementioned arguments holds when transmission occurs at a constant rate over the infectious period, and violating this assumption of a constant rate (such as when viral load is high during the initial part of the infectious period and tapers off over time 56 will likely induce an even shorter disease age at transmission.\nThe assumption that the serial interval is the sum of incubation (or latent) period and infectious period seems to hold only when the infectious period is exponentially distributed for a constant transmission rate. For a wider application, one has to calculate the disease age at transmission that leads to a correct serial interval for a given distribution of the infectious period. We believe this is an important point and potentially unjustified assumptions in subsequent model iterations may result in providing outbreak responders with inaccurate projections on the characteristics of disease transmission.\nTable 1. Time to infection since symptom onset under infectious period with different distributions.\n\nTable 1. Time to infection since symptom onset under infectious period with different distributions.\n\n\n\n\n\n\n\n\nInfectious period\nTime to transmission (disease age)\n\n\nDistribution\nExpectation\nSample mean‡ [\\(2.5^{th}\\), \\(97.5^{th}\\) percentile]\nExpectation§\n\n\n\n\nExponential\n5\n5\n5\n\n\nGamma(2,5/2)¶\n5\n3.73 [3.75, 3.71]\n3.75\n\n\nUniform(0,10)\n5\n3.34 [3.32, 3.35]\n3.33\n\n\nWeibull(2,5/2)\n5\n3.17 [3.16, 3.19]\n3.18\n\n\nLognormal(2,5/2)\n5\n2.90 [2.89, 2.91]\n2.90\n\n\nConstant at 5\n5\n2.51 [2.49, 2.52]\n2.50\n\n\n\nFootnotes *Taking statistical distribution into account, we can write the serial interval at time \\(t\\) as the convolution of the distributions of disease age, \\(g\\), and incubation period, \\(f\\): \\(s(t)= \\int_0^t g(t-\\tau)f(\\tau)\\textrm{d}\\tau\\). † Interestingly, the Wikipedia article says that the length of a serial interval is equal to the sum of incubation period and the half of the infectious period 7. ‡To simulate disease age, we drew a random infectious period from each distribution and let transmission occur at a constant probability with R0 of 2.2 over the infectious period. We repeated the process 100000 times to calculate a mean and a \\(2.5^{th}\\) and \\(95^{th}\\) percentiles. §The probability density function for the disease age at transmission at time \\(t\\) may be obtained by \\(g(t) = \\frac{P(X&gt;t)}{∫_0^∞ P(X&gt;t)dt} ~\\textrm{for}~ t∈(0,+∞)\\) for infectious period \\(X\\). The expected value can then be calculated as \\(\\int_0^{\\infty} t g(t)\\textrm{d}t\\). ¶Gamma(shape, rate). This distribution can be produced by assuming two successive compartments with the exit rate of 2/5."
  },
  {
    "objectID": "posts/generation_interval1/index.html#table-1.-time-to-infection-since-symptom-onset-under-infectious-period-with-different-distributions.",
    "href": "posts/generation_interval1/index.html#table-1.-time-to-infection-since-symptom-onset-under-infectious-period-with-different-distributions.",
    "title": "Generation interval",
    "section": "Table 1. Time to infection since symptom onset under infectious period with different distributions.",
    "text": "Table 1. Time to infection since symptom onset under infectious period with different distributions."
  },
  {
    "objectID": "posts/generation_interval1/index.html#infectious-period-disease-age-at-transmission",
    "href": "posts/generation_interval1/index.html#infectious-period-disease-age-at-transmission",
    "title": "Generation interval",
    "section": "Infectious period | Disease age at transmission",
    "text": "Infectious period | Disease age at transmission\nDistribution | Mean | Sample mean [95% confidence interval]‡ | Expected value§| Exponential (mean=5) | 5 | 4.98 [4.95, 5.01] | 5.00 Gamma (mean=5,sd¶=3.5)ǁ | 5 | 3.73 [3.75, 3.71] | 3.75 Uniform[0, 10] | 5 | 3.34 |[3.32, 3.35] | 3.33 Weibull (mean=5, sd=2.6)| 5 | 3.17 [3.16, 3.19] | 3.18 Lognormal (mean=5, sd=2)| 5 | 2.90 [2.89, 2.91] | 2.90 Constant at 5 | 5 | 2.51 [2.49, 2.52] | 2.50 ————————————————————— Footnotes *Taking statistical distribution into account, we can write the serial interval at time \\(t\\) as the convolution of the distributions of disease age, \\(g\\), and incubation period, \\(f\\): \\(s(t)= \\int_0^t g(t-\\tau)f(\\tau)\\textrm{d}\\tau\\). † Interestingly, the Wikipedia article says that the length of a serial interval is equal to the sum of incubation period and the half of the infectious period 7. ‡To simulate disease age, we drew a random infectious period from each distribution and let transmission occur at a constant probability with R0 of 2.2 over the infectious period. We repeated the process 100000 times to calculate a mean and a 95% confidence interval. §The probability density function for the disease age at transmission at time t may be obtained by \\(g(t) = \\frac{P(X&gt;t)}{∫_0^∞ P(X&gt;t)dt} ~\\textrm{for}~ t∈(0,+∞)\\) for infectious period X. The expected value can then be calculated as \\(\\int_0^{\\infty} t g(t)\\textrm{d}t\\). ¶sd=standard deviation ǁThis is the same as Gamma(shape=2, rate=2/5) and is produced by assuming two successive compartments with the exit rate of 2/5. ```"
  },
  {
    "objectID": "posts/critical_vacc_threshold/index.html",
    "href": "posts/critical_vacc_threshold/index.html",
    "title": "Critical vaccination threshold",
    "section": "",
    "text": "The following article by Fine provides a great introduction to the critical vaccination threshold.\n\nCritical vaccination threshold\nThe simplest scenario would be to assume that individuals are well-mixed and vaccine recipients are completely protected from infection. For this scenario, the critical threshold for random vaccination, \\(V_c\\), is as follows: \\[\nV_c = 1-1/R_0\n\\] If vaccines are only partially protective and \\(E\\) fraction of the vaccine recipients are completely protected, \\(V_c\\) becomes as follows: \\[\nV_c = \\frac{1-1/R_0}{E}\n\\]\nI used the population World Population Prospects 2022.\n\n\nPlot the results\n\nlibrary(ggplot2)\nextrafont::loadfonts(\"win\", quiet=TRUE)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\nR0 &lt;- seq(1,5,length.out=100)\nVE &lt;- c(0.4, 0.6, 0.8)\nVc &lt;- lapply(VE, function(x) ifelse((1-1/R0)/x &lt;= 1.0, 100*(1-1/R0)/x, NA))\n\ndf &lt;- data.frame(R0=R0, Vc1=Vc[[1]], Vc2=Vc[[2]], Vc3=Vc[[3]])\n\ngg &lt;- ggplot(df, aes(x = R0)) +\n  geom_rect(aes(xmin=1.15, xmax=2.78, ymin=0, ymax=max(df$Vc3)),\n                   fill = \"pink\", alpha=0.01)+\n  geom_line(aes(y=Vc3, linetype=\"80%\")) +\n  geom_line(aes(y=Vc2, linetype=\"60%\")) +\n  geom_line(aes(y=Vc1, linetype=\"40%\")) +\n  scale_linetype_manual(\"Vaccine efficacy\", values=c(\"80%\"=\"solid\",\n                                   \"60%\"=\"dashed\", \n                                   \"40%\"=\"dotted\"))+\n  # labs(y=\"Critical vaccination threshold\", x=expression(R[0])) +\n  labs(y=expression(paste(\"Critical vaccination threshold (%), \", V[C])), \n       x=expression(paste(\"Basic reproduction number, \", R[0]))) +\n  theme(text = element_text(size=16),\n        axis.text = element_text(size=16),\n        legend.text=element_text(size=15), \n        legend.position = \"bottom\")\n\ngg\n\n\n\n# ggsave(\"Vc_R0.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)\n\n\nR0 &lt;- c(1.15, 2.78)\n(Vc &lt;- 1-1/R0)\n\n[1] 0.1304348 0.6402878\n\n\n\n\nIndia simulation\n\nlibrary(data.table)\nlibrary(readxl)\nlibrary(dplyr)\n# d &lt;- read_xlsx(\"C:/Users/jonghoon.kim/Documents/myblog/posts/critical_vacc_threshold/WPP2022_POP_F01_1_POPULATION_SINGLE_AGE_BOTH_SEXES.xlsx\", sheet= \"Medium variant\")\n# d2 &lt;- d[-(1:11),]\n# india &lt;- d2[(d2$...3 == \"India\" & d2$...11 &gt; 2023),]\n# names(india) &lt;- c(1:2, \"country\", 4:10 ,\"year\", paste0(\"age_\", 0:100))\n\n# saveRDS(india, \"C:/Users/jonghoon.kim/Documents/myblog/posts/critical_vacc_threshold/WPP2022_India.rds\")\n\nindia &lt;- readRDS(\"C:/Users/jonghoon.kim/Documents/myblog/posts/critical_vacc_threshold/WPP2022_India.rds\")\nindia$year &lt;- as.numeric(india$year)\n# india[,paste0(\"age_\", 0:100)] &lt;- as.numeric(india[,paste0(\"age_\", 0:100)])\nindia &lt;- india %&gt;% mutate_at(paste0(\"age_\", 0:100), as.numeric)\n\nyrs &lt;- 2024:2100\n# simulate\nVE &lt;- c(0.4, 0.6, 0.8)\nprop_immune &lt;- rep(NA, length(yrs))\n\nfor(i in seq_along(yrs)) {\n  numerator &lt;- sum(india[india$year == yrs[i], paste0(\"age_\", 0:(i-1))])\n  denominator &lt;- sum(india[india$year == yrs[i], paste0(\"age_\", 0:100)])\n  prop_immune[i] &lt;- numerator / denominator\n} \n\nexisting_immune &lt;- 20\npop_immune_ve &lt;- lapply(VE, function(z) 100*z*prop_immune)\n# add the existing immunity, assumed to be 15%\npop_immune_ve_added &lt;- lapply(VE, function(z) 100*z*prop_immune + existing_immune)\n\ndf &lt;- data.frame(years=yrs-2024, \n                 pi1=pop_immune_ve[[1]], \n                 pi2=pop_immune_ve[[2]], \n                 pi3=pop_immune_ve[[3]], \n                 pi4=pop_immune_ve_added[[1]], \n                 pi5=pop_immune_ve_added[[2]], \n                 pi6=pop_immune_ve_added[[3]])\n\nextrafont::loadfonts(\"win\", quiet=TRUE)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\n\n\ngg &lt;- ggplot(df, aes(x = years)) +\n  geom_rect(aes(xmin=0, xmax=30, ymin=14, ymax=63),\n                   fill = \"pink\", alpha=0.01)+\n  geom_line(aes(y=pi3, linetype=\"80%\")) +\n  geom_line(aes(y=pi2, linetype=\"60%\")) +\n  geom_line(aes(y=pi1, linetype=\"40%\")) +\n  geom_line(aes(y=pi6, linetype=\"80%\"), color=\"dark green\") +\n  geom_line(aes(y=pi5, linetype=\"60%\"), color=\"dark green\") +\n  geom_line(aes(y=pi4, linetype=\"40%\"), color=\"dark green\") +\n  scale_x_continuous(limits=c(0,30))+\n  scale_linetype_manual(\"Vaccine efficacy\", \n                        values=c(\"80%\"=\"solid\",\n                                 \"60%\"=\"dashed\", \n                                 \"40%\"=\"dotted\"))+\n  # labs(y=\"Critical vaccination threshold\", x=expression(R[0])) +\n  labs(y=\"Population immune (%)\", x=\"Years since vaccination\") +\n  theme(text = element_text(size=16),\n        axis.text = element_text(size=16),\n        legend.text=element_text(size=15), \n        legend.position = \"bottom\")\ngg\n\n\n\n# ggsave(\"immune_time.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)"
  },
  {
    "objectID": "posts/implementing_vaccination_single_dose/index.html",
    "href": "posts/implementing_vaccination_single_dose/index.html",
    "title": "Implmenting vaccination in a static vaccine impact model",
    "section": "",
    "text": "Vaccination: single dose regimen\nMany of the previous implementation about vaccination was just about two-dose regiment and it was only needed to set the two-dose vaccine efficacy was introduced.\nHowever, now the challenge is two doses separately and so population will exist in three separate states: susceptible, one-dose recipients, and two-dose recipients. The intricate aspect is that two-dose recipients will be the definition who exhibit two-dose efficacy rather than the operational definition who could imply those who received two doses. Individuals who receive two doses with enough\nOne critical aspect is that two-dose recipients experience protection level observed in clinical trials, i.e., ~65% for around 3 years after infection.\n\nPE &lt;- c(0.3, 0.6)\nrate_wane &lt;- c(1/2, 1/5) # per year\ncov1 &lt;- c(0.8, rep(0,19), 0.8, rep(0,29)) \ncov2 &lt;- c(0.8, rep(0,19), 0.8, rep(0,29)) \ninterval &lt;- 2*7/365 # 2 weeks\nU &lt;- c(1000, rep(0, 49))\nV1 &lt;- rep(0, 50)\nV2 &lt;- rep(0, 50)\n# vaccines introduced in the first year\nU[1] = U[1] - U[1]*cov1[1]\nV1[1] = V1[1] + U[1]*cov1[1] - V1[1]*cov2[1]\nV2[1] = V2[1] + V1[1]*cov2[1]\n\nfor (i in seq_along(U)[-1]) {\n  U[i] = U[i-1] - U[i-1]*cov1[i] + V1[i-1]*rate_wane[1] + V2[i-1]*rate_wane[2]\n  V1[i] = V1[i-1] - V1[i-1]*rate_wane[1] + U[i-1]*cov1[i]\n  V2[i] = V2[i-1] - V2[i-1]*rate_wane[2] + V1[i-1]*cov2[i]\n}\n\n\n\n\n\\[\n\\begin{align}\n\\mathrm{d}S/\\mathrm{d}t &= -\\beta I S \\\\\n\\mathrm{d}I/\\mathrm{d}t &= \\beta I S - \\gamma I\\\\\n\\end{align}\n\\] The first part is simply to compute \\(dI/dS\\).\n\nve_year = c(0.65,0.59,0.52,0.43,0.32,0.19,0.0)\nve_year_frac = c(0.65,0.59,0.52,0.43,0.32,0.19,0.0)/ve_year[1]\n\nssq = function(par) {\n  # -sum(dexp(ve_year_frac, rate=par, log=TRUE))\n  t=0:5\n  sum((ve_year_frac[1:6] - exp(-par*t))^2)\n}\npar = 0.5\nres = optimize(ssq, lower=0, upper=10)\nt=0:6\nexp(-res$minimum*t)\n\n[1] 1.0000000 0.8421417 0.7092026 0.5972491 0.5029684 0.4235707 0.3567065\n\nve_year_frac\n\n[1] 1.0000000 0.9076923 0.8000000 0.6615385 0.4923077 0.2923077 0.0000000"
  },
  {
    "objectID": "posts/universal_differential_eqn/index.html",
    "href": "posts/universal_differential_eqn/index.html",
    "title": "Universal differential equation",
    "section": "",
    "text": "Universal differential equation\nFollwoing python codes were copied from the GitHub site\n\nlibrary(reticulate)\npy_install(\"tensoflow\")\npy_install(\"typing\")\n\n\n# Author: Mattia Silvestri\n\"\"\"\n    Implementation of the Euler method in Tensorflow and related utility methods.\n\"\"\"\nimport sys\nimport tensorflow as tf\n# import tensorflow_probability as tfp\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, InputLayer\nimport numpy as np\nfrom typing import Tuple, List, Union\nfrom tensorflow.keras import backend as K\nimport matplotlib.pyplot as plt\n\ntf.executing_eagerly()\ntf.config.run_functions_eagerly(True)\n\n###############################################################################\n\n\ndef build_model(input_size: int,\n                output_size: int,\n                hidden: list = [],\n                output_activation: str = 'exponential',\n                name: str = None) -&gt; tf.keras.Model:\n    # Build all layers\n    nn_in = tf.keras.Input(shape=(input_size,))\n    nn_out = nn_in\n    for h in hidden:\n        nn_out = tf.keras.layers.Dense(h, activation='relu')(nn_out)\n    nn_out = tf.keras.layers.Dense(output_size, activation=output_activation)(nn_out)\n    # Build the model\n    model = tf.keras.Model(inputs=nn_in, outputs=nn_out, name=name)\n    return model\n\n##############################################################################\n\n\ndef SIR(y, beta, gamma=1 / 10):\n    \"\"\" function performing SIR simulation \"\"\"\n    S, I, R = y[:, 0:1], y[:, 1:2], y[:, 2:3]\n\n    S_to_I = beta * I * S\n    I_to_R = gamma * I\n    dS = - S_to_I\n    dI = S_to_I - I_to_R\n    dR = I_to_R\n\n    return tf.concat([dS, dI, dR], axis=1)\n\n###############################################################################\n\n\ndef SEIR(y, beta, epsilon=1 / 5, gamma=1 / 10):\n    \"\"\" function performing SIR simulation \"\"\"\n    S, E, I, R = y[:, 0:1], y[:, 1:2], y[:, 2:3], y[:, 3:4]\n\n    S_to_E = beta * I * S\n    E_to_I = epsilon * E\n    I_to_R = gamma * I\n    dS = - E_to_I\n    dE = S_to_E - E_to_I\n    dI = E_to_I - I_to_R\n    dR = I_to_R\n\n    return tf.concat([dS, dE, dI, dR], axis=1)\n\n#############################################################################\n\n\nclass PairedSIR(tf.keras.Model):\n    \"\"\"\n        Method for fitting beta parametrization of a SIR\n        covering a specific time window\n    \"\"\"\n\n    def __init__(self,\n                 steps: int,\n                 gamma: float,\n                 stochastic: bool = False):\n\n        \"\"\"\n        Constructor of the class.\n        :param T int; lenght of historical data (in days)\n        :param steps int; the number of steps of the Euler method.\n        :param gamma float; recovery rate of SIR model\n        :param stochastic bool: flag to indicate stochastic training\n        :param mu float: learning rate for lagrangian smoothing coefficient\n        \"\"\"\n\n        super(PairedSIR, self).__init__()\n\n        self.steps = steps\n        self.gamma = gamma\n        self.stochastic = stochastic\n\n        # Parameters\n        self.initializer = tf.keras.initializers.RandomUniform(minval=0, seed=42)\n        # shape_betas = (self.T, 2) if self.stochastic else (self.T,)\n        self.beta = tf.Variable(self.initializer(shape=(1,), dtype='float32'), trainable=True)\n\n        if self.stochastic:\n            self.std = tf.Variable(self.initializer(shape=(1,), dtype='float32'),\n                                   trainable=True,\n                                   constraint=lambda x: tf.clip_by_value(x, 0, 1.))\n\n        # Trackers\n        self.loss_tracker = tf.keras.metrics.Mean(name=\"loss\")\n\n    def call(self, data, training=False):\n        y0 = data\n        S, I, R = y0[:, 0], y0[:, 1], y0[:, 2]\n        h = 1 / self.steps  # update step euler method\n\n        # if the model is stochastic we sample beta\n        if self.stochastic:\n            # mean, std = self.betas[:,0], self.betas[:,1]\n            epsilon = tf.random.normal((1,), mean=0.5, stddev=0.5)\n            beta = (self.beta + self.std * epsilon)\n        else:\n            beta = self.beta\n\n        # SIR integration\n        for _ in range(self.steps):\n            S_to_I = h * (beta * I * S)\n            I_to_R = h * self.gamma * I\n            S = S - S_to_I\n            I = I + S_to_I - I_to_R\n            R = R + I_to_R\n        # TODO - improve code here, there's a way to avoi\n        # all these append and reshape\n        S = tf.reshape(S, [-1, 1])\n        I = tf.reshape(I, [-1, 1])\n        R = tf.reshape(R, [-1, 1])\n        return tf.concat([S, I, R], 1)\n\n    def train_step(self, data):\n        y0, yt = data\n\n        with tf.GradientTape(persistent=True) as tape:\n            tape.watch([self.beta])\n            if self.stochastic:\n                tape.watch([self.std])\n            y_pred = self(y0, training=True)\n            loss = self.compiled_loss(y_pred, yt)\n\n            # Compute Gradient\n        grads = tape.gradient(loss, [self.beta])\n        grads_and_vars = list(zip(grads, [self.beta]))\n        self.optimizer.apply_gradients(grads_and_vars)\n\n        if self.stochastic:\n            grads_std = tape.gradient(loss, [self.std])\n            grads_and_vars_std = list(zip(grads_std, [self.std]))\n            self.optimizer.apply_gradients(grads_and_vars_std)\n\n        self.loss_tracker.update_state(loss)\n\n        return {\"loss\": self.loss_tracker.result()}\n\n    @property\n    def metrics(self):\n        return [self.loss_tracker]\n\n###############################################################################\n\n\nclass UnrolledSIR(tf.keras.Model):\n    \"\"\"\n        Method for fitting beta parametrization of a SIR\n        covering a specific time window\n    \"\"\"\n\n    def __init__(self,\n                 T: int,\n                 steps: int,\n                 gamma: float,\n                 stochastic: bool = False,\n                 mu: float = 1e-1):\n\n        \"\"\"\n        Constructor of the class.\n        :param T int; lenght of historical data (in days)\n        :param steps int; the number of steps of the Euler method.\n        :param gamma float; recovery rate of SIR model\n        :param stochastic bool: flag to indicate stochastic training\n        :param mu float: learning rate for lagrangian smoothing coefficient\n        \"\"\"\n\n        super(UnrolledSIR, self).__init__()\n\n        self.T = T\n        self.steps = steps\n        self.gamma = gamma\n        self.stochastic = stochastic\n        self.mu = mu\n\n        # Parameters\n        self.initializer = tf.keras.initializers.RandomUniform(minval=0.01, maxval=0.04, seed=42)\n        # shape_betas = (self.T, 2) if self.stochastic else (self.T,)\n        self.beta = tf.Variable(self.initializer(shape=(1,), dtype='float32'), trainable=True)\n\n        if self.stochastic:\n            self.std = tf.Variable(self.initializer(shape=(1,), dtype='float32'), trainable=True)\n\n        # Trackers\n        self.loss_tracker = tf.keras.metrics.Mean(name=\"loss\")\n\n    def call(self, data, training=False):\n        y0 = data\n        S, I, R = [y0[0]], [y0[1]], [y0[2]]\n        h = 1 / self.steps  # update step euler method\n\n        # if the model is stochastic we sample beta\n        if self.stochastic:\n            # mean, std = self.betas[:,0], self.betas[:,1]\n            epsilon = tf.random.normal(shape=(1,), mean=0.5, stddev=0.5)\n            beta = (self.beta + self.std * epsilon)[0]\n        else:\n            beta = self.beta[-1]\n        for _ in range(self.T - 1):\n            S_t, I_t, R_t = S[-1], I[-1], R[-1]\n\n            # SIR integration\n            for _ in range(self.steps):\n                S_to_I = h * (beta * I_t * S_t)\n                I_to_R = h * self.gamma * I_t\n                S_t = S_t - S_to_I\n                I_t = I_t + S_to_I - I_to_R\n                R_t = R_t + I_to_R\n\n            # TODO - improve code here, there's a way to avoi\n            # all these append and reshape\n            S = tf.concat([S, [S_t]], 0)\n            I = tf.concat([I, [I_t]], 0)\n            R = tf.concat([R, [R_t]], 0)\n        S = tf.reshape(S, [-1, 1])\n        I = tf.reshape(I, [-1, 1])\n        R = tf.reshape(R, [-1, 1])\n\n        return tf.concat([S, I, R], 1)[1:]  # we remove the first examle y0\n\n    def train_step(self, data):\n        y0, yt = data[0], data[1:]\n\n        with tf.GradientTape(persistent=True) as tape:\n            tape.watch([self.beta])\n            if self.stochastic:\n                tape.watch([self.std])\n            y_pred = self(y0, training=True)\n            loss = self.compiled_loss(y_pred, yt)\n\n            # Compute Gradient\n        grads = tape.gradient(loss, [self.beta])\n        grads_and_vars = list(zip(grads, [self.beta]))\n        self.optimizer.apply_gradients(grads_and_vars)\n\n        if self.stochastic:\n            grads_std = tape.gradient(loss, [self.std])\n            grads_and_vars_std = list(zip(grads_std, [self.std]))\n            self.optimizer.apply_gradients(grads_and_vars_std)\n\n        self.loss_tracker.update_state(loss)\n\n        return {\"loss\": self.loss_tracker.result()}\n\n    @property\n    def metrics(self):\n        return [self.loss_tracker]\n\n##############################################################################\n\n\nclass EndtoEndIntervetionMap(tf.keras.Model):\n    \"\"\"\n        Method to approximate a compartmental model given\n        a set of interventions or NPIs\n    \"\"\"\n\n    def __init__(self,\n                 u_ode,\n                 f_ode,\n                 steps: int = 2,\n                 window_size: int = 7,\n                 params: dict = {'gamma': 1 / 10},\n                 stochastic: bool = False,\n                 mu: float = 1e-2):\n        \"\"\"\n        Constructor of the class.\n        :param u_ode; neural net mappoing interventions and beta\n        :para f_ode; compartmental model function\n        :param steps int; the number of steps of the Euler method.\n        :param window_size int; lenght in days for each time step cosidered\n        :param params dict; set of fixed parameters of the compartmental model\n        :param stochastic bool: flag to indicate stochastic training\n        :param mu float: learning rate for lagrangian smoothing coefficient\n        \"\"\"\n\n        super(EndtoEndIntervetionMap, self).__init__()\n\n        self.u_ode = u_ode\n        self.f_ode = f_ode\n        self.steps = steps\n        self.window_size = window_size\n        self.params = params\n        self.stochastic = stochastic\n        self.mu = mu\n\n        # Trackers\n        self.loss_tracker = tf.keras.metrics.Mean()\n        self.val_tracker = tf.keras.metrics.Mean()\n\n    def call(self, data, training=False):\n        y, x = data\n        for layer in self.layers:\n            x = layer(x)\n        # computing beta if stochastic\n        self.betas = x\n        self.x = x\n        if self.stochastic:\n            ## TODO !!! samples negative values\n            self.mean, self.std = x[:, 0], x[:, 1]\n            epsilon = tf.random.normal(shape=(len(self.mean),), mean=.5, stddev=.5)[0]\n            self.betas = tf.reshape(self.mean + self.std * epsilon, [-1, 1])\n        # integration of compartmental model\n        for _ in range(self.window_size * self.steps):\n            y += 1 / self.steps * self.f_ode(y, self.betas, **self.params)\n        return tf.cast(y, dtype=tf.float64)\n\n    def train_step(self, data):\n        # Unpack the data\n        (y0, x), yt = data\n\n        with tf.GradientTape() as tape:\n            # Watch variables\n            y_pred = self((y0, x), training=True)  # Forward pass\n            # Compute the loss value\n            loss = self.compiled_loss(yt[:, 1], y_pred[:, 1])\n\n            # Compute gradients\n        gradients = tape.gradient(loss, self.trainable_variables)\n        # Update weights\n        self.optimizer.apply_gradients(zip(gradients, self.trainable_variables))\n        # Compute losses\n        self.loss_tracker.update_state(loss)\n\n        return {\"loss\": self.loss_tracker.result()}\n\n    def test_step(self, data):\n        (y0, x), yt = data\n\n        y_pred = self((y0, x))\n        loss = self.compiled_loss(yt[:, 1], y_pred[:, 1])\n        self.val_tracker.update_state(loss)\n\n        return {'loss': self.val_tracker.result()}\n\n    def _tensor(self, xs, dtype=tf.float64):\n        return [tf.convert_to_tensor(x, dtype) for x in xs]\n\n    @property\n    def metrics(self):\n        return [self.loss_tracker, self.val_tracker]```"
  },
  {
    "objectID": "posts/counterfactual_stochastic/index.html",
    "href": "posts/counterfactual_stochastic/index.html",
    "title": "Stochastic simulation in counterfactual scenarios",
    "section": "",
    "text": "Counterfactual analysis in epidemiology\nAt the Xth epidemics conference, I came across this . I was aware of the study but … I was also aware of the issue but treated it as natural results arising from stochasticity of the system we are modeling. However, I realized that stochasticity might cause those flutuations but that is not exactly counterfactual.\nstate-based PRNG sequential access u() - state &lt;- advance(state) - number &lt;- extract(state) - return (number/max_number)\nkey-based PRNG random access u(t, i, trans) - key &lt;- t | i | trans - key &lt;- advance(key, seed) - number &lt;- extract(key) - return (number/max_number)\nThe following example was adapted from the post in RPubs.\n\nSimulate the data\nGenerate \\(y_{1:T}\\) as a sequence of noisy observations of a latent variable \\(x_{1:T}\\).\n\\[\n\\begin{align}\n\\mathrm{d}S/\\mathrm{d}t &= -\\beta I S \\\\\n\\mathrm{d}I/\\mathrm{d}t &= \\beta I S - \\gamma I\\\\\n\\end{align}\n\\] The first part is simply to compute \\(dI/dS\\).\n\nfrom sympy import *\n\nR_0, b, g, dIdt, dSdt, S, I = symbols('R_0 b g dIdt dSdt S I')\n\ndSdt = - b*S*I\ndIdt = + b*S*I - g*I\ndSdI = dIdt / dSdt #-(I*S*b - I*g)/(I*S*b)\n\n# b &lt;- R0*g\nsimplify(-(I*S*R_0*g - I*g)/(I*S*R_0*g)) \n\n-1 + 1/(R_0*S)\n\n\n\n# create a data set: x (latent variable) and y (observation)\nset.seed(42) # to make it reproducible  (lots of random numbers follow)\nT &lt;- 50 # number of observations\nx &lt;- rep(NA, T) # latent variable\ny &lt;- rep(NA, T) # observed values\nsx &lt;- 2.2 # standard deviation for x\nsy &lt;- 0.3 # standard deviation for y\nx[1] &lt;- rnorm(1, 0, 1)\ny[1] &lt;- rnorm(1, x[1], sy)\n\nfor (t in seq(2, T)) {\n  x[t] &lt;- rnorm(1, x[t-1], sx)\n  y[t] &lt;- rnorm(1, x[t], sy)\n}\nx_true &lt;- x\nobs &lt;- y\n\n\n\nImplement a particle filter (sequential Monte Carlo)\n\n# particle filter -----------------------------------------------------------\nT &lt;- length(y) # number of observations\nN &lt;- 100 # number of particles\n# to store prior distributions for variables correspond to latent variable x\nx_prior &lt;- matrix(nrow=N, ncol = T) \nx_post &lt;- matrix(nrow=N, ncol = T)  # posterior distributions\nweights &lt;- matrix(nrow=N, ncol = T) # weights used to draw posterior sample\nW &lt;- matrix(nrow =  N, ncol = T) # normalized weights\nA &lt;- matrix(nrow =  N, ncol = T) # indices based on the normalized weights\nx_prior[, 1] &lt;- rnorm(N, 0, sx)# initial X from a normal distribution\n# calculate weights, normal likelihood\nweights[, 1] &lt;- dnorm(obs[1], x_prior[, 1], sy)\nW[, 1] &lt;- weights[, 1]/sum(weights[, 1])# normalise weights\n# indices based on the weighted resampling with replacement \nA[, 1] &lt;- sample(1:N, prob = W[1:N, 1], replace = T) \nx_post[, 1] &lt;- x_prior[A[, 1], 1] # posterior distribution using the indices\n\nfor (t in seq(2, T)) {\n  x_prior[, t] &lt;- rnorm(N, x_post[, t-1], sx) # prior x_{t} based on x_{t-1}\n  weights[, t] &lt;- dnorm(obs[t], x_prior[, t], sy) # calculate weights \n  W[, t] &lt;- weights[, t]/sum(weights[, t]) # normalise weights\n  A[, t] &lt;- sample(1:N, prob = W[1:N, t], replace = T) # indices\n  x_post[, t] &lt;- x_prior[A[, t], t] # posterior samples\n}\n\n\n\n\nSummarize results\nCalculate the mean and 2.5\\(^\\textrm{th}\\) and 97.\\(^\\textrm{th}\\) percentile of the posterior sample as a means to get 95% credible interval.\n\nx_means &lt;- apply(x_post, 2, mean) # posterior mean\nx_quantiles &lt;- apply(x_post, 2, function(x) quantile(x, probs = c(0.025, 0.975))) # 95% credible interval\ndf &lt;- data.frame(t = seq(1, T),\n                 x_mean = x_means,\n                 x_lb = x_quantiles[1, ],\n                 x_ub = x_quantiles[2, ],\n                 x_true = x_true, # latent variables\n                 y = y) # observed values\n\n\nPlot the results\n\nlibrary(ggplot2)\nextrafont::loadfonts(\"win\", quiet=TRUE)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\nggplot(df, aes(x = t)) +\n  geom_ribbon(aes(ymin = x_lb, ymax = x_ub, fill=\"95% CrI\"), alpha=0.5) +\n  geom_line(aes(y=x_mean, color=\"Posterior mean\")) +\n  geom_line(aes(y=x_true, color=\"True\")) +\n  geom_point(aes(y=x_mean, color=\"Posterior mean\")) +\n  geom_point(aes(y=x_true, color=\"True\")) +\n  labs(y=\"values\", x=\"index\") + \n  scale_colour_manual(\"\", values=c(\"Posterior mean\"=\"firebrick\",\n                                   \"True\"=\"darkgrey\")) +\n  scale_fill_manual(\"\", values=\"firebrick\")+\n  theme(legend.position = \"bottom\")\n\n\n\n# ggsave(\"particle_filter.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)"
  },
  {
    "objectID": "posts/cholera_seir_eqn/index.html",
    "href": "posts/cholera_seir_eqn/index.html",
    "title": "Cholera SEIR equation",
    "section": "",
    "text": "Cholera SEIR equation\n$$ \\[\\begin{align}\n\\lambda_p &= \\frac{\\beta(I_1+I_2+\\psi  (OI_1+OI_2+TI_1+TI_2+OPI_1+OPI_2)}{N}\\\\\n\n\n\\mathrm{d}S/\\mathrm{d}t &= - (\\lambda_p+\\lambda_w)S +2 \\sigma_v OP_2\n+ 2 \\sigma R_2 + 2 \\sigma_v(OP_2 + OPT_2 + OPT_2P + TP_2)\\\\\n\n\\mathrm{d}E_1/\\mathrm{d}t &= (\\lambda_p+\\lambda_w)S - 2\\epsilon E_1\\\\\n\\mathrm{d}OE_1/\\mathrm{d}t &= (\\lambda_p+\\lambda_w)(O_1+O_2) - 2\\epsilon OE_1\\\\\n\\mathrm{d}O_2E_1/\\mathrm{d}t &= (\\lambda_p+\\lambda_w)(O_1+O_2) - 2\\epsilon OE_1\\\\\n\n\\mathrm{d}E_2/\\mathrm{d}t &= 2\\epsilon E_1 - 2\\epsilon E_2 \\\\\n\\mathrm{d}OE_2/\\mathrm{d}t &= 2\\epsilon OE_1 - 2\\epsilon OE_2 \\\\\n\n\\mathrm{d}I_1/\\mathrm{d}t &= 2 (1-\\theta) \\epsilon E_2 - 2 \\gamma I_1 \\\\\n\\mathrm{d}OI_1/\\mathrm{d}t &= 2 (1-\\theta) \\epsilon OE_2 - 2 \\gamma OI_1 \\\\\n\\mathrm{d}I_2/\\mathrm{d}t &= 2 \\gamma I_1 - 2 \\gamma I_2 \\\\\n\\mathrm{d}OI_2/\\mathrm{d}t &= 2 \\gamma OI_1 - 2 \\gamma OI_2 \\\\\n\n\\mathrm{d}A_1/\\mathrm{d}t &= 2 \\theta \\epsilon E_2 - 2 \\gamma A_1 \\\\\n\\mathrm{d}OA_1/\\mathrm{d}t &= 2 \\theta \\epsilon OE_2 - 2 \\gamma OA_1 \\\\\n\n\\mathrm{d}A_2/\\mathrm{d}t &= 2 \\gamma A_1 - 2 \\gamma A_2 \\\\\n\\mathrm{d}OA_2/\\mathrm{d}t &= 2 \\gamma OA_1 - 2 \\gamma OA_2 \\\\\n\\mathrm{d}R_1/\\mathrm{d}t &= 2 \\gamma (I_2 + A_2) - 2 \\sigma R_1 \\\\\n\\mathrm{d}OR_1/\\mathrm{d}t &= 2 \\gamma (OI_2 + OA_2) - 2 \\sigma OR_1 \\\\\n\n\\mathrm{d}R_2/\\mathrm{d}t &= 2 \\sigma (R_1 - R_2) \\\\\n\\mathrm{d}OR_2/\\mathrm{d}t &= 2 \\sigma (OR_1 - OR_2) \\\\\n\n\\mathrm{d}O_1/\\mathrm{d}t &= v S - (\\lambda_p+\\lambda_w)O_1 - 2\\delta O1 - v O_1 \\\\\n\n\\mathrm{d}O_2/\\mathrm{d}t &= 2\\delta O_1 - (\\lambda_p+\\lambda_w)O_2 - 2\\delta O2  - v O_2 \\\\\n\n\\mathrm{d}OP_1/\\mathrm{d}t &= 2\\delta O_2 - \\rho_1(\\lambda_p+\\lambda_w)OP_1 - v OP_1\n  - 2 \\sigma_v OP_1\\\\\n\\mathrm{d}OP_2/\\mathrm{d}t &= 2\\delta OP_1 - \\rho_1(\\lambda_p+\\lambda_w)OP_2 - v OP_2\n  - 2 \\sigma_v OP_2\\\\\n\n\\mathrm{d}OPT_1/\\mathrm{d}t &= v (OP_1 + OP_2) -2\\delta OPT_1\n  - \\rho_1(\\lambda_p+\\lambda_w)OP_1 - 2 \\sigma_v OPT_1\\\\\n\n\\mathrm{d}OPT_2/\\mathrm{d}t &= 2\\delta OPT_1 - 2\\delta OPT_2\n  - \\rho_1(\\lambda_p+\\lambda_w)OPT_2 - 2 \\sigma_v OPT_2\\\\\n\n\\mathrm{d}OPT_1P/\\mathrm{d}t &= 2\\delta OPT_1 - 2\\delta OPT_1P\n  - \\rho_1(\\lambda_p+\\lambda_w)OPT_2 - 2 \\sigma_v OPT_1P\\\\\n\n\\mathrm{d}OPT_2P/\\mathrm{d}t &= 2\\delta OPT_2 - 2\\delta OPT_2P\n  - \\rho_1(\\lambda_p+\\lambda_w)OPT_2 - 2 \\sigma_v OPT_2P\\\\\n\n  \n\\mathrm{d}T_1/\\mathrm{d}t &= v (O_1 + O_2) - 2\\delta T_1\n  - (\\lambda_p+\\lambda_w)T_1\\\\    \n  \n\\mathrm{d}T_2/\\mathrm{d}t &= 2\\delta T_1 - 2\\delta T_2\n  - (\\lambda_p+\\lambda_w)T_2\\\\\n  \n\\mathrm{d}TP_1/\\mathrm{d}t &= 2\\delta T_2 + 2\\delta (OPT_1P + OPT_2P)\n  - \\rho_2(\\lambda_p+\\lambda_w)T_1 - 2 \\sigma_v TP1 \\\\   \n  \n\\mathrm{d}TP_2/\\mathrm{d}t &= 2 \\sigma_v TP1\n  - \\rho_2(\\lambda_p+\\lambda_w)T_1 - 2 \\sigma_v TP2\\\\  \n  \n\\end{align}\\] $$"
  },
  {
    "objectID": "posts/universal_differential_eqn_julia/index.html",
    "href": "posts/universal_differential_eqn_julia/index.html",
    "title": "Universal differential equation",
    "section": "",
    "text": "Universal differential equation\nFollwoing julia codes were copied from the bl GitHub site\n\n\nmain/sir/experiments.py\n\nusing DifferentialEquations\nfunction lotka_volterra(du,u,p,t)\n  x, y = u\n  α, β, δ, γ = p\n  du[1] = dx = α*x - β*x*y\n  du[2] = dy = -δ*y + γ*x*y\nend\n\nlotka_volterra (generic function with 1 method)\n\nu0 = [1.0,1.0]\n\n2-element Vector{Float64}:\n 1.0\n 1.0\n\ntspan = (0.0,10.0)\n\n(0.0, 10.0)\n\np = [1.5,1.0,3.0,1.0]\n\n4-element Vector{Float64}:\n 1.5\n 1.0\n 3.0\n 1.0\n\nprob = ODEProblem(lotka_volterra,u0,tspan,p)\n\nODEProblem with uType Vector{Float64} and tType Float64. In-place: true\ntimespan: (0.0, 10.0)\nu0: 2-element Vector{Float64}:\n 1.0\n 1.0\n\n\n\nsol = solve(prob)\n\nretcode: Success\nInterpolation: specialized 4th order \"free\" interpolation, specialized 2nd order \"free\" stiffness-aware interpolation\nt: 34-element Vector{Float64}:\n  0.0\n  0.0776084743154256\n  0.23264513699277584\n  0.4291185174543143\n  0.6790821987497083\n  0.9444046158046306\n  1.2674601546021105\n  1.6192913303893046\n  1.9869754428624007\n  2.2640902393538296\n  ⋮\n  7.584863345264154\n  7.978068981329682\n  8.48316543760351\n  8.719248247740158\n  8.949206788834692\n  9.200185054623292\n  9.438029017301554\n  9.711808134779586\n 10.0\nu: 34-element Vector{Vector{Float64}}:\n [1.0, 1.0]\n [1.0454942346944578, 0.8576684823217127]\n [1.1758715885138267, 0.639459570317544]\n [1.4196809607170826, 0.4569962601282084]\n [1.876719395008001, 0.32473342927911314]\n [2.5882500645533466, 0.26336255535952163]\n [3.8607089092207665, 0.2794458098285253]\n [5.750812667710396, 0.5220072537934558]\n [6.814978999130169, 1.9177826328390666]\n [4.3929992925714245, 4.194670792850584]\n ⋮\n [2.614253967788294, 0.26416945387525886]\n [4.241076127191749, 0.3051236762921916]\n [6.791123785297795, 1.1345287797146113]\n [6.265370675764892, 2.74169350754023]\n [3.7807651118880545, 4.431165685863461]\n [1.816420140681761, 4.064056625315978]\n [1.1465021407690728, 2.7911706616216976]\n [0.9557986135403302, 1.6235622951850799]\n [1.0337581256020607, 0.9063703842886133]\n\nusing Plots\nplot(sol)\n\n\n\n\n\nu0_f(p,t0) = [p[2],p[4]]\n\nu0_f (generic function with 1 method)\n\ntspan_f(p) = (0.0,10*p[4])\n\ntspan_f (generic function with 1 method)\n\np = [1.5,1.0,3.0,1.0]\n\n4-element Vector{Float64}:\n 1.5\n 1.0\n 3.0\n 1.0\n\nprob = ODEProblem(lotka_volterra,u0_f,tspan_f,p)\n\nODEProblem with uType typeof(u0_f) and tType Unknown. In-place: true\ntimespan: tspan_f (generic function with 1 method)\nu0: u0_f (generic function with 1 method)\n\n\n\np = [1.5,1.0,3.0,1.0]\n\n4-element Vector{Float64}:\n 1.5\n 1.0\n 3.0\n 1.0\n\nprob = ODEProblem(lotka_volterra,u0,tspan,p)\n\nODEProblem with uType Vector{Float64} and tType Float64. In-place: true\ntimespan: (0.0, 10.0)\nu0: 2-element Vector{Float64}:\n 1.0\n 1.0\n\nsol = solve(prob,Tsit5(),saveat=0.1)\n\nretcode: Success\nInterpolation: 1st order linear\nt: 101-element Vector{Float64}:\n  0.0\n  0.1\n  0.2\n  0.3\n  0.4\n  0.5\n  0.6\n  0.7\n  0.8\n  0.9\n  ⋮\n  9.2\n  9.3\n  9.4\n  9.5\n  9.6\n  9.7\n  9.8\n  9.9\n 10.0\nu: 101-element Vector{Vector{Float64}}:\n [1.0, 1.0]\n [1.0610780673356452, 0.821084277588617]\n [1.1440276717257598, 0.67905266897845]\n [1.249171212572448, 0.5668931465841182]\n [1.377644570563639, 0.47881295137951496]\n [1.5312308177480127, 0.4101564670866143]\n [1.7122697558187627, 0.35726544879948396]\n [1.9235782758301572, 0.31734720616177153]\n [2.1683910896994054, 0.288388843787324]\n [2.450250667140252, 0.2690537093960071]\n ⋮\n [1.817282321955561, 4.06494659504332]\n [1.4427612988383511, 3.5397375780465303]\n [1.208908107884445, 2.9914550030314206]\n [1.0685925969627859, 2.4820729201626026]\n [0.9910229623276073, 2.0372445701968624]\n [0.9574213484758295, 1.66320557249741]\n [0.9569793912886607, 1.3555870283301312]\n [0.9835609063200653, 1.106286819941994]\n [1.0337581256020607, 0.9063703842886133]\n\nA = sol[1,:] # length 101 vector\n\n101-element Vector{Float64}:\n 1.0\n 1.0610780673356452\n 1.1440276717257598\n 1.249171212572448\n 1.377644570563639\n 1.5312308177480127\n 1.7122697558187627\n 1.9235782758301572\n 2.1683910896994054\n 2.450250667140252\n ⋮\n 1.817282321955561\n 1.4427612988383511\n 1.208908107884445\n 1.0685925969627859\n 0.9910229623276073\n 0.9574213484758295\n 0.9569793912886607\n 0.9835609063200653\n 1.0337581256020607"
  },
  {
    "objectID": "posts/fit_a_straight_line_julia/index.html",
    "href": "posts/fit_a_straight_line_julia/index.html",
    "title": "Fitting a straight line in Julia: Flux machine learning",
    "section": "",
    "text": "Fitting a straight line in Julia\nThis post is my attempt to learn machine learning in Julia. The contents of this page came from the Flux. Flux is a machine learning package written in Julia.\n\n\nCreate training and test data\n\nusing Flux, Distributions, Random, Statistics\n# create the data\n# true parameter values are 4 and 2\nlinear_model(x) = rand(Normal(4x+2,1))[1]\n\nlinear_model (generic function with 1 method)\n\n\nx_train, x_test = hcat(0:5...), hcat(6:10...)\n\n([0 1 … 4 5], [6 7 … 9 10])\n\ny_train, y_test = linear_model.(x_train), linear_model.(x_test)\n\n([1.552234290757838 5.997621972031162 … 17.799006293669162 21.987462504032138], [26.82759499486528 28.113859596390927 … 38.71844108675521 43.89937704938766])\n\n\n\n\nCreate a neural network model with a single layer\n\n# y = σ.(W * x .+ bias) \nmodel = Flux.Dense(1 =&gt; 1) # 2 parameters\n\nDense(1 =&gt; 1)       # 2 parameters\n\n# prediction based on the untrained baseline model \nmodel(x_train)\n\n1×6 Matrix{Float32}:\n 0.0  -0.230685  -0.461369  -0.692054  -0.922739  -1.15342\n\n\n# define the loss function to use it for training\nloss(m, x, y) = mean(abs2.(m(x) .- y))\n\nloss (generic function with 1 method)\n\nloss(model, x_train, y_train)\n\n214.52561035758617\n\n\n\n\nTrain the model\nFlux package has the Flux.train! function for model training. The function requires an optimizer, which can be, for example, created using Descent function.\n\nusing Flux: train!\n\nopt = Descent() # gradient descent algorithm \n\nDescent(0.1)\n\nDescent(0.1)\n\nDescent(0.1)\n\n\ndata = [(x_train, y_train)]\n\n1-element Vector{Tuple{Matrix{Int64}, Matrix{Float64}}}:\n ([0 1 … 4 5], [1.552234290757838 5.997621972031162 … 17.799006293669162 21.987462504032138])\n\n\ntrain!(loss, model, data, opt)\nloss(model, x_train, y_train)\n\n203.61293290763626\n\n\n# check model parameters after going through the data once\nmodel.weight, model.bias\n\n(Float32[8.607251;;], Float32[2.5395057])\n\n\n# iteratively train the model\nfor epoch in 1:200\n    train!(loss, model, data, opt)\nend\n\n\n\nExamine the trained model\n\n# check the loss\nloss(model, x_train, y_train)\n\n0.19602860021782811\n\n# check the model parameters\nmodel.weight, model.bias\n\n(Float32[4.0600896;;], Float32[2.0363088])\n\n# check the model against the test data set\nmodel(x_test)\n\n1×5 Matrix{Float32}:\n 26.3968  30.4569  34.517  38.5771  42.6372\n\ny_test\n\n1×5 Matrix{Float64}:\n 26.8276  28.1139  33.7393  38.7184  43.8994"
  }
]