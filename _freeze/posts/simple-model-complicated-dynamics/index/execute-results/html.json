{
  "hash": "4f03cdd1c313060b3297e3ad760fb02f",
  "result": {
    "markdown": "---\ntitle: \"Simple mathematical models with very complicated dynamics\"\nauthor: \"Jong-Hoon Kim\"\ndate: \"2023-08-08\"\ncategories: [R, code, analysis]\nimage: \"image.jpg\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n### Simple mathematical models with very complicated dynamics\nRobert M. May Nature Vol. 261 June 10, 1976\n\nThis article discusses a simple first order difference equations that can display very complicated dynamics.\n\n$$X_{t+1} = F(X_t)$$\n\nIn biological population, the nonlinear function $F(x)$ often has the following properties. $F(0)=0$; $F(x)$ increases monotonically as $X$ increases through the range of $0<X<A$ (with $F(x)$ attaining its maximum value at $X=A$); $F(X)$ decreases monotonically as $X$ increases beyond $X=A$ $N_{t+1} = N_t(a-bN_t)$\n\n$X_{t+1} = a X_t (1-X_t)$\n\nX must remain on the interval $0<X<1$; if $X$ ever exceeds unity, subsequent iterations diverge towards $-\\infty$. Furthermore, $F(X)$ attains a maximum value of $a/4$ at $X=1/2$; the equation therefore possesses non-trivial dynamical behaviour only if $a<4$. On the other hand, all trajectories are attracted to $X=0$ if $a<1$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function to compute the value at the next time step\n# 0 < x < 1\n# a < 1 for x to go to zero\n# a > 4 leads to x > 1 at one point, which then leads to - infinity\n# 1 < a < 4 for x to exhibit non-trivial dynamics\nx_next <- function(a, x){\n  a*x*(1-x)\n}\n\nx0 = seq(0.01, 0.99, 0.01)\na = c(2.707, 3.414) # values were adopted from the paper by May Nature Vol. 261 June 10, 1976\nxnext = sapply(x0, function(x) x_next(a, x))\n\nplot(x0, xnext[1,], type='l', ylim=c(0,1), xlim=c(0,1),\n     xlab=expression(X[t]), ylab=expression(X[t+1]))\nlines(x0, xnext[2,])\nlines(0:1, 0:1) # line y = x\n\nxstar = 1 - 1/a # points where X(t+1) = X(t)\npoints(xstar[1], xstar[1])\npoints(xstar[2], xstar[2], col=2)\n# slope at the point x given a\ndx <- function(a,x){\n  -2*a*x+a\n}\n\n# function to compute intercept at the given slope b and point x\nintcpt = function(b,x){\n  x - b*x\n}\n\nabline(a=intcpt(b=dx(a=a,x=xstar[1]),x=xstar[1]), b=dx(a=a,x=xstar[1]), lty=2)\nabline(a=intcpt(b=dx(a=a,x=xstar[2]),x=xstar[2]), b=dx(a=a,x=xstar[2]), lty=2, col=2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx_iter <- function(a, x, iter, func){\n  xvec = rep(NA, iter)\n  xvec[1] = x\n  for(i in 2:iter){\n    xvec[i] = func(a, xvec[i-1])  \n  }\n  return(xvec)\n}\nplot(x_iter(2.9, 0.8, 100, x_next), type=\"l\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n$X_{t+1} = X_t \\textrm{exp}[r(1-X_t)]$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_next_exp <- function(r, x){\n  x*exp(r*(1-x))\n}\n\nplot(x_iter(2, 0.8, 100, x_next_exp), type=\"l\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx_next2 <- function(r, x){\n x1 <- a*x*(1-x)\n x2 <- a*x1*(1-x1)\n return(x2)\n}\n\nxnext = sapply(x0, function(x) x_next2(a, x))\n\nplot(x0, xnext[1,], type='l', ylim=c(0,1), xlim=c(0,1),\n     xlab=expression(X[t]), ylab=expression(X[t+2]))\nlines(x0, xnext[2,])\nlines(0:1, 0:1) # line y = x\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}