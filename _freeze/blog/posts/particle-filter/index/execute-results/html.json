{
  "hash": "3eae66922eb1ba07fb908770f0fbb6a8",
  "result": {
    "markdown": "---\ntitle: \"Particle filter using R\"\nauthor: \"Jong-Hoon Kim\"\ndate: \"2023-7-19\"\ncategories: [particle filter]\nimage: \"particle_filter.png\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n### A simple particle filter in R\n\nThe following example was adapted from the post in [RPubs](https://rpubs.com/awellis/180442).\n\n#### Simulate the data\n\nGenerate $y_{1:T}$ as a sequence of noisy observations of a latent variable $x_{1:T}$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a data set: x (latent variable) and y (observation)\nset.seed(42) # to make it reproducible  (lots of random numbers follow)\nT <- 50 # number of observations\nx <- rep(NA, T) # latent variable\ny <- rep(NA, T) # observed values\nsx <- 2.2 # standard deviation for x\nsy <- 0.3 # standard deviation for y\nx[1] <- rnorm(1, 0, 1)\ny[1] <- rnorm(1, x[1], sy)\n\nfor (t in seq(2, T)) {\n  x[t] <- rnorm(1, x[t-1], sx)\n  y[t] <- rnorm(1, x[t], sy)\n}\nx_true <- x\nobs <- y\n```\n:::\n\n\n#### Implement a particle filter (sequential Monte Carlo)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# particle filter -----------------------------------------------------------\nT <- length(y) # number of observations\nN <- 100 # number of particles\n# to store prior distributions for variables correspond to latent variable x\nx_prior <- matrix(nrow=N, ncol = T) \nx_post <- matrix(nrow=N, ncol = T)  # posterior distributions\nweights <- matrix(nrow=N, ncol = T) # weights used to draw posterior sample\nW <- matrix(nrow =  N, ncol = T) # normalized weights\nA <- matrix(nrow =  N, ncol = T) # indices based on the normalized weights\nx_prior[, 1] <- rnorm(N, 0, sx)# initial X from a normal distribution\n# calculate weights, normal likelihood\nweights[, 1] <- dnorm(obs[1], x_prior[, 1], sy)\nW[, 1] <- weights[, 1]/sum(weights[, 1])# normalise weights\n# indices based on the weighted resampling with replacement \nA[, 1] <- sample(1:N, prob = W[1:N, 1], replace = T) \nx_post[, 1] <- x_prior[A[, 1], 1] # posterior distribution using the indices\n\nfor (t in seq(2, T)) {\n  x_prior[, t] <- rnorm(N, x_post[, t-1], sx) # prior x_{t} based on x_{t-1}\n  weights[, t] <- dnorm(obs[t], x_prior[, t], sy) # calculate weights \n  W[, t] <- weights[, t]/sum(weights[, t]) # normalise weights\n  A[, t] <- sample(1:N, prob = W[1:N, t], replace = T) # indices\n  x_post[, t] <- x_prior[A[, t], t] # posterior samples\n}\n```\n:::\n\n\n### Summarize results\n\nCalculate the mean and 2.5$^\\textrm{th}$ and 97.$^\\textrm{th}$ percentile of the posterior sample as a means to get 95% credible interval.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_means <- apply(x_post, 2, mean) # posterior mean\nx_quantiles <- apply(x_post, 2, function(x) quantile(x, probs = c(0.025, 0.975))) # 95% credible interval\ndf <- data.frame(t = seq(1, T),\n                 x_mean = x_means,\n                 x_lb = x_quantiles[1, ],\n                 x_ub = x_quantiles[2, ],\n                 x_true = x_true, # latent variables\n                 y = y) # observed values\n```\n:::\n\n\n#### Plot the results\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nextrafont::loadfonts(\"win\", quiet=TRUE)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\nggplot(df, aes(x = t)) +\n  geom_ribbon(aes(ymin = x_lb, ymax = x_ub, fill=\"95% CrI\"), alpha=0.5) +\n  geom_line(aes(y=x_mean, color=\"Posterior mean\")) +\n  geom_line(aes(y=x_true, color=\"True\")) +\n  geom_point(aes(y=x_mean, color=\"Posterior mean\")) +\n  geom_point(aes(y=x_true, color=\"True\")) +\n  labs(y=\"values\", x=\"index\") + \n  scale_colour_manual(\"\", values=c(\"Posterior mean\"=\"firebrick\",\n                                   \"True\"=\"darkgrey\")) +\n  scale_fill_manual(\"\", values=\"firebrick\")+\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# ggsave(\"particle_filter.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}