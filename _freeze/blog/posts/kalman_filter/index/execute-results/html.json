{
  "hash": "fba77645e17f4b591544917e40f321a7",
  "result": {
    "markdown": "---\ntitle: \"Kalman filter  to estimate R using the FKF package\"\nauthor: \"Jong-Hoon Kim\"\ndate: \"2024-07-11\"\ncategories: [kalman filter]\nimage: \"kalman_filter.png\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n[Arroyo-Marioli et al](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0244474) used a Kalman filter approach to estimate. I tried to reproduce in R. Let's use a SIR model as was used in my [previous post](https://www.jonghoonk.com/posts/sir_deSolve_odin_diffeqr/) to generate growth rate time series.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(diffeqr)\nde <- diffeqr::diffeq_setup()\n\nsir_julia <- function(u, p, t){\n  N = sum(u)\n  R = ifelse(t < 20, 2, ifelse(t < 40, 0.9, 1.4)) # R varies \n  p[1] = R * p[2]\n  \n  du1 = - p[1]*u[1]*u[2]/N\n  du2 = + p[1]*u[1]*u[2]/N - p[2]*u[2]\n  du3 = + p[2]*u[2]\n  \n  return(c(du1,du2,du3))\n}\n\nu0 <- c(0.99, 0.01, 0.0)\ntspan <- c(0.0, 50.0)\np <- c(0.4, 0.2)\nprob <- de$ODEProblem(sir_julia, u0, tspan, p)\n\n# prob_jit <- diffeqr::jitoptimize_ode(de, prob)\nsol <- de$solve(prob, de$Tsit5(), saveat=1)\n\nmat <- sapply(sol$u, identity)\nudf <- as.data.frame(t(mat))\ntudf <- cbind(data.frame(t=sol$t), udf)\n\nlibrary(ggplot2)\nggplot(tudf, aes(x=t)) +\n  geom_line(aes(y=V1, color=\"S\")) +\n  geom_line(aes(y=V2, color=\"I\")) +\n  geom_line(aes(y=V3, color=\"R\")) +\n  scale_color_manual(\"\", \n                     values=c(\"S\"=\"steelblue\", \"I\"=\"firebrick\",\n                              \"R\"=\"darkgreen\"))+\n  labs(y=\"Number of individuals\", x=\"Time\", color=\"\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nGenerate daily incidence assuming 100,000 population\n\n\n::: {.cell}\n\n```{.r .cell-code}\nI <- 100000 * (tudf$V3 + 0.01) # true number of infected people at time t\ncase_daily <- rpois(length(I)-1, lambda=diff(I)) # observed number of infected people at t\n```\n:::\n\n\n$$I_t = (1-\\gamma) I_{t-1} + \\text{new cases at }t$$ $$\\frac{I_t-I_{t-1}}{I_{t-1}}\\equiv r_t = \\gamma(R_t-1) + \\epsilon_i$$ $$R_t = R_{t-1} + \\eta_i$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngamma <- 0.2 # recovery rate, which is the same as p[2] in the ODE model\nI_hat <- rep(NA, length(case_daily)+1) # true number of infected people at time t\nI_hat[1] <- I[1] # cheating, it's okay as this is the simulation check \nfor (i in 2:length(I_hat)) {\n  I_hat[i] <- (1-gamma)*I_hat[i-1] + case_daily[i-1]\n}\n\nIt <- I_hat # observed number of infected people at t\nn <- length(It)\ngr <- (It[2:n] - It[1:(n-1)]) / It[1:(n-1)] # observed growth rate\nt <- 1:50\nR_true <- ifelse(t < 20, 2, ifelse(t < 40, 0.9, 1.4))\ngr_true <- gamma * (R_true - 1)\nR_hat <- gr / gamma + 1\n\nplot(R_hat, R_true[2:(length(R_hat)+1)], xlim=c(0,3), ylim=c(0,3), \n     xlab=\"R_hat\", ylab=\"R_true\")\nabline(a=0, b=1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nInferring R based on the Kalman filter\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(FKF)\ny <- gr\na0 <- y[1]\nP0 <- matrix(1)\n\ndt <- matrix(0)\nct <- matrix(- gamma)  \nZt <- matrix(gamma)\nTt <- matrix(1)\n\nfit.fkf <- optim(c(HHt = var(y, na.rm = TRUE) * .5,\n                   GGt = var(y, na.rm = TRUE) * .5),\n                 fn = function(par, ...)\n                 -fkf(HHt = matrix(par[1]), GGt = matrix(par[2]), ...)$logLik,\n                 yt = rbind(y), a0 = a0, P0 = P0, dt = dt, ct = ct,\n                 Zt = Zt, Tt = Tt)\n\n# recover values\nHHt <- as.numeric(fit.fkf$par[1])\nGGt <- as.numeric(fit.fkf$par[2])\nHHt; GGt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.01137336\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1.187671e-05\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ny_kf <- fkf(a0, P0, dt, ct, Tt, Zt,\n             HHt = matrix(HHt), GGt = matrix(HHt),\n             yt = rbind(y)) # Kalman filtering\n\ny_ks <- fks(y_kf) # Kalman smoothing\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data.frame(x = seq(from = 1, to = 50, by = 1),\n                   y = R_true,\n                   y_hat = R_hat,\n                   y_kf = as.numeric(y_kf$att),\n                   y_ks = as.numeric(y_ks$ahatt),\n                   y_ks_ub = as.numeric(y_ks$ahatt) + 1.96*as.numeric(sqrt(y_ks$Vt)),\n                   y_ks_lb = as.numeric(y_ks$ahatt) - 1.96*as.numeric(sqrt(y_ks$Vt)))\n\nggplot(data, aes(x = x)) +\n  geom_line(aes(y = y_hat)) +\n  geom_line(aes(y = y_kf, color = \"Kalman filter\"), linewidth=1) +\n  geom_line(aes(y = y_ks, color = \"Kalman smooth\"), linewidth=1) +\n  geom_line(aes(y = y_ks_ub, color = \"Kalman smooth\", linetype=\"Upper bound\"), linewidth=1) +\n  geom_line(aes(y = y_ks_lb, color = \"Kalman smooth\", linetype=\"Lower bound\"), linewidth=1) +\n  geom_line(aes(y = y, color = \"True\"), linewidth=1.2) +\n  xlab(\"day\") + ylab(\"reproduction number\") +\n  ggtitle(\"Reproduction number inferred with Kalman Filter\") +\n  theme_bw()+\n  scale_color_manual(\"\", values=c(\"True\"=\"firebrick\",\"Kalman filter\"=\"steelblue\",\n                                  \"Kalman smooth\"=\"forestgreen\"))+\n  scale_linetype_manual(\"\", values=c(\"Upper bound\"=\"dotted\",\n                                     \"Lower bound\"=\"dotted\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}