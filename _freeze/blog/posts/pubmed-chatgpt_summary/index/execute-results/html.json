{
  "hash": "1c78fa370687846fd8fa52fdeb953546",
  "result": {
    "markdown": "---\ntitle: \"PubMed search, ChatGPT summary, and sending an email in R\"\nauthor: \"Jong-Hoon Kim\"\ndate: \"2023-09-01\"\ncategories: [ChatGPT, R, xml, httr]\nimage: \"chatgpt.png\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n::: {.cell}\n\n:::\n\n\n1.  Search the PubMed database Use the entrez_search function from the rentrez package to search the PubMed database\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rentrez)\n\ndate_start <- gsub(\"-\", \"/\", Sys.Date()-2)\ndate_end <- gsub(\"-\", \"/\", Sys.Date()-1)\nsearch_query <- paste0(\"(typhoid OR cholera) AND \", date_start,\":\", date_end, \"[dp]\") # the search query\nsearch_results <- entrez_search(db=\"pubmed\", term=search_query) # any other useful parameters?\n```\n:::\n\n\n2.  Fetch the details of the article in xml format\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Retrieve the details of the data in xml format based on pubmed ids\narticle_details <- entrez_fetch(db=\"pubmed\", id=search_results$ids, rettype=\"xml\")\n```\n:::\n\n\n3.  Parse the XML using the xml2 package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xml2)\n# Parse the XML data\ndoc <- read_xml(article_details)\n# Extract the titles and abstracts\ntitles <- xml_text(xml_find_all(doc, \"//ArticleTitle\"))\n# abstracts <- xml_text(xml_find_all(doc, \"//AbstractText\"))\nabstracts <- xml_text(xml_find_all(doc, \"//Abstract\"))\ndois <- xml_text(xml_find_all(doc, \".//PubmedData/ArticleIdList/ArticleId[@IdType='doi']\")) # to get the doi's\n```\n:::\n\n\n4.  Call ChatGPT to summarize the abstract in 1-2 sentences This is a subscription-based service. You must have a ChatGPT API key and must have signed up for their paid service.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# gpt-4o\nprompt_chatgpt <- function(prompt, api_key=NULL, model=\"gpt-4o\", temperature=0.8){\n  model <- grep(model, c(\"gpt-3.5-turbo\", \"gpt-4o\"), value=TRUE)\n  response <- httr::POST(\n    url = \"https://api.openai.com/v1/chat/completions\", \n    httr::add_headers(Authorization = paste(\"Bearer\", api_key)),\n    httr::content_type_json(),\n    encode = \"json\",\n    body = list(\n      model = model,\n      temperature = temperature, # this is the degree of randomness of the model's output\n      messages = list(list(\n        role = \"user\", \n        content = prompt\n     ))\n   )\n  )\n  return(httr::content(response)$choices[[1]]$message$content)\n}\n```\n:::\n\n\n5.  Make R send you an email everyday Use simple HTML syntaxes (`<p></p>` or `<b></b>`) to compose an email message using `blastula` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(blastula)\n\ncreate_summary <- function(titles, abstract_summary, ids, dois) {\n  summary <- sapply(1:length(abstract_summary), function(i) paste0(\"<p>\", \" <b>\", \" <a href=https://pubmed.ncbi.nlm.nih.gov/\", ids[i], \"/> \", titles[i], \"</a>\", \" </b> \", abstract_summary[i], \" PMID=\", ids[i], \" DOI=\", dois[i], \"</p>\"))\n  return(summary)\n}\n\nemail <- compose_email(\n  title = \"Test Email\",\n  body = md(create_summary(titles, abstract_summary, ids, dois)))\n\nemail %>%\n  smtp_send( \n    from = \"kimfinale@gmail.com\",\n    to = \"jonghoon.kim@ivi.int\",\n    subject = \"Daily summary of PubMed search\",\n    # credentials = creds_key(id = \"gmail\"),\n    credentials = creds_file(\"gmail_cred\")\n  )\n```\n:::\n\n\n6.  Save all as a single R script\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndate_start <- gsub(\"-\", \"/\", Sys.Date()-2)\ndate_end <- gsub(\"-\", \"/\", Sys.Date()-1)\nsearch_query <- paste0(\"(typhoid OR cholera OR transmission OR modeling) AND \", date_start,\":\", date_end, \"[dp]\") \n \nchatgpt_api_key <- Sys.getenv(\"CHATGPT_API_KEY\")\n\nsearch_res <- rentrez::entrez_search(db=\"pubmed\", term=search_query)\nmodel <- \"gpt-3.5\"  \nif (length(search_res$ids) > 0) { # one or more hits\n  ids <- search_res$ids\n  details <- rentrez::entrez_fetch(db=\"pubmed\", id=ids, rettype=\"xml\")\n  doc <- xml2::read_xml(details)\n  titles <- xml2::xml_text(xml2::xml_find_all(doc, \"//ArticleTitle\"))\n  abstracts <- xml2::xml_text(xml2::xml_find_all(doc, \"//Abstract\"))\n  dois <- xml2::xml_text(xml2::xml_find_all(doc, \"//PubmedData/ArticleIdList/ArticleId[@IdType='doi']\"))\n  \n  abstract_summary <- rep(NA, length(abstracts))\n\n  if (length(abstracts) > 1) {\n    for (i in 1:length(abstracts)) {\n      prompt <- paste0(\"Your task is to generate a short summary of a scientific article based on its title and abstract. Summarize the text delimited by triple backticks into a single sentence. Please do not repeat the title. ``` Title: \", titles[i], \". Abstract: \", abstracts[i], \"```\")\n      abstract_summary[i] <- \n        prompt_chatgpt(prompt=prompt, api_key=chatgpt_api_key, model=model)\n    }\n  }\n  # create a summary for the email  \n  summary <- sapply(1:length(abstract_summary), \n                    function(i) paste0(\"<p>\", \" <b>\", \" <a href=https://pubmed.ncbi.nlm.nih.gov/\", ids[i], \"/> \", titles[i], \"</a>\", \" </b> \", abstract_summary[i], \" PMID=\", ids[i], \". DOI=\", dois[i], \". </p>\"))\n\n  intro <- paste0(\"<p>Please enjoy the articles retrieved from PubMed based on your search query, \", search_query, \", published between \", date_start, \", and \", date_end, \". Each article is accompanied by a one-sentence summary provided by the ChatGPT, \", model, \". For feedback, please contact Jong-Hoon Kim at jonghoon.kim@ivi.int.</p>\")\n  \n  summary <- c(intro, summary)\n  email <- blastula::compose_email(\n    title = \"Weekly summary of PubMed search\",\n    body =  blastula::md(summary))\n  \n  blastula::smtp_send(email, \n    from = \"kimfinale@gmail.com\",\n    to = \"jonghoon.kim@ivi.int\",\n    subject = \"Daily summary of PubMed search\",\n    credentials = blastula::creds_file(\"gmail_creds\")\n  )\n\n} else {\n  \"No articles matched your query.\" \n}\n```\n:::\n\n\n7.  Register the file using the Windows task scheduler\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(taskscheduleR)\n# Schedule the script to run daily at a specific time\ntaskscheduler_create(\n  taskname = \"PubMed_ChatGPT_Summary\",\n  rscript = \"~/myblog/pubmed_chatgpt.R\",\n  schedule = \"WEEKLY\", starttime = \"22:00\", startdate = \"02/06/2024\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}