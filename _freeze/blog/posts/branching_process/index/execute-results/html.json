{
  "hash": "7574d1f94f5cbf13f0a55a0211693249",
  "result": {
    "markdown": "---\ntitle: \"Branching process model\"\nauthor: \"Jong-Hoon Kim\"\ndate: \"2023-11-08\"\ncategories: [R, branching process, final epidemic size]\nimage: \"thumbnail.jpg\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n### Branching process model\n\nIn the branching process model, the number of secondary infections is realized as a random number (e.g., Poission or Negative binomial).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\nR0_mean <- 2\npopsize = 1000 # population size for each iteration\nnrun <- 1000 # number of iterations to compute the mean\noutbreaks <- rep(NA, nrun) # to store outbreak size for each iteration\ninit_inf <- 1 # initially infected people\n\nfor (r in seq_len(nrun)) {\n  pop <- data.frame(id=1:popsize)\n  pop$status <- \"S\"\n  pop$status[1:init_inf] <- \"I\"\n  nS <- sum(pop$status == \"S\")\n  nI <- sum(pop$status == \"I\")\n  N <- nrow(pop)\n  cnt <- init_inf + 1 # infecteds are placed from the first position\n  while (nI > 0 & nS > 0) {\n    row <- which(pop$status == \"I\")\n    nI <- length(row)\n    for (i in seq_len(nI)) {\n      pop$status[row[i]] <- \"R\"\n      offspring <- rpois(1, lambda=R0_mean*nS/N)\n      nS = nS - offspring\n      for (k in seq_len(offspring)) {\n        pop$status[cnt] <- \"I\" \n        cnt <- cnt + 1\n      }\n    }\n  }\n  outbreaks[r] = popsize - sum(pop$status == \"S\")\n}\n\nhist(outbreaks) # minor and major outbreaks\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/sir_branch-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsum(outbreaks>200)/nrun # freq of major outbreaks\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.792\n```\n:::\n\n```{.r .cell-code}\nmean(outbreaks[outbreaks>200])/popsize # outbreak size of the only major outbreaks\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7966742\n```\n:::\n\n```{.r .cell-code}\nmax(outbreaks) # maximum outbreak size\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 853\n```\n:::\n:::\n\n\n### Final epidemic size\n\nTo make sure that my branching process model makes sense, let's compare the final size of an epidemic. As shown in the previous post, for the $SIR$ model in a well-mixed population, the final epidemic size, $R(\\infty)$ is given as follows: $$R(\\infty) = 1 âˆ’ \\text{exp}\\left[-R_0R(\\infty)\\right]$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# final size of an epidemic, R\nfinal_size <- function(R, R0){\n  R - 1 + exp(-R0*R)\n}\n# lower bound set at a positive number to avoid R=0, which is also a solution\nuniroot(final_size, interval=c(1e-3,1), R0=R0_mean)$root\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7968115\n```\n:::\n:::\n\n\n### Negative binomial distribution\n\nWhat would happen if I allow the negative binomial distribution for the offspring\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\nR0_mean <- 2\nR0_size <- 0.2 # loosely based on the estimate for Ebola (see Kucharski et al. 2016 https://wwwnc.cdc.gov/eid/article/22/1/15-1410_article)\npopsize = 1000 # population size for each iteration\nnrun <- 1000 # number of iterations to compute the mean\noutbreaks <- rep(NA, nrun) # to store outbreak size for each iteration\ninit_inf <- 1 # initially infected people\n\nfor (r in seq_len(nrun)) {\n  pop <- data.frame(id=1:popsize)\n  pop$status <- \"S\"\n  pop$status[1:init_inf] <- \"I\"\n  nS <- sum(pop$status == \"S\")\n  nI <- sum(pop$status == \"I\")\n  N <- nrow(pop)\n  cnt <- init_inf + 1 # infecteds are placed from the first position\n  while (nI > 0 & nS > 0) {\n    row <- which(pop$status == \"I\")\n    nI <- length(row)\n    for (i in seq_len(nI)) {\n      pop$status[row[i]] <- \"R\"\n      offspring <- rnbinom(1, mu=R0_mean*nS/N, size=R0_size)\n      nS = nS - offspring\n      for (k in seq_len(offspring)) {\n        pop$status[cnt] <- \"I\" \n        cnt <- cnt + 1\n      }\n    }\n  }\n  outbreaks[r] = popsize - sum(pop$status == \"S\")\n}\n\nhist(outbreaks) # minor and major outbreaks\nsum(outbreaks>200)/nrun # freq of major outbreaks\nmean(outbreaks[outbreaks>200])/popsize # only major outbreaks\nmax(outbreaks) # maximum outbreak size\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}