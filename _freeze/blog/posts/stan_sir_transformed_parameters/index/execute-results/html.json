{
  "hash": "25988d435d202fbec29f40cf5bf780ef",
  "result": {
    "markdown": "---\ntitle: \"SIR model in Stan: Euler method\"\nauthor: \"Jong-Hoon Kim\"\ndate: \"2023-11-28\"\ncategories: [R, Stan, Euler method, SIR model]\nimage: \"sir_euler_stan_param.png\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n### SIR model in Stan\n\nI developed a SIR model and solved it an Euler method and generated a fake data as a sequence of noisy observation of daily incidence. I could have used the ODE solving routine available in Stan as in my previous [post](https://www.jonghoonk.com/posts/ode-in-stan/). However, an SIR model solved via the Euler method can be extended mor easily (e.g., stochatic model). I also suspect it would be easier to combine with the other statistical modeling techinques (e.g., hierarchical model), which I am going to post later.\n\n#### Simulate the data\n\nGenerate $y_{1:N}$ as a sequence of noisy observations of a daily incidence. Almost the same Stan model is used twice: once to create fake data and the second time to estimate parameters via HMC.\n\n#### Stan model to create fake data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstan_code_data <- \"\ndata {\n  int<lower=0> N; // length of the data\n  int<lower=0> iter_per_day;\n  real dt;\n  real<lower=0> S0;\n  real<lower=0> I0;\n  real<lower=0> R0;\n  real<lower=0> CI0;\n  real<lower=0> phi;\n  real<lower=0> gamma;\n  real<lower=0> beta;\n}\n\nparameters {\n\n}\n\n\ntransformed parameters {\n  vector<lower=0>[N] daily_inf;\n  vector<lower=0>[N+1] S;\n  vector<lower=0>[N+1] I;\n  vector<lower=0>[N+1] R;\n  vector<lower=0>[N+1] CI;\n  \n  real<lower=0> st; // susceptible at time t\n  real<lower=0> it;\n  real<lower=0> rt;\n  real<lower=0> cit;  // cumulative infections at time t\n  real<lower=0> n; // total population size\n  real<lower=0> n_si; // number moving from S to I\n  real<lower=0> n_ir; // number moving from I to R\n  \n  S[1] = S0;\n  I[1] = I0;\n  R[1] = R0;\n  CI[1] = CI0;\n    \n  for (i in 2:(N+1)) {\n    st = S[i-1];\n    it = I[i-1];\n    rt = R[i-1];\n    cit = CI[i-1];\n    for (j in 1:iter_per_day) {\n      n = st + it + rt;\n      n_si = dt * beta * st * it / n;\n      n_ir = dt * gamma * it;\n      st = st - n_si;\n      it = it + n_si - n_ir;\n      rt = rt + n_ir;\n      cit = cit + n_si;\n    }\n    S[i] = st;\n    I[i] = it;\n    R[i] = rt;\n    CI[i] = cit;\n  }\n\n  for (i in 2:(N+1)) {\n    daily_inf[i-1] = CI[i] - CI[i-1];\n  }\n}\n\nmodel {\n\n}\n\ngenerated quantities {\n  array[N] int y_sim;\n  for (i in 1:N) {\n    y_sim[i] = neg_binomial_2_rng(daily_inf[i] + 1e-6, phi);\n    //y_sim[i] = poisson_rng(daily_inf[i] + 1e-6);\n  }\n}\n\"\n```\n:::\n\n\n# \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rstan)\noptions(mc.cores = parallel::detectCores())\nrstan_options(auto_write = TRUE)\nmod_data <- stan_model(model_code=stan_code_data, verbose=TRUE)\n\nN=31L \nS0=999\nI0=1\ndt=0.1\n\ndata = list(N=N,\n  S0=S0, I0=I0, R0=0, CI0=0, iter_per_day=round(1/dt),\n  phi=5000, beta=0.3, gamma=0.2, dt=dt)\n\nset.seed(42)\n\nfit = sampling(mod_data, data=data,\n                iter = 200,\n                chains = 1,\n                cores = 1, \n                algorithm = \"Fixed_param\")\n\ndf = as.data.frame(fit)\ny_sim = df[, grepl(\"^y_sim.*\", names(df))]\nplot(1:N, as.numeric(y_sim[1,]))\n\n# saveRDS(y_sim, \"stan_sir_daily_inc_NB.rds\")\n```\n:::\n\n\n### Stan model to estimate parameters\n\nNote that there are two parameters in the parameters block\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstan_code_est <- \"\ndata {\n  int<lower=0> N;\n  int<lower=0> iter_per_day;\n  real dt;\n  int<lower=0> y[N];\n  real<lower=0> S0;\n  real<lower=0> I0;\n  real<lower=0> R0;\n  real<lower=0> CI0;\n  real<lower=0> phi;\n  real<lower=0> r;\n}\n\nparameters {\n  real<lower=0> gamma;\n  real<lower=0> beta;\n}\n\ntransformed parameters {\n  vector<lower=0>[N] daily_inf;\n  vector<lower=0>[N+1] S;\n  vector<lower=0>[N+1] I;\n  vector<lower=0>[N+1] R;\n  vector<lower=0>[N+1] CI;\n  \n  real<lower=0> st; // susceptible at time t\n  real<lower=0> it;\n  real<lower=0> rt;\n  real<lower=0> cit;  // cumulative infections at time t\n  real<lower=0> n; // total population size\n  real<lower=0> n_si; // number moving from S to I\n  real<lower=0> n_ir; // number moving from I to R\n  \n  S[1] = S0;\n  I[1] = I0;\n  R[1] = R0;\n  CI[1] = CI0;\n    \n  for (i in 2:(N+1)) {\n    st = S[i-1];\n    it = I[i-1];\n    rt = R[i-1];\n    cit = CI[i-1];\n    for (j in 1:iter_per_day) {\n      n = st + it + rt;\n      n_si = dt * beta * st * it / n;\n      n_ir = dt * gamma * it;\n      st = st - n_si;\n      it = it + n_si - n_ir;\n      rt = rt + n_ir;\n      cit = cit + n_si;\n    }\n    S[i] = st;\n    I[i] = it;\n    R[i] = rt;\n    CI[i] = cit;\n  }\n\n  for (i in 2:(N+1)) {\n    daily_inf[i-1] = CI[i] - CI[i-1];\n  }\n}\n\n\nmodel {\n  beta ~ exponential(r);\n  gamma ~ exponential(r);\n\n  y ~ neg_binomial_2(daily_inf + 1e-6, phi);\n\n}\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rstan)\noptions(mc.cores = parallel::detectCores())\nrstan_options(auto_write = TRUE)\n\nmod_est = stan_model(model_code=stan_code_est, verbose=TRUE)\n\ny_sim = readRDS(\"stan_sir_daily_inc_NB.rds\")\n\ny = as.integer(y_sim[1,])\ndata = list(N=length(y), y=y, S0=S0, I0=I0, R0=0, CI0=0, iter_per_day=round(1/dt), phi=50, r=0.1, dt=dt)\n\nset.seed(42)\n\nfit = sampling(mod_est, data=data,\n                iter = 2000,\n                chains = 4,\n                cores = min(parallel::detectCores(), 4))\n\n# saveRDS(fit, \"stan_sir_daily_inc_NB_fit.rds\")\n```\n:::\n\n\nTrace plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rstan)\nfit = readRDS(\"stan_sir_daily_inc_NB_fit.rds\")\ntraceplot(fit, c(\"beta\",\"gamma\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n#### Plot the results\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nextrafont::loadfonts(\"win\", quiet=TRUE)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\n\ndf = as.data.frame(fit)\nd <- df[, c(\"beta\",\"gamma\")]\ndlong <- tidyr::pivot_longer(d, cols=c(\"beta\",\"gamma\"),\n                             names_to=\"param\")        \n# dlong$param <- as.factor(dlong$param)\nlibrary(dplyr)\nggplot(dlong)+ \n  geom_histogram(aes(x=value))+\n  facet_wrap(~param, nrow=1, scales = \"free_x\")+\n  geom_vline(data=filter(dlong, param ==\"beta\"), aes(xintercept=0.3), color=\"firebrick\", linewidth=1.2) +\n  geom_vline(data=filter(dlong, param ==\"gamma\"), aes(xintercept=0.2), color=\"firebrick\", linewidth=1.2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# ggsave(\"sir_euler_stan_param.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}