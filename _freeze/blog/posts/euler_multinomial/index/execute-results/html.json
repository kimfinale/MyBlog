{
  "hash": "bdbbf3a9e47bcc264697ea0e13a6d381",
  "result": {
    "markdown": "---\ntitle: \"Multinomial distribution\"\nauthor: \"Jong-Hoon Kim\"\ndate: \"2023-06-19\"\ncategories: [multinomial, Rcpp, pomp]\nimage: \"multinomial.png\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n### A simple particle filter in R\n\nWhen implementing a model of stochastic disease transmission, one has to deal with a situation in which multiple events are possible. For example, susceptible people may become infected, remain susceptible, or die from other causes. In R, one could use `rmultinorm` as long as one can assign a probability for each event. Here, however, we implement a function from scratch. One way is to follow the approach of Aaron King, author of the `pomp` package. His method is implemented in C and I adapted it to R and C++ while removing many of its auxiliary functions (e.g., checking the validity of the inputs).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreulermultinom2 <- function (m=2, size, rate, dt) {\n  trans <- matrix(NA, nrow=m, ncol=length(rate))\n  p <- 0.0 # total event rate\n  if ((size < 0.0) | (dt < 0.0) | (floor(size+0.5) != size)) {\n    for (k in seq_along(rate)) {\n      trans[k] = NaN\n    }\n    return(trans)\n  }\n  if (sum(rate < 0.0) > 0){\n    stop(\"Negative rates  are not allowed\")\n  }\n  else {\n    p <- sum(rate)\n  }\n  if (p > 0.0) {\n    for (i in 1:m) {\n      tmpsize <- rbinom(1, size = size, prob = (1-exp(-p*dt))) # total number of events\n      tmpp <- p\n      for (k in 1:(length(rate)-1)) {\n        trans[i, k] = rbinom(1, tmpsize, rate[k]/tmpp)\n        tmpsize = tmpsize - trans[i, k];\n        tmpp = tmpp - rate[k];\n      }\n      trans[i, length(rate)] = tmpsize;\n    }    \n  } \n  \n  return(trans)\n}\n```\n:::\n\n\nLetâ€™s compare it with the original function provided in the pomp package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- t(pomp::reulermultinom(1e5, 100, rate=c(1,2), dt=0.05))\ny <- reulermultinom2(1e5, 100, rate=c(1,2), dt=0.05)\nxy <- as.data.frame(cbind(x, y))\nnames(xy) <- c(\"pomp_var1\", \"pomp_var2\", \"var1\", \"var2\")\napply(xy, 2, summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        pomp_var1 pomp_var2    var1     var2\nMin.      0.00000   0.00000  0.0000  0.00000\n1st Qu.   3.00000   7.00000  3.0000  7.00000\nMedian    4.00000   9.00000  4.0000  9.00000\nMean      4.64097   9.27939  4.6419  9.28399\n3rd Qu.   6.00000  11.00000  6.0000 11.00000\nMax.     16.00000  25.00000 15.0000 24.00000\n```\n:::\n:::\n\n\nThe speed difference is quite substantial.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(microbenchmark)\nmicrobenchmark(pomp::reulermultinom(100, 100, rate=c(1,2), dt=0.05), reulermultinom2(100, 100, rate=c(1,2), dt=0.05))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n                                                      expr     min       lq\n pomp::reulermultinom(100, 100, rate = c(1, 2), dt = 0.05)  39.702  41.4505\n      reulermultinom2(100, 100, rate = c(1, 2), dt = 0.05) 377.301 384.9005\n      mean  median       uq      max neval cld\n  48.18708  43.651  48.0015   92.801   100  a \n 561.12002 401.851 641.1015 6275.101   100   b\n```\n:::\n:::\n\n\nRewrite the function in C++ using Rcpp.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRcpp::cppFunction(\"NumericMatrix reulermultinom_cpp(int m, double size, NumericVector rate, double dt) {\n  int ncol = rate.size();\n  NumericMatrix trans(m, ncol);\n  double p = sum(rate); //total event rate\n  for (int i = 0; i < m; i++) { \n    double tmpp = p;\n    double tmpsize = R::rbinom(size, (1-exp(-tmpp*dt))); // total number of events\n    for (int k = 0; k < (ncol-1); k++) {\n      double tr = R::rbinom(tmpsize, rate(k)/tmpp);\n      trans(i, k) = tr;\n      tmpsize = tmpsize - trans(i, k);\n      tmpp = tmpp - rate(k);\n    }\n    trans(i, (ncol-1)) = tmpsize;\n  }    \n  return(trans);\n}\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(microbenchmark)\nmicrobenchmark(pomp::reulermultinom(1e5, 100, rate=c(1,2), dt=0.05), reulermultinom_cpp(1e5, 100, rate=c(1,2), dt=0.05))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: milliseconds\n                                                        expr     min       lq\n pomp::reulermultinom(1e+05, 100, rate = c(1, 2), dt = 0.05) 24.9228 27.61285\n   reulermultinom_cpp(1e+05, 100, rate = c(1, 2), dt = 0.05) 23.9839 25.87615\n     mean   median      uq      max neval cld\n 51.27772 41.71065 66.0408 131.8367   100   a\n 51.02618 43.38275 67.6930 120.4940   100   a\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- t(pomp::reulermultinom(1e5, 100, rate=c(1,2), dt=0.05))\ny <- reulermultinom_cpp(1e5, 100, rate=c(1,2), dt=0.05)\nxy <- as.data.frame(cbind(x, y))\nnames(xy) <- c(\"pomp_var1\", \"pomp_var2\", \"var1\", \"var2\")\napply(xy, 2, summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        pomp_var1 pomp_var2     var1     var2\nMin.       0.0000   0.00000  0.00000  0.00000\n1st Qu.    3.0000   7.00000  3.00000  7.00000\nMedian     4.0000   9.00000  4.00000  9.00000\nMean       4.6498   9.28149  4.64416  9.28147\n3rd Qu.    6.0000  11.00000  6.00000 11.00000\nMax.      17.0000  22.00000 15.00000 24.00000\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\nxy |> pivot_longer(cols=1:4, names_to=\"var\") -> xylong\nlibrary(ggplot2)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\nextrafont::loadfonts()\nggplot(xylong)+\n  geom_violin(aes(x=var, y=value))+\n  facet_wrap(~var, nrow=1, scales=\"free_x\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# ggsave(\"multinomial.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}