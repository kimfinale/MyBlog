{
  "hash": "7992bfceef5f575d56fab8a011750819",
  "result": {
    "markdown": "---\ntitle: \"SEIR model with varying number of compartments\"\nauthor: \"Jong-Hoon Kim\"\ndate: \"2024-04-05\"\ncategories: [SEIR, Erlang distribution]\nimage: \"seir_multi_comp.png\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\nThe $SEIR$ model structures each stage as a distinct compartment, with transitions between compartments dictated by specific rate constants, except for the transition between $S$ and $E$ that involve force of infection which is also a function of $t$. Waiting times in the $E$ and $I$ compartments are assumed to follow an exponential distribution. However, to better reflect reality, it might be necessary to consider alternative distributions. For instance, the waiting time in the $E$ compartment, i.e., incubation period, could be represented by a lognormal or Weibull distribution. Within the framework of ordinary differential equations (ODEs), incorporating these distributions directly poses challenges. Nevertheless, by dividing a single compartment into multiple sub-compartments, waiting times follow the Erlang distribution, effectively capturing the essence of both lognormal and Weibull distributions.\n\nThe process of adding multiple sub-compartments is relatively straightforward. The challenge arises when one wishes to dynamically adjust the number of sub-compartments within a single model framework. This post discusses a method to achieve such adaptability in model construction. To enhance model flexibility, I extensively employ strings, specifically utilizing the `eval(str2lang(\"some text\"))` function.\n\n### `diffeqr` package\n\n`diffeqr` package is used use Julia's `DifferentialEquations` library\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(diffeqr)\nde <- diffeqr::diffeq_setup()\n```\n:::\n\n\nFirst, let's construct the classic SEIR model for comparison. This model is equivalent to a variant with variable compartments for the $I$ stage when considering only a single compartment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseir <- function(u, p, t){\n  \n  S <- u[1]; \n  E <- u[2];\n  # the number of compartments to model the duration of infectiousness\n  I <- u[3];\n  R <- u[4]; \n  C <- u[5];\n\n  # population size\n  pop <- S+E+I+R\n  \n  epsilon <- p[1] # 1/latent period\n  gamma <- p[2] # 1/duration of infectiousness\n  beta <- p[3] # transmission rate\n  omega <- p[4] # 1/omega = duration of natural immunity\n  # force of infection\n  foi <- beta*I/pop \n  \n  muEI <- epsilon\n  muIR <- gamma\n  muRS <- omega\n  \n  # differential equations\n  dS <- - foi*S + muRS*R \n  dE <- foi*S - muEI*E\n  dI <- muEI*E - muIR*I\n  dR <- muIR*I - muRS*R\n  \n  dC <- muEI*E\n\n  return(c(dS,dE,dI,dR,dC))\n}\n\n# simulation\nR0 <- 2 # basic reproduction number\nepsilon <- 1/4 # 1/epsilon = incubation period\ngamma <- 1/7 # 1/gamma = duration of infectiousness\nbeta <- R0*gamma # instantaneous transmission rate\nomega <- 1/(4*365) # natural immunity waning rate\n# parameters\nparams <- c(epsilon=epsilon, gamma=gamma, beta=beta, omega=omega)\nu0 <- c(0.99, 0, 0.01, 0, 0)\ntend <- 100 #  \ntspan <- c(0.0, tend)\n  \nprob <- de$ODEProblem(seir, u0, tspan, params)\nsol <- de$solve(prob, de$Tsit5(), saveat=1)\nmat <- sapply(sol$u, identity)\nudf <- as.data.frame(t(mat))\nout <- cbind(data.frame(t=sol$t), udf)\nnames(out) <- c(\"t\",\"S\",\"E\",\"I\",\"R\",\"C\") \n```\n:::\n\n\n### $SEIR$ model with `str2lang`\n\nThe model with variable compartments for the $I$ stage. A part of the model is written using strings using `paste`, which are later evaluated using `eval(str2lang(\"some string\"))`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseir_nstg <- function(u, p, t){\n  \n  S <- u[1]; \n  E <- u[2];\n  # the number of compartments to model the duration of infectiousness\n  nstg <- p[1] \n  for (i in 1:nstg) {\n    eval(str2lang(paste0(\"I\",i,\" <- \", \"u[2+\",i,\"]\")));\n  } \n  R <- u[2 + nstg + 1]; \n  C <- u[2 + nstg + 2];\n\n  # population size\n  istr_sum <- paste(sapply(1:nstg, function(x) paste0(\"I\",x)), collapse=\"+\")\n  eval(str2lang(paste0(\"pop <- S+E+R+\", istr_sum)))\n  \n  epsilon <- p[2] # 1/latent period\n  gamma <- p[3] # 1/duration of infectiousness\n  beta <- p[4] # transmission rate\n  omega <- p[5] # 1/omega = duration of natural immunity\n  # force of infection\n  eval(str2lang(paste0(\"foi <- beta*(\", istr_sum, \")/pop\"))) \n  \n  muEI <- epsilon\n  muIR <- gamma\n  muRS <- omega\n  \n  # differential equations\n  dS <- - foi*S + muRS*R \n  dE <- foi*S - muEI*E\n  dI1 <- muEI*E - nstg*muIR*I1\n\n  #dI2, ...\n  if (nstg >= 2) {\n    for (i in 2:nstg) {\n      eval(str2lang(paste0(\"dI\",i,\" <- \", \n                           nstg, \"*muIR*(I\", i-1, \"-I\", i, \")\")))\n    }\n  }\n  # dR\n  eval(str2lang(paste0(\"dR <- muIR*I\", nstg, \"-muRS*R\")))\n  \n  dC <- muEI*E\n\n  distr <- paste(sapply(1:nstg, function(x) paste0(\"dI\", x)), collapse=\",\")\n  return(eval(str2lang(paste0(\"c(dS,dE,\", distr, \",dR,dC)\"))))\n}\n```\n:::\n\n\nSimulation of the variable-compartment model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrun_seir_nstg <- function(nstg) {\n  R0 <- 2 # basic reproduction number\n  epsilon <- 1/4 # 1/epsilon = incubation period\n  gamma <- 1/7 # 1/gamma = duration of infectiousness\n  beta <- R0*gamma # instantaneous transmission rate\n  omega <- 1/(4*365) # natural immunity waning rate\n  # parameters\n  params <- c(nstg=nstg, epsilon=epsilon, gamma=gamma, beta=beta, omega=omega)\n  # initial distribution of the population across the states\n  I0s <- paste(sapply(1:nstg, function(x) paste0(\"I\", x,\"=0\")), collapse=\",\")\n  eval(str2lang(paste0(\"u0 <- c(S=0,E=0,\", I0s,\",R=0,C=0)\")))\n  u0[c(\"S\",\"E\",\"I1\",\"R\")] <- \n    c(0.99, 0, 0.01, 0) # all I in the first compartment of the nstg I compartments\n  tend <- 100 #  \n  tspan <- c(0.0, tend)\n  \n  prob <- de$ODEProblem(seir_nstg, u0, tspan, params)\n  sol <- de$solve(prob, de$Tsit5(), saveat=1)\n  \n  mat <- sapply(sol$u, identity)\n  udf <- as.data.frame(t(mat))\n  out <- cbind(data.frame(t=sol$t), udf)\n  In <- paste(sapply(1:nstg, function(x) paste0('\"I', x, '\"')), collapse=\",\")\n  names(out) <- eval(str2lang(paste0('c(\"t\",\"S\",\"E\",', In, ',\"R\",\"C\")'))) \n  \n  return(out)\n}\n\nnstg <- 1\nIn <- paste(sapply(1:nstg, function(x) paste0('\"I', x, '\"')), collapse=\",\")\nout1 <- run_seir_nstg(nstg=nstg)\nIt1 <- out1[,\"I1\"]\n\nnstg <- 2\nIn <- paste(sapply(1:nstg, function(x) paste0('\"I', x, '\"')), collapse=\",\")\nout2 <- run_seir_nstg(nstg=nstg)\neval(str2lang(paste0('It2 <- rowSums(out2[,c(', In, ')])')))\nnstg <- 5\nIn <- paste(sapply(1:nstg, function(x) paste0('\"I', x, '\"')), collapse=\",\")\nout5 <- run_seir_nstg(nstg=nstg)\neval(str2lang(paste0('It5 <- rowSums(out5[,c(', In, ')])')))\n```\n:::\n\n\nPlot the simulation results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# png(filename=\"seir_multi_comp.png\")\n\nplot(1:nrow(out), out$I, type=\"l\", ylim=c(0,0.2),\n     ylab=\"fraction infectious\",\n     xlab=\"day\", col=\"black\")\n\nlines(1:nrow(out), It1, col=\"steelblue\")\nlines(1:nrow(out), It2, col=\"firebrick\")\nlines(1:nrow(out), It5, col=\"magenta\")\n\nlegend(\"topright\", \n  legend=c(\"SEIR\",\"1 compartment\",\"2 compartments\", \"5 compartments\"), \n  col=c(\"black\",\"steelblue\", \"firebrick\",\"magenta\"), \n  lty= 1,\n  bty = \"n\", \n  cex = 1.0, \n  text.col = \"black\", \n  horiz = F , \n  inset = c(0.02,0.02))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# dev.off()\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}