{
  "hash": "8b7121d0ab06264ac6cf97cbfe8dcf62",
  "result": {
    "markdown": "---\ntitle: \"Estimating a time-to-event distribution in Stan\"\nauthor: \"Jong-Hoon Kim\"\ndate: \"2023-11-24\"\ncategories: [news, code, analysis]\nimage: \"right_trunc_stan.png\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n### Stan instead of optim\n\nAs in the previous post, let's create a sample through a non-homogeneous process for the infection events and a Gamma distribution for the serial (or generation) interval.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\nn <- 1000\ntmax <- 30 # maximum time of first event\nr <- 0.14 # growth rate\nX <- vector(\"double\", n)\ni <- 1\nct <- 0\n# generate sample through a nonhomogeneous Poisson process\nwhile (ct < tmax) {\n  t <- rexp(1, rate=exp(r*ct))\n  ct <- ct + t\n  X[i] <- ct\n  i <- i+1\n}\nX <- X[X > 0]\n\n# parameters for the serial interval\nshape_true <- 2.2\nscale_true <- 3.3\n\ndf <- data.frame(X=X)\nsi <- rgamma(length(X), shape=shape_true, scale=scale_true)\ndf$Y <- df$X + si\n\ntau <- 33 # truncation time\nunder_tau <- df$Y < tau \nnewdf <- df[under_tau,]\n\nnumerator_func <- function(x, y, parms){\n  exp(r*x)*dgamma(y-x, shape=parms[[1]], scale=parms[[2]])\n}\n\ndenominator_func <- function(t, parms, tmax) {\n  exp(r*t)*pgamma(tmax-t, shape=parms[[1]], scale=parms[[2]])\n}\n\n# single likelihood\nll_right_trunc_exp_growth <- function(parms,x,y,tmax){\n  log(numerator_func(x=x, y=y, parms=parms)) - log(integrate(denominator_func,lower=0, upper=tmax, parms=parms, tmax=tmax)$value)\n}\n\n# sum of negative log likelihoods\nnll_right_trunc_exp_growth <- function(parms, X, Y, tmax){\n  sll <- 0\n  for(i in seq_along(X)) {\n    sll <- sll + ll_right_trunc_exp_growth(parms=parms,x=X[i],y=Y[i],tmax=tmax)\n  }\n  return(-sll)\n}\n\nres_optim = optim(par=c(1,2), \n             fn=nll_right_trunc_exp_growth, \n             X=newdf$X, \n             Y=newdf$Y,\n             tmax=tmax,\n             method = \"Nelder-Mead\",\n             control = list(maxit=2e4, reltol=1e-15))\n```\n:::\n\n\n#### Stan program\n\nGamma distribution accounting for truncation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstan_code <- \"\ndata {\n    int<lower = 0> N; // number of records\n    vector<lower = 0>[N] X;\n    vector<lower = 0>[N] Y;\n    real tau;\n}\n\nparameters {\n    real shape;\n    real scale;\n}\n\nmodel {\n    shape ~ exponential(0.1);\n    scale ~ exponential(0.1);\n    target += gamma_lpdf(Y - X | shape, 1/scale) - gamma_lcdf(tau-X | shape, 1/scale);\n}\"    \n```\n:::\n\n\nGamma distribution accounting for truncation and exponential growth of infections\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstan_code <- \"\nfunctions {\n  real denominator_density(real x,\n                           real xc,                \n                           array[] real theta,     \n                           array[] real x_r,                        \n                           array[] int x_i){\n    real shape = theta[1];\n    real scale = theta[2];\n  \n    return exp(0.14 * x) * gamma_cdf(33 - x, shape, 1/scale);\n  }\n}\ndata {\n    int<lower = 0> N; // number of records\n    vector<lower = 0>[N] X;\n    vector<lower = 0>[N] Y;\n    real tau;\n    real r;\n}\n\ntransformed data{     \n  array[0] real x_r;\n  array[0] int x_i;  \n} \n\nparameters {\n    real shape;\n    real scale;\n}\n\ntransformed parameters {\n  vector[N] log_exp_r;\n  for (n in 1:N)\n    log_exp_r[n] = log(exp(r*X[n]));\n}\n\nmodel {\n    shape ~ exponential(0.1);\n    scale ~ exponential(0.1);\n    \n    for (i in 1:N)\n      target += log(exp(r*X[i])) + gamma_lpdf(Y[i] - X[i] | shape, 1/scale) -                          log(integrate_1d(denominator_density, 0, tau,\n                           {shape, scale}, x_r, x_i, 1e-2));\n     \n}\"\n```\n:::\n\n\n#### Compile and sample\n\n`integrate_1d(denominator_density, 0, tau, {shape, scale}, x_r, x_i, 1e-3)` cause errors. Four of the two samplers generated samples if the rel_tol is increased to 1e-2 for `seed=42`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rstan)\noptions(mc.cores = parallel::detectCores())\nrstan_options(auto_write = TRUE)\nmod <- stan_model(model_code=stan_code, verbose=TRUE)\ndata <- list(N=nrow(newdf), X=newdf$X, Y=newdf$Y, tau=tau, r=r)\n# smp <- sampling(object=mod, data=data, seed=33, chains=4, iter=2000)\n# saveRDS(smp, \"stan_trunc_smp_20231124.rds\")\n```\n:::\n\n\nLet's explore the posterior distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmp <- readRDS(\"stan_trunc_smp_20231124.rds\")\ndf <- as.data.frame(smp)\npr <- c(0.5,0.025,0.975)\nd <- as.data.frame(t(apply(df[,c(\"shape\", \"scale\")],\n                           2, quantile, probs=pr)))\n\nd$name <- c(\"shape\", \"scale\")\nd$true <- c(shape_true, scale_true)\nd$optim <- res_optim$par\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           50%     2.5%    97.5%  name true    optim\nshape 2.085903 1.760453 2.448298 shape  2.2 2.090817\nscale 3.484215 2.680270 4.770225 scale  3.3 3.482427\n```\n:::\n:::\n\n\nLet's plot the results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ntheme_set(hrbrthemes::theme_ipsum_rc(base_size=14, subtitle_size=16, axis_title_size=12))\nextrafont::loadfonts()\nggplot(d)+ \n  geom_errorbar(aes(x=name, ymin=`2.5%`, ymax=`97.5%`), width=0.0)+\n  geom_point(aes(x=name, y=`50%`, color=\"Stan\"), size=3)+\n  geom_point(aes(x=name, y=true, col=\"True value\"), size=3)+\n  geom_point(aes(x=name, y=optim, col=\"Optim\"), size=3)+\n  scale_color_manual(values=c(\"Stan\"=\"black\",\n                              \"True value\"=\"firebrick\", \"Optim\"=\"steelblue\"))+\n  labs(x=\"\", y=\"\", title=\"Median estimates with 95% CrI\")+\n  theme(legend.position=\"bottom\", legend.title=element_blank())+\n  scale_x_discrete(breaks=c(\"shape\",\"scale\"),\n                   labels=c(expression(theta[1]),expression(theta[2])))+\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# ggsave(\"right_trunc_stan.png\", gg, units=\"in\", width=3.4*2, height=2.7*2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- df[, c(\"shape\",\"scale\")]\ndlong <- tidyr::pivot_longer(d, cols=c(\"shape\",\"scale\"),\n                             names_to=\"param\")        \ndlong$param <- as.factor(dlong$param)\nlibrary(dplyr)\nggplot(dlong)+ \n  geom_histogram(aes(x=value))+\n  facet_wrap(~param, nrow=1, scales = \"free_x\")+\n  geom_vline(data=filter(dlong, param ==\"shape\"), aes(xintercept=shape_true), color=\"firebrick\", linewidth=1.2) +\n  geom_vline(data=filter(dlong, param ==\"scale\"), aes(xintercept=scale_true), color=\"firebrick\", linewidth=1.2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}