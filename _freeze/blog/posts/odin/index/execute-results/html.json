{
  "hash": "002a830481c4d91de5690561b9b05d06",
  "result": {
    "markdown": "---\ntitle: \"odin package \"\nauthor: \"Jong-Hoon Kim\"\ndate: \"2023-09-15\"\ncategories: [ODE, R, odin]\nimage: \"thumbnail.jpg\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n이번 [Vaccine Impact Modeling Consoritum (VIMC)](https://www.vaccineimpact.org/) 연례회의에서 `odin`이라는 패키지에 대해 알게 되었다. `deSolve`의 업그레이드 버전이라고 보면 될까? R 코드를 C언어로 컴파일하기 때문에 최종 모형의 구동속도가 빠르다. 따라서 모형을 여러번 돌려야 하는 경우 (예를 들어 MCMC) 에 유리하다. `pomp` 보다도 훨씬 더 빠르다고 했는데 정확한 비교 수치는 잘 기억이 안남. 종종 C++로 모형을 만들었는데 `odin` 패키지를 사용하면 훨씬 쉬워질 것 같다. 좀 더 살펴보아야 할 텐데 일단 잊지 않기 위해 간단히 SIR 모형만 만들어 보았다.\n\n### Deterministic SIR model\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath_sir_model <- \"C:/Users/jonghoon.kim/Documents/myblog/blog/posts/odin/sir.R\"\nwriteLines(readLines(path_sir_model))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n## Core equations for transitions between compartments:\nupdate(S) <- S - beta * S * I / N\nupdate(I) <- I + beta * S * I / N - gamma * I\nupdate(R) <- R + gamma * I\n\n## Total population size (odin will recompute this at each timestep:\n## automatically)\nN <- S + I + R\n\n## Initial states:\ninitial(S) <- S_ini # will be user-defined\ninitial(I) <- I_ini # will be user-defined\ninitial(R) <- 0\n\n## User defined parameters - default in parentheses:\nS_ini <- user(1000)\nI_ini <- user(1)\nbeta <- user(0.2)\ngamma <- user(0.1)\n```\n:::\n:::\n\n\nRun the model and plot the results\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(odin)\nsir_generator <- odin::odin(path_sir_model)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- sir_generator$new()\n# see what the object is like\n# x\nsir_col <- c(\"#8c8cd9\", \"#cc0044\", \"#999966\")\nx_res <- x$run(0:200)\n\npar(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)\nmatplot(x_res[, 1], x_res[, -1], xlab = \"Time\", ylab = \"Number of individuals\",\n        type = \"l\", col = sir_col, lty = 1)\nlegend(\"topright\", lwd = 1, col = sir_col, legend = c(\"S\", \"I\", \"R\"), bty = \"n\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n### Stochastic SIR model\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath_sir_stoch_model <- \"C:/Users/jonghoon.kim/Documents/myblog/blog/posts/odin/sir_stoch.R\"\nwriteLines(readLines(path_sir_stoch_model))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n## Core equations for transitions between compartments:\nupdate(S) <- S - n_SI\nupdate(I) <- I + n_SI - n_IR\nupdate(R) <- R + n_IR\n\n## Individual probabilities of transition:\np_SI <- 1 - exp(-beta * I / N) # S to I\np_IR <- 1 - exp(-gamma) # I to R\n\n## Draws from binomial distributions for numbers changing between\n## compartments:\nn_SI <- rbinom(S, p_SI)\nn_IR <- rbinom(I, p_IR)\n\n## Total population size\nN <- S + I + R\n\n## Initial states:\ninitial(S) <- S_ini\ninitial(I) <- I_ini\ninitial(R) <- 0\n\n## User defined parameters - default in parentheses:\nS_ini <- user(1000)\nI_ini <- user(1)\nbeta <- user(0.2)\ngamma <- user(0.1)\n```\n:::\n:::\n\n\nRun the model and plot the results\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsir_generator <- odin::odin(path_sir_stoch_model)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\nx <- sir_generator$new()\nx_res <- x$run(0:200)\npar(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)\nmatplot(x_res[, 1], x_res[, -1], xlab = \"Time\", ylab = \"Number of individuals\",\n        type = \"l\", col = sir_col, lty = 1)\nlegend(\"topright\", lwd = 1, col = sir_col, legend = c(\"S\", \"I\", \"R\"), bty = \"n\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}