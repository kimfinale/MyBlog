{
  "hash": "fe098c2efb709ae06f4a21f72ca686ba",
  "result": {
    "markdown": "---\ntitle: \"Fitting a straight line in Julia: Flux machine learning\"\nauthor: \"Jong-Hoon Kim\"\ndate: \"2024-01-04\"\ncategories: [julia, Flux, linear model]\nimage: \"flux_logo.png\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n### Fitting a straight line in Julia\n\nThis post is my attempt to learn machine learning in Julia. The contents of this page came from the [Flux](https://fluxml.ai/Flux.jl/stable/models/overview/). `Flux` is a machine learning package written in Julia.\n\n### Create training and test data\n\n\n::: {.cell}\n\n```{.julia .cell-code}\nusing Flux, Distributions, Random, Statistics\n# create the data\n# true parameter values are 4 and 2\nlinear_model(x) = rand(Normal(4x+2,1))[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlinear_model (generic function with 1 method)\n```\n:::\n\n```{.julia .cell-code}\n\nx_train, x_test = hcat(0:5...), hcat(6:10...)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n([0 1 … 4 5], [6 7 … 9 10])\n```\n:::\n\n```{.julia .cell-code}\ny_train, y_test = linear_model.(x_train), linear_model.(x_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n([2.4026932318407495 5.949285185429201 … 17.316799499402293 20.00123315299341], [26.267203000424637 29.3186325205348 … 40.34823197526444 42.919475237241265])\n```\n:::\n:::\n\n\n### Create a neural network model with a single layer\n\n\n::: {.cell}\n\n```{.julia .cell-code}\n# y = σ.(W * x .+ bias) \nmodel = Flux.Dense(1 => 1) # 2 parameters\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDense(1 => 1)       # 2 parameters\n```\n:::\n\n```{.julia .cell-code}\n# prediction based on the untrained baseline model \nmodel(x_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1×6 Matrix{Float32}:\n 0.0  -1.66877  -3.33753  -5.0063  -6.67506  -8.34383\n```\n:::\n\n```{.julia .cell-code}\n\n# define the loss function to use it for training\nloss(m, x, y) = mean(abs2.(m(x) .- y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nloss (generic function with 1 method)\n```\n:::\n\n```{.julia .cell-code}\nloss(model, x_train, y_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n335.3910074651219\n```\n:::\n:::\n\n\n### Train the model\n\n`Flux` package has the `Flux.train!` function for model training. The function requires an optimizer, which can be, for example, created using `Descent` function.\n\n\n::: {.cell}\n\n```{.julia .cell-code}\nusing Flux: train!\n\nopt = Descent() # gradient descent algorithm \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDescent(0.1)\n```\n:::\n\n```{.julia .cell-code}\nDescent(0.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDescent(0.1)\n```\n:::\n\n```{.julia .cell-code}\n\ndata = [(x_train, y_train)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1-element Vector{Tuple{Matrix{Int64}, Matrix{Float64}}}:\n ([0 1 … 4 5], [2.4026932318407495 5.949285185429201 … 17.316799499402293 20.00123315299341])\n```\n:::\n\n```{.julia .cell-code}\n\ntrain!(loss, model, data, opt)\nloss(model, x_train, y_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n318.3230947174688\n```\n:::\n\n```{.julia .cell-code}\n\n# check model parameters after going through the data once\nmodel.weight, model.bias\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Float32[9.375584;;], Float32[3.186498])\n```\n:::\n\n```{.julia .cell-code}\n\n# iteratively train the model\nfor epoch in 1:200\n    train!(loss, model, data, opt)\nend\n```\n:::\n\n\n### Examine the trained model\n\n\n::: {.cell}\n\n```{.julia .cell-code}\n# check the loss\nloss(model, x_train, y_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.3441841968180955\n```\n:::\n\n```{.julia .cell-code}\n# check the model parameters\nmodel.weight, model.bias\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Float32[3.637514;;], Float32[2.748934])\n```\n:::\n\n```{.julia .cell-code}\n# check the model against the test data set\nmodel(x_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1×5 Matrix{Float32}:\n 24.574  28.2115  31.849  35.4866  39.1241\n```\n:::\n\n```{.julia .cell-code}\ny_test\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1×5 Matrix{Float64}:\n 26.2672  29.3186  34.5149  40.3482  42.9195\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}