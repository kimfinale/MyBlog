{
  "hash": "3a46e3759c378f68cfc930eb4dee82b1",
  "result": {
    "markdown": "---\ntitle: \"Template\"\nauthor: \"Jong-Hoon Kim\"\ndate: \"2024-01-09\"\ncategories: [oral cholera vaccine, all-or-nothing, vaccine efficacy]\nimage: \"sample_figure.png\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n### Oral cholera vaccine\n\nAssumption\n - Vaccination is implemented in a all-or-nothing fashion\n - Two-dose efficacy is $VE$\n - The first-dose efficacy is $ve_1$\n \nWhat the efficacy of the second vaccine dose, $ve_2$, has to be if the want the same number of people is averted,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42) # to make it reproducible\nN = 1000\nVE = 0.8 # vaccine efficacy under two dose regimen\nvacc_cov = 0.6 # vaccine coverage\nve1 = 0.4 # efficacy of the first dose\n\nvacc_protected_VE = VE*vacc_cov*N\nvacc_protected_ve1 = ve1*vacc_cov*N\nvacc_protected_ve_ve2 = vacc_protected_ve1 + (VE-ve1)*vacc_cov*N\n```\n:::\n\n\n### Implementing the first and the seocond dose separately\n\nSuppose that a population size is $N$ and the vaccine coverage, $0<=v<=1$. We introduce a parameter, $\\pi$, to represent the proportion of the first-dose recipients who receive the second dose. If $\\pi=1$, the number of vaccine recipients is $Nv$ and the number of two-dose recipients is also $Nv$ and the number of vaccinees who only received a single dose is zero. More generally, however, if $\\pi < 1$, the number of complete two-dose recipients is $Nv\\pi$ and those who have only received one dose is $2Nv(1-\\pi)$.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42) # to make it reproducible\nN = 1000\nve2 = 0.8 # vaccine efficacy under two dose regimen\nve1 = 0.4 # efficacy of the first dose\nvacc_cov = 0.6 # vaccine coverage\npi = 0.95 # proportion of the first-dose recipients who again received the second dose\nvacc_protected_ve2 = ve2*vacc_cov*N\nvacc_protected_ve1 = ve1*vacc_cov*N\nvacc_protected_ve1_ve2 = \n  pi*(vacc_protected_ve1 + (ve2-ve1)*vacc_cov*N) + 2*(1-pi)*ve1*vacc_cov*N\n\nvacc_protected_ve1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 240\n```\n:::\n\n```{.r .cell-code}\nvacc_protected_ve1_ve2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 480\n```\n:::\n:::\n\n\nThese are estimates and algebraic relationship wouldn't hold.\n$$\n\\begin{align}\nc_2 &= v_1 \\pi \\\\\nc_{1+} &= v_1 \\pi + v_1(1-\\pi) + v_2(1-\\pi v_1/v_2) \n\n\\end{align}\n$$\n$c_2$ and $c_{1+}$ represent coverage for complete two-dose regiment and at least one dose, respectively. $\\pi$ represents the proportion of the vaccinees who received the first dose and went on to receive the second dose. \n\nEstimates from Pezzolli et al. (2020)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncov_first = 90.3 # v_1\ncov_second = 88.2# v_2\ncov_two <- 69.9 #c_2\ncov_one_plus <- 84.6 #c_1+\n```\n:::\n\n\n\n\n\nBoundary conditions for the pi for the vr1plus must not be bigger than 1\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a function that calculates \nocv_round_cov_calc = function(vc1=0.95, vc2=0.95, vr1plus=NULL, vr2=NULL, pi=0.7){\n  \n  if (pi < (vc1+vc2-1)/vc1) {\n    stop(paste0(\"pi must be larger than (vc1+vc2-1)/vc1, \", (vc1+vc2-1)/vc1))\n  } else if (pi > (vc2/vc1)) {\n    stop(paste0(\"pi must be smaller than vc2/vc1, \", vc2/vc1))\n  }\n  vr2 = vc1*pi  \n  # vr1plus = vc1*pi + vc1*(1-pi) + vc2*(1-pi*vc1/vc2)\n  vr1plus = vr2 + vc1*(1-pi) + vc2*(1-pi*vc1/vc2) \n  vr1 = vr1plus - vr2\n  # TODO there are several limiting conditions\n  # vaccine coverage is \n  return (list(vr1plus=vr1plus, vr2=vr2, vr1=vr1))\n}\nocv_round_cov_calc(vc1=0.56, vc2=0.46, vr1plus=NULL, vr2=NULL, pi=0.80)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$vr1plus\n[1] 0.572\n\n$vr2\n[1] 0.448\n\n$vr1\n[1] 0.124\n```\n:::\n:::\n\n\nWhen the first dose is distributed, apply the \nWhen the second dose is distributed, identify the number of two-dose and one-dose recipients and compare that number with the previous round\n\n\n\n### Summarize results\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}