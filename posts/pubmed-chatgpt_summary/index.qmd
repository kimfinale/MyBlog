---
title: "PubMed search, ChatGPT summary, and sending an email in R"
author: "Jong-Hoon Kim"
date: "2023-09-01"
categories: [ChatGPT, R, xml, httr]
image: "image.jpg"
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning=FALSE, message=FALSE, echo=TRUE)
```

```{r eval=FALSE, include=FALSE}
email_creds <- creds(user="kimfinale", provider="gamil", host="smtp.gmail.com", port=587, use_ssl = TRUE)

create_smtp_creds_key(
  id = "gmail",
  user = "kimfinale@gmail.com",
  provider = "gmail",
  overwrite = TRUE,
  use_ssl = TRUE
)
# gmail_app_key <- "hcfbzgxqcvqfepau"

create_smtp_creds_file(
  file = "G:/My Drive/Personal/gmail_cred",
  user = "kimfinale@gmail.com",
  provider = "gmail",
  host = "smtp.gmail.com",
  use_ssl = TRUE
)

create_smtp_creds_key(
  id = "outlook",
  user = "jonghoon.kim@ivi.int",
  provider = "office365",
  host = "smtp.office365.com",
  use_ssl = TRUE,
  overwrite = TRUE)

saveRDS(gmail_appkey, "gmail_app_key.rds")

view_credential_keys()

create_smtp_creds_file() 
```

최신 연구 동향을 잘 알기 위해서 ChatGPT의 요약기능을 사용해보자. PubMed에서 검색을 하고 ChatGPT를 이용하여 초록을 한 두 문장으로 요약하여 그 결과를 이메일로 보내주는 것이다. 이 모든 것을 R에서 쉽게 할 수 있다.

```{r, eval=FALSE}
chatgpt_api_token <- readRDS("G:/My Drive/Personal/chatGPT_api_key.rds")
```

1.  Search the PubMed database Use the entrez_search function from the rentrez package to search the PubMed database

```{r, eval=FALSE}
library(rentrez)

query <- "typhoid" # the search query
search_results <- entrez_search(db="pubmed", term=query, datetype="pdat", reldate=10) # any other useful parameters?
```

2.  Fetch the details of the article in xml format

```{r, eval=FALSE}
# Get the IDs of the articles
ids <- search_results$ids
# Retrieve the details of the data in xml format
article_details <- entrez_fetch(db="pubmed", id=ids, rettype="xml")
```

3.  Parse the XML using the xml2 package

```{r, eval=FALSE}
library(xml2)
# Parse the XML data
doc <- read_xml(article_details)
# Extract the titles and abstracts
titles <- xml_text(xml_find_all(doc, "//ArticleTitle"))
# abstracts <- xml_text(xml_find_all(doc, "//AbstractText"))
abstracts <- xml_text(xml_find_all(doc, "//Abstract"))
dois <- xml_text(xml_find_all(doc, ".//PubmedData/ArticleIdList/ArticleId[@IdType='doi']")) # to get the doi's
```

4.  Call ChatGPT to summarize the abstract in 1-2 sentences This is a subscription-based service. You must have a ChatGPT API key and must have signed up for their paid service.

```{r, eval=FALSE}
get_completion <- function(prompt, model="gpt-3.5-turbo", temperature=0){
  response <- httr::POST(
    url = "https://api.openai.com/v1/chat/completions", 
    add_headers(Authorization = paste("Bearer", chatgpt_api_token)),
    content_type_json(),
    encode = "json",
    body = list(
      model = model,
      temperature = temperature, # this is the degree of randomness of the model's output
      messages = list(list(
        role = "user", 
        content = prompt
     ))
   )
  )
  return(content(response)$choices[[1]]$message$content)
}



abstract_summary <- rep(NA,length(abstracts))
# You may want to try different prompts to suit your needs
for (i in 1:length(abstracts)) {
  prompt = paste0("Your task is to generate a short summary of a scientific article based on its title and abstract. Summarize the text delimited by triple backticks into one sentence. ``` Title: ", titles[i], ". Abstract: ", abstracts[i], "```")
  abstract_summary[i] <- get_completion(prompt=prompt)
}
```

5.  Make R send you an email everyday Use simple HTML syntaxes (`<p></p>` or `<b></b>`) to compose an email message using `blastula` package

```{r, eval=FALSE}
library(blastula)

# create_summary <- function(titles, abstract_summary, ids, dois){
#   summary <- sapply(1:length(abstract_summary), function(i) paste0("<p>", " <b> ", titles[i], " </b> ", abstract_summary[i], " PMID=", ids[i] , " DOI=", dois[i], "</p>"))
#   return(summary)
# }

create_summary <- function(titles, abstract_summary, ids, dois){
  summary <- sapply(1:length(abstract_summary), function(i) paste0("<p>", " <b>", " <a href=https://pubmed.ncbi.nlm.nih.gov/", ids[i], "/> ", titles[i], "</a>", " </b> ", abstract_summary[i], " PMID=", ids[i], " DOI=", dois[i], "</p>"))
  return(summary)
}

email <- compose_email(
  title = "Test Email",
  body = md(create_summary(titles, abstract_summary, ids, dois)))

email %>%
  smtp_send( 
    from = "kimfinale@gmail.com",
    to = "jonghoon.kim@ivi.int",
    subject = "Daily summary of PubMed search",
    # credentials = creds_key(id = "gmail"),
    credentials = creds_file("gmail_cred")
  )

# email %>%
#   smtp_send(
#     from = "jonghoon.kim@ivi.int",
#     to = "jonghoon.kim@ivi.int",
#     subject = "Testing the `smtp_send()` function",
#     credentials = creds_key(id = "outlook")
#   )
```

6.  Save all as a single R script

For example, save the following script as `pubmed_search_chatgpt_summary.R`

```{r, eval=FALSE}
pubmed_search_chatgpt_summary <- function(query="typhoid",
                                          reldate=10,
                                          prompt_text = "",
                                          num_sentence=1,                       
                                          model="gpt-3.5-turbo", 
                                          temperature=0){
  library(rentrez)
  library(httr)
  library(xml2)
  library(blastula)
  chatgpt_api_token <- readRDS("G:/My Drive/Personal/chatGPT_api_key.rds")

  get_completion <- function(prompt, model="gpt-3.5-turbo",
                             temperature=0, api_token=chatgpt_api_token){
  response <- POST(
    url = "https://api.openai.com/v1/chat/completions", 
    add_headers(Authorization = paste("Bearer", api_token)),
    content_type_json(),
    encode = "json",
    body = list(
      model = model,
      temperature = temperature,
      messages = list(list(
        role = "user", 
        content = prompt))
    )
  )
  return(content(response)$choices[[1]]$message$content)
}
  
  res <- entrez_search(db="pubmed", term=query, 
                       datetype="pdat", reldate=reldate)
  
  if (length(res$ids) > 0){ # one or more hits
    ids <- res$ids
    details <- entrez_fetch(db="pubmed", id=ids, rettype="xml")
    doc <- read_xml(details)
    titles <- xml_text(xml_find_all(doc, "//ArticleTitle"))
    abstracts <- xml_text(xml_find_all(doc, "//Abstract"))
    dois <- xml_text(xml_find_all(doc, "//PubmedData/ArticleIdList/ArticleId[@IdType='doi']"))
    
    abstract_summary <- rep(NA, length(abstracts))

    if (length(abstracts) > 1) {
      for (i in 1:length(abstracts)) {
        prompt <- paste0("Your task is to generate a short summary of a scientific article based on its title and abstract. Summarize the text delimited by triple backticks into ", num_sentence , " sentence. Please do not repeat the title. ", prompt_text , " ``` Title: ", titles[i], ". Abstract: ", abstracts[i], "```")
        abstract_summary[i] <- get_completion(prompt=prompt, model=model, temperature=temperature)
      }
    }
    
  summary <- sapply(1:length(abstract_summary), function(i) paste0("<p>", " <b>", " <a href=https://pubmed.ncbi.nlm.nih.gov/", ids[i], "/> ", titles[i], "</a>", " </b> ", abstract_summary[i], " PMID=", ids[i], ". DOI=", dois[i], ". </p>"))

  intro <- paste0("<p>Please enjoy the articles retrieved from PubMed based on your search query, ",  query, ", published in the past ", reldate, " days. Each article is accompanied by a one-sentence summary provided by the ChatGPT, gpt-3.5-turbo. For feedback, please contact Jong-Hoon Kim at jonghoon.kim@ivi.int.</p>")
  
  summary <- c(intro, summary)
  email <- compose_email(
    title = "Weekly summary of PubMed search",
    body =  md(summary))
  }
  
  return (email)
}

pubmed_search_chatgpt_summary_email <- function(query="typhoid",
                                          reldate=10,
                                          prompt_text = "",
                                          num_sentence=1,                       
                                          model="gpt-3.5-turbo", 
                                          temperature=0,
                                          email_recipient="jonghoon.kim@ivi.int") {
 email <- pubmed_search_chatgpt_summary(query=query,
                                reldate=reldate,
                                prompt_text = prompt_text,
                                num_sentence = num_sentence,            
                                model = model, 
                                temperature = temperature)
  smtp_send(
    email = email,
    to = email_recipient,
    from = "kimfinale@gmail.com",
    subject = "Daily summary of PubMed search",
    # credentials = creds_key(id = "gmail")
    credentials = creds_file("gmail_cred")
  )
}
```


```{r}
# pubmed_search_chatgpt_summary(query="typhoid", email_recipient="jonghoon.kim@ivi.int")
pubmed_search_chatgpt_summary_email(
  query = "cholera AND vaccine AND impact",
  reldate = 365*30,
  email_recipient = "jonghoon.kim@ivi.int")

email <- pubmed_search_chatgpt_summary(
  query = "implementation AND science",
  reldate = 7)
# email <- pubmed_search_chatgpt_summary(
#   query = "implementation AND infectious AND disease", 
#   reldate = 7)

email_recipient <- "jenny.joh@ivi.int"
smtp_send(
  email = email_inf_dis,
  to = email_recipient,
  from = "kimfinale@gmail.com",
  subject = "Daily summary of PubMed search",
  # credentials = creds_key(id = "gmail")
  credentials = creds_file("gmail_cred")
)

```

7.  Register the file using the Windows task scheduler

```{r, eval=FALSE}
library(taskscheduleR)
# Schedule the script to run daily at a specific time
taskscheduler_create(taskname = "PubMed ChatGPT Summary",
                     rscript = "G:/My Drive/Personal/pubmed_search_chatgpt_summary.R"),
schedule = "DAILY", starttime = "08:00")
```
